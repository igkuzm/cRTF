Microsoft® MS®-DOS, Windows®, Windows NT®, and Apple Macintosh Applications

Rich Text Format (RTF) Specification and Sample RTF Reader Program

Version:
RTF Version 1.5

 Application Note 4/97− GC0165

INTRODUCTION The Rich Text Format (RTF) Specification is a method of encoding
formatted text and graphics for easy transfer between applications. Currently,
users depend on special translation software to move wordprocessing documents
between different MS-DOS®, Windows, OS/2, Macintosh, and Power Macintosh
applications.  The RTF Specification provides a format for text and graphics
interchange that can be used with different output devices, operating
environments, and operating systems. RTF uses the ANSI, PC-8, Macintosh, or IBM
PC character set to control the representation and formatting of a document,
both on the screen and in print. With the RTF Specification, documents created
under different operating systems and with different software applications can
be transferred between those operating systems and applications. RTF files
created in Word 6.0 (and later) for the Macintosh and Power Macintosh have a
file type of “RTF.” Software that takes a formatted file and turns it into an
RTF file is called a writer. An RTF writer separates the application's control
information from the actual text and writes a new file containing the text and
the RTF groups associated with that text. Software that translates an RTF file
into a formatted file is called a reader.  Included with the RTF specification
is a sample RTF reader application (see "Appendix A: Sample RTF Reader
Application" beginning on page 2 of this document). It is designed for use with
the specification to assist those users developing their own RTF readers. The
file included with this Application Note, Rtfreadr.exe, contains the sample RTF
reader program itself. This file and its use are described in Appendix A. The
sample RTF reader is not a for-sale product, and Microsoft does not provide
technical or any other type of support for the sample RTF reader code or the RTF
specification.  RTF Version 1.5 has been updated to include all new control
words introduced by Microsoft Word for Windows 95 version 7.0 and Word 97 for
Windows.  



Page 3

RTF SYNTAX An RTF file consists of unformatted text, control words, control
symbols, and groups. For ease of transport, a standard RTF file can consist of
only 7-bit ASCII characters. (Converters that communicate with Microsoft Word
for Windows or Microsoft Word for the Macintosh should expect 8-bit characters.)
There is no set maximum line length for an RTF file.  A control word is a
specially formatted command that RTF uses to mark printer control codes and
information that applications use to manage documents. A control word cannot be
longer than 32 characters. A control word takes the following form:
\LetterSequence<Delimiter> Note that a backslash begins each control word.  The
LetterSequence is made up of lowercase alphabetic characters between "a" and "z"
inclusive. RTF is case sensitive, and all RTF control words must be lowercase.
The delimiter marks the end of an RTF control word, and can be one of the
following:

Any character other than a letter or a digit. In this case, the delimiting
character terminates the control word but is not actually part of the control
word.

〈

A digit or a hyphen (-), which indicates that a numeric parameter follows. The
subsequent digital sequence is then delimited by a space or any character other
than a letter or a digit. The parameter can be a positive or a negative number.
The range of the values for the number is generally –32767 through 32767.
However, Word tends to restrict the range to –31680 through 31680. Word allows
values in the range -2,147,483,648 to 2,147,483,648 for a small number of
keywords (specifically \bin, \revdttm, and some picture properties). An RTF
parser must handle an arbitrary string of digits as a legal value for a keyword.
If a numeric parameter immediately follows the control word, this parameter
becomes part of the control word. The control word is then delimited by a space
or a nonalphabetic or nonnumeric character in the same manner as any other
control word.

〈

A space. In this case, the space is part of the control word.

〈

If a space delimits the control word, the space does not appear in the document.
Any characters following the delimiter, including spaces, will appear in the
document. For this reason, you should use spaces only where necessary; do not
use spaces merely to break up RTF code.  A control symbol consists of a
backslash followed by a single, nonalphabetic character. For example, \~
represents a nonbreaking space. Control symbols take no delimiters.  A group
consists of text and control words or control symbols enclosed in braces ({ }).
The opening brace ({ ) indicates the start of the group and the closing brace (
}) indicates the end of the group. Each group specifies the text affected by the
group and the different attributes of that text. The RTF file can also include
groups for fonts, styles, screen color, pictures, footnotes, comments
(annotations), headers and footers, summary information, fields, and bookmarks,
as well as document-, section-, paragraph-, and character-formatting properties.
If the font, file, style, screen-color, revision mark, and summary-information
groups and document-formatting properties are included, they must precede the
first plain-text character in the document. These groups form the RTF file
header. If the group for fonts is included, it should precede the group for
styles. If any group is not used, it can be omitted. The groups are discussed in
the following sections.  The control properties of certain control words (such
as bold, italic, keep together, and so on) have only two states. When such a
control word has no parameter or has a nonzero parameter, it is assumed that the
control word turns on the property. When such a control word has a parameter of
0 , it is assumed that the control word turns off the property. For example, \b
turns on bold, whereas \b0 turns off bold.  Certain control words, referred to
as destinations, mark the beginning of a collection of related text that could
appear at another position, or destination, within the document. Destinations
may also be text that is used but should not appear within the document at all.
An example of a destination is the \footnote group, where the footnote text
follows the control word. Page breaks cannot occur in destination text.
Destination control words and their following text must be enclosed in braces.
No other control words or text may appear within the destination group.
Destinations added after the RTF Specification published in the March 1987
Microsoft Systems Journal may be preceded by the control symbol \*. This control
symbol 



Page 4

identifies destinations whose related text should be ignored if the RTF reader
does not recognize the destination. (RTF writers should follow the convention of
using this control symbol when adding new destinations or groups.) Destinations
whose related text should be inserted into the document even if the RTF reader
does not recognize the destination should not use \*. All destinations that were
not included in the March 1987 revision of the RTF Specification are shown with
\* as part of the control word.  Formatting specified within a group affects
only the text within that group. Generally, text within a group inherits the
formatting of the text in the preceding group. However, Microsoft
implementations of RTF assume that the footnote, annotation, header, and footer
groups (described later in this chapter) do not inherit the formatting of the
preceding text. Therefore, to ensure that these groups are always formatted
correctly, you should set the formatting within these groups to the default with
the \sectd, \pard, and \plain control words, and then add any desired
formatting.  The control words, control symbols, and braces constitute control
information. All other characters in the file are plain text. Here is an example
of plain text that does not exist within a group:
{\rtf\ansi\deff0{\fonttbl{\f0\froman Tms Rmn;}{\f1\fdecor Symbol;}{\f2\fswiss
Helv;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\
blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\
green255\blue0;\red255\green255\blue255;}{\stylesheet{\fs20
\snext0Normal;}}{\info{\author John Doe}
{\creatim\yr1990\mo7\dy30\hr10\min48}{\version1}{\edmins0}
{\nofpages1}{\nofwords0}{\nofchars0}{\vern8351}}\widoctrl\ftnbj
\sectd\linex0\endnhere \pard\plain \fs20 This is plain text.\par}

The phrase “This is plain text” is not part of a group and is treated as
document text.  As previously mentioned, the backslash (\) and braces ({ }) have
special meaning in RTF. To use these characters as text, precede them with a
backslash, as in \\, \{, and \}.

CONVENTIONS OF AN RTF READER The reader of an RTF stream is concerned with the
following:

Collecting and properly inserting text into the document, as directed by the
current group state.

〈

Acting on control information.

〈

Separating control information from plain text.

〈

Acting on control information is designed to be a relatively simple process.
Some control information simply contributes special characters to the plain text
stream. Other information serves to change the program state, which includes
properties of the document as a whole, or to change any of a collection of group
states, which apply to parts of the document.  As previously mentioned, a group
state can specify the following:

Table-formatting properties, which define the number of cells and dimensions of
a table row.

〈

Section-formatting properties, such as the number of columns.

〈

Paragraph-formatting properties, such as justified or centered.

〈

Character-formatting properties, such as bold or italic.

〈

The destination, or part of the document that the plain text is constructing.

〈

In practice, an RTF reader will evaluate each character it reads in sequence as
follows: 〈

If the character is an opening brace ({), the reader stores its current state on
the stack. If the character is a closing brace (}), the reader retrieves the
current state from the stack.





Page 5

If the character is anything other than an opening brace ({), closing brace (}),
or backslash (\), the reader assumes that the character is plain text and writes
the character to the current destination using the current formatting
properties.

〈

If the character is a backslash (\), the reader collects the control word or
control symbol and its parameter, if any, and looks up the control word or
control symbol in a table that maps control words to actions. It then carries
out the action prescribed in the table. (The possible actions are discussed
below.) The read pointer is left before or after a control-word delimiter, as
appropriate.

〈

If the RTF reader cannot find a particular control word or control symbol in the
look-up table described above, the control word or control symbol should be
ignored. If a control word or control symbol is preceded by an opening brace
({), it is part of a group. The current state should be saved on the stack, but
no state change should occur. When a closing brace (}) is encountered, the
current state should be retrieved from the stack, thereby resetting the current
state. If the \* control symbol precedes a control word, then it defines a
destination group and was itself preceded by an opening brace ({). The RTF
reader should discard all text up to and including the closing brace (}) that
closes this group. All RTF readers must recognize all destinations defined in
the March 1987 RTF Specification. The reader may skip past the group, but it is
not allowed to simply discard the control word. Destinations defined since March
1987 are marked with the \* control symbol.  Note All RTF readers must implement
the \* control symbol so that they can read RTF files written by newer RTF
writers.  For control words or control symbols that the RTF reader can find in
the look-up table, the possible actions are as follows.

The reader inserts into the document the character code or codes described in
the table entry and performs whatever other action the entry specifies. For
example, when Microsoft Word interprets \par, a paragraph mark is inserted in
the document and special code is run to record the paragraph properties
belonging to that paragraph mark.

Insert Special Character and Perform Action

The reader inserts into the document the character code or codes described in
the table entry.

Insert Special Character

The RTF reader changes the property as described in the table entry.  The entry
will specify whether a parameter is required. The "Appendix C: Index of RTF
Control Words" section at the end of this Application Note also specifies which
control words require parameters. If a parameter is needed and not specified,
then a default value will be used. The default value used depends on the control
word. If the control word does not specify a default, then all RTF readers
should assume a default of 0.

Change Formatting Property

The RTF reader changes the destination to the destination described in the table
entry. Destination changes are legal only immediately after an opening brace ({
). (Other restrictions may also apply; for example, footnotes cannot be nested.)
Many destination changes imply that the current property settings will be reset
to their default settings. Examples of control words that change destination are
\footnote, \header, \footer, \pict, \info, \fonttbl, \stylesheet, and \colortbl.
This Application Note identifies all destination control words where they appear
in controlword tables.

Change Destination

Description

Action

FORMAL SYNTAX This Application Note describes RTF using the following syntax,
based on Backus-Naur Form.  Syntax

Meaning 



Item a and/or item b, in any order.

a&b

Item a or item b.

a|b

Item a followed by item b.

ab

Zero or more repetitions of item a.

a*

One or more repetitions of item a.

a+

Item a is optional.

a?

The (terminal) control word a, with a parameter.

a or aN

The (terminal) control word a, without a parameter.

A

A nonterminal.

<text>

A literal.

'c'

Binary data.

#BDATA

Hexadecimal data.

#SDATA

Text (without control words).

#PCDATA

Page 6

CONTENTS OF AN RTF FILE An RTF file has the following syntax: <File>

'{' <header> <document>'}'

This syntax is the standard RTF syntax; any RTF reader must be able to correctly
interpret RTF written to this syntax. It is worth mentioning again that RTF
readers do not have to use all control words, but they must be able to
harmlessly ignore unknown (or unused) control words, and they must correctly
skip over destinations marked with the \* control symbol. There may, however, be
RTF writers that generate RTF that does not conform to this syntax, and as such,
RTF readers should be robust enough to handle some minor variations.
Nonetheless, if an RTF writer generates RTF conforming to this specification,
then any correct RTF reader should be able to interpret it.

Header The header has the following syntax: <header>

\rtf <charset> \deff? <fonttbl> <filetbl>? <colortbl>? <stylesheet>?
<listtables>?  <revtbl>?

Each of the various header tables should appear, if they exist, in the above
order. Document properties can occur before and between the header tables. A
property must be defined before being referenced.  Specifically:

The \deff keyword must precede any text without an explicit reference to a font,
because it specifies the font to use in such cases.

〈

The font table must precede any reference to a font.

〈

The style sheet must occur before any style usage.

〈





Page 7

RTF Version An entire RTF file is considered a group and must be enclosed in
braces. The \rtfN control word must follow the opening brace. The numeric
parameter N identifies the major version of the RTF Specification used. The RTF
standard described in this Application Note, although titled as version 1.5,
continues to correspond syntactically to RTF Specification version 1. Therefore,
the numeric parameter N for the \rtf control word should still be emitted as 1.

Character Set After specifying the RTF version, you must declare the character
set used in this document. The control word for the character set must precede
any plain text or any table control words. The RTF Specification currently
supports the following character sets.

IBM PC code page 850, used by IBM Personal System/2 (not implemented in version
1 of Microsoft Word for OS/2)

\pca

IBM PC code page 437

\pc

Apple Macintosh

\mac

ANSI (the default)

\ansi

Character set

Control word

Unicode RTF Word 97 is a partially Unicode-enabled application. Text is handled
using the 16-bit Unicode character encoding scheme. Expressing this text in RTF
requires a new mechanism, because until this release (version 1.5), RTF has only
handled 7-bit characters directly and 8-bit characters encoded as hexadecimal.
The Unicode mechanism described here can be applied to any RTF destination or
body text.

Control word \ansicpgN

Meaning This keyword represents the ANSI code page which is used to perform the
Unicode to ANSI conversion when writing RTF text. N represents the code page in
decimal.  This is typically set to the default ANSI code page of the run-time
environment (for example \ansicpg1252 for U.S. Windows). The reader can use the
same ANSI code page to convert ANSI text back to Unicode.  This keyword should
be emitted in the RTF header section right after the \ansi, \mac, \pc or \pca
keyword.

\upr

This keyword represents a destination with two embedded destinations, one
represented using Unicode and the other using ANSI. This keyword operates in
conjunction with the \ud keyword to provide backward compatibility. The general
syntax is as follows: {\upr{keyword ansi_text}{\*\ud{keyword Unicode_text}}}

Notice that this keyword-destination does not use the \* keyword; this forces
the old RTF readers to pick up the ANSI representation and discard the Unicode
one.  \ud

This is a destination which is represented in Unicode. The text is represented
using a mixture of ANSI translation and use of \uN keywords to represent
characters which do not have the exact ANSI equivalent.  Microsoft Technical
Support



\uN

Page 8

This keyword represents a single Unicode character which has no equivalent ANSI
representation based on the current ANSI code page. N represents the Unicode
character value expressed as a decimal number.  This keyword is followed
immediately by equivalent character(s) in ANSI representation. In this way, old
readers will ignore the \uN keyword and pick up the ANSI representation
properly. When this keyword is encountered, the reader should ignore the next N
characters, where N corresponds to the last \ucN value encountered.  As with all
RTF keywords, a keyword-terminating space may be present (before the ANSI
characters) which is not counted in the characters to skip. While this is not
likely to occur (or recommended), a \bin keyword, its argument, and the binary
data that follows are considered one character for skipping purposes. If an RTF
scope delimiter character (that is, an opening or closing brace) is encountered
while scanning skippable data, the skippable data is considered to be ended
before the delimiter. This makes it possible for a reader to perform some
rudimentary error recovery. To include an RTF delimiter in skippable data, it
must be represented using the appropriate control symbol (that is, escaped with
a backslash,) as in plain text. Any RTF control word or symbol is considered a
single character for the purposes of counting skippable characters.  An RTF
writer, when it encounters a Unicode character with no corresponding ANSI
character, should output \uN followed by the best ANSI representation it can
manage. Also, if the Unicode character translates into an ANSI character stream
with count of bytes differing from the current Unicode Character Byte Count, it
should emit the \ucN keyword prior to the \uN keyword to notify the reader of
the change.  RTF control words generally accept signed 16-bit numbers as
arguments. For this reason, Unicode values greater than 32767 must be expressed
as negative numbers.

\ucN

This keyword represents the number of bytes corresponding to a given \uN Unicode
character. This keyword may be used at any time, and values are scoped like
character properties. That is, a \ucN keyword applies only to text following the
keyword, and within the same (or deeper) nested braces. On exiting the group,
the previous \uc value is restored. The reader must keep a stack of counts seen
and use the most recent one to skip the appropriate number of characters when it
encounters a \uN keyword. When leaving an RTF group which specified a \uc value,
the reader must revert to the previous value. A default of 1 should be assumed
if no \uc keyword has been seen in the current or outer scopes.

A common practice is to emit no ANSI representation for Unicode characters
within a Unicode destination context (that is, inside a \ud destination.).
Typically, the destination will contain a \uc0 control sequence. There is no
need to reset the count on leaving the \ud destination as the scoping rules will
ensure the previous value is restored.

Document Text Document text should be emitted as ANSI characters. If there are
Unicode characters that do not have corresponding ANSI characters, they should
be output using the \ucN and \uN keywords.  For example, the text LabΓValue
(Unicode characters 0x004c, 0x0061, 0x0062, 0x0393, 0x0056, 0x0061, 0x006c,
0x0075, 0x0065) should be represented as follows (assuming a previous \ucl):
Lab\u915Gvalue

Destination Text Destination text is defined as any text represented in an RTF
destination. A good example is the bookmark name in the \bkmkstart destination.




Page 9

Any destination containing Unicode characters should be emitted as two
destinations within a \upr destination to ensure that old readers can read it
properly and that no Unicode character encoding is lost when read with a new
reader.  For example, a bookmark name LabΓValue (Unicode characters 0x004c,
0x0061, 0x0062, 0x0393, 0x0056, 0x0061, 0x006c, 0x0075, 0x0065) should be
represented as follows: {\upr{\*\bkmkstart LabGValue}{\*\ud{\*\bkmkstart
Lab\u915 Value}}}

The first sub-destination contains only ANSI characters and is the
representation that old readers will see.  The second sub-destination is a \*\ud
destination which contains a second copy of the \bkmkstart destination. This
copy can contain Unicode characters and is the representation that Unicode-aware
readers must pay attention to, ignoring the ANSI-only version.

Font Table The \fonttbl control word introduces the font table group. Unique \fN
control words define each font available in the document, and are used to
reference that font throughout the document. This group has the syntax listed in
the following table.

<data>

<panose>

\fprq

<fprq>

\fcharset

<fcharset>

\fnil | \froman | \fswiss | \fmodern | \fscript | \fdecor | \ftech | \fbidi

<fontfamily>

\f

<fontnum>

<fontnum><fontfamily><fcharset>?<fprq>?<panose>?<nontaggedname>?<fontemb
>?
<codepage>? <fontname><fontaltname>? ';'

<fontinfo>

'{' \fonttbl (<fontinfo> | ('{' <fontinfo> '}'))+ '}'

<fonttbl>

<nontaggedname \*\fname
>

\cpg

<codepage>

'{\*' \fontfile <codepage>? #PCDATA '}'

<fontfname>

\ftnil | \fttruetype

<fonttype>

'{\*' \fontemb <fonttype> <fontfname>? <data>? '}'

<fontemb>

'{\*' \falt #PCDATA '}'

<fontaltname>

#PCDATA

<fontname>

Note for <fontemb> that either <fontfname> or <data> must be present, although
both may be present.  All fonts available to the RTF writer can be included in
the font table, even if the document doesn't use all the fonts.  RTF also
supports font families, so that applications can attempt to intelligently choose
fonts if the exact font is not present on the reading system. RTF uses the
following control words to describe the various font families.

Swiss, proportionally spaced sans serif fonts

\fswiss

Roman, proportionally spaced serif fonts

\froman

Unknown or default fonts (the default)

\fnil

Font family

Control word

Examples

Times New Roman, Palatino Arial





Arabic, Hebrew, or other bidirectional font

\fbidi

Technical, symbol, and mathematical fonts

\ftech

Decorative fonts

\fdecor

Script fonts

\fscript

Fixed-pitch serif and sans serif fonts

\fmodern

Page 10

Courier New, Pica Cursive Old English, ITC Zapf Chancery Symbol Miriam

If an RTF file uses a default font, the default font number is specified with
the \deffN control word, which must precede the font-table group. The RTF writer
supplies the default font number used in the creation of the document as the
numeric argument N. The RTF reader then translates this number through the font
table into the most similar font available on the reader's system.  The
following control words specify the character set, alternative font name, pitch
of a font in the font table, and non-tagged font name.

Used to arbitrate between two fonts when a particular character can exist in
either non-Far East or Far East font. Word 97 emits the \fbiasN keyword only in
the context of bullets or list information (that is, a \listlevel destination).
The default value of 0 for N indicates a non-Far East font. A value of 1
indicates a Far East font.  Additional values may be defined in future releases.

\fbiasN

This is an optional control word in the font table to define the non-tagged font
name. This is the actual name of the font without the tag, used to show which
character set is being used. For example, Arial is a non-tagged font name, and
Arial (Cyrillic) is a tagged font name. This control word is used by WordPad.
Word ignores this control word (and never creates it).

\*\fname

Destination keyword. This destination contains a 10-byte Panose 1 number. Each
byte represents a single font property as described by the Panose 1 standard
specification.

\*\panose

Specifies the pitch of a font in the font table.

\fprqN

Indicates alternate font name to use if the specified font in the font table is
not available. '{\*' \falt <Alternate Font Name>'}'

\falt

Specifies the character set of a font in the font table. Values for N are
defined by Windows header files, and in the file RTFDEFS.H accompanying this
document.

\fcharsetN

Definition

Control word

If \fprq is specified, the N argument can be one of the following values.

2

Variable pitch

1

Fixed pitch

0

Default pitch

Value

Pitch

Font Embedding RTF supports embedded fonts with the \fontemb group located
inside a font definition. An embedded font can be specified by a file name, or
the actual font data may be located inside the group. If a file name is
specified, it is contained in the \fontfile group. The \cpg control word can be
used to specify the character set for the file name.  Microsoft Technical
Support



Page 11

RTF supports TrueType〉 and other embedded fonts. The type of the embedded font
is described by the following control words.

TrueType font

\fttruetype

Unknown or default font type (the default)

\ftnil

Embedded font type

Control word

Code Page Support A font may have a different character set from the character
set of the document. For example, the Symbol font has the same characters in the
same positions both on the Macintosh and in Windows. RTF describes this with the
\cpg control word, which names the character set used by the font. In addition,
file names (used in field instructions and in embedded fonts) may not
necessarily be the same as the character set of the document; the \cpg control
word can change the character set for these file names as well. However, all RTF
documents must still declare a character set (that is, \ansi, \mac, \pc, or
\pca) to maintain backward compatibility with earlier RTF readers.  The table
below describes valid values for \cpg.

Windows 3.1 (Cyrillic)

1251

Windows 3.1 (Eastern European)

1250

Japanese

932

Soviet Union

866

Norwegian

865

Arabic

864

French Canadian

863

Hebrew

862

Portuguese

860

Eastern European

852

IBM multilingual

850

Windows 3.1 (United States and Western Europe)

819

Arabic (transparent ASMO)

720

Arabic (Nafitha Enhanced)

711

Arabic (transparent Arabic)

710

Arabic (ASMO 449+, BCON V4)

709

Arabic (ASMO 708)

708

United States IBM

437

Description

Value

File Table The \filetbl control word introduces the file table destination. The
only time a file table is created in RTF is when the document contains
subdocuments. This group defines the files referenced in the document and has
the following syntax: <filetbl>

'{\*' \filetbl ('{' <fileinfo> '}')+ '}'





#PCDATA

<file name>

\fvalidmac | \fvaliddos | \fvalidntfs | \fvalidhpfs | \fnetwork

<filesource>

\fosnum

<osnum>

\frelative

<relpath>

\fid

<filenum>

\file <filenum><relpath>?<osnum>? <filesource>+ <file name>

<fileinfo>

Page 12

Note that the file name can be any valid alphanumeric string for the named file
system, indicating the complete path and file name.

Network file system. This control word may be used in conjunction with any of
the previous file source control words.

\fnetwork

HPFS file system.

\fvalidhpfs

NTFS file system.

\fvalidntfs

MS-DOS file system.

\fvaliddos

Macintosh file system.

\fvalidmac

Currently only filled in for paths from the Macintosh file system. It is an
operatingsystem-specific number for identifying the file, which may be used to
speed up access to the file, or find it if the file has been moved to another
folder or disk. The Macintosh operating system name for this number is the "file
id." Additional meanings of the \fosnumN control word may be defined for other
file systems in the future.

\fosnumN

The character position within the path (starting at 0) where the referenced
file's path starts to be relative to the path of the owning document. For
example, if a document is saved to the path C:\Private\Resume\File1.doc and its
file table contains the path C:\Private\Resume\Edu\File2.doc, then that entry in
the file table will be \frelative18, to point at the character "e" in "edu".
This allows preservation of relative paths.

\frelativeN

File ID number. Files are referenced later in the document using this number.

\fidN

Marks the beginning of a file group, which lists relevant information about the
referenced file. This is a destination control word.

\file

A list of documents referenced by the current document. The file table has a
structure analogous to the style or font table. This is a destination control
word output as part of the document header.

\filetbl

Definition

Control word

Color Table The \colortbl control word introduces the color table group, which
defines screen colors, character colors, and other color information. This group
has the following syntax: \red ? & \green ? & \blue ? ';'

<colordef>

'{' \colortbl <colordef>+ '}'

<colortbl>

The following are valid control words for this group.  Control word

Meaning 



Blue index

\blueN

Green index

\greenN

Red index

\redN

Page 13

Each definition must be delimited by a semicolon, even if the definition is
omitted. If a color definition is omitted, the RTF reader uses its default
color. The example below defines the default color table used by Word. The first
color is omitted, as shown by the semicolon following the \colortbl control
word. The missing definition indicates that color 0 is the ‘’auto’’ color.
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\
red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0
\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green
0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}

The foreground and background colors use indexes into the color table to define
a color. For more information on color setup, see your Windows documentation.
The following example defines a block of text in color (where supported). Note
that the cf/cb index is the index of an entry in the color table, which
represents a red/green/blue color combination.  {\f1\cb1\cf2 This is colored
text. The background is color 1 and the foreground is color 2.}

If the file is translated for software that does not display color, the reader
ignores the color table group.

Style Sheet The \stylesheet control word introduces the style sheet group, which
contains definitions and descriptions of the various styles used in the
document. All styles in the document's style sheet can be included, even if not
all the styles are used. In RTF, a style is a form of shorthand used to specify
a set of character, paragraph, or section formatting.  The style-sheet group has
the following syntax:

\fn | #PCDATA

<key>

( \shift? & \ctrl? & \alt?) <key>

<keys>

#PCDATA

<stylename>

(<brdrdef> | <parfmt> | <apoctl> | <tabdef> | <shading> | <chrfmt>)+

<formatting>

\shidden

<hidden>

\sautoupd

<autoupd>

\snext

<next>

\sbasedon

<based>

\additive

<additive>

'{' \keycode <keys> '}'

<keycode>

\s |\*\cs | \ds

<styledef>

'{' <styledef>?<keycode>? <formatting> <additive>? <based>? <next>?
<stylename>? ';' '}'

<style>

'{' \stylesheet <style>+ '}'

<stylesheet>





Page 14

For <style>, both <styledef> and <stylename> are optional; the default is
paragraph style 0. Note for <stylename> that Microsoft Word for the Macintosh
interprets commas in #PCDATA as separating style synonyms. Also, for <key>, the
data must be exactly one character.

Specifies a function key where N is the function key number. Used to describe
shortcut-key codes for styles.

\fnN

The CTRL modifier key. Used to describe shortcut-key codes for styles.

\ctrl

The SHIFT modifier key. Used to describe shortcut-key codes for styles.

\shift

The ALT modifier key. Used to describe shortcut-key codes for styles.

\alt

This group is specified within the description of a style in the style sheet in
the RTF header. The syntax for this group is '{\*'\keycode <keys>'}' where
<keys> are the characters used in the key code. For example, a style, Normal,
may be defined {\s0 {\*\keycode \shift\ctrl n}Normal;} within the RTF style
sheet. See the Special Character control words for the characters outside the
alphanumeric range that may be used.

\keycode

Style does not appear in the Styles drop-down list in the Style dialog box1 (on
the Format menu, click Styles).

\shidden

Automatically update styles.

\sautoupd

Defines the next style associated with the current style; if omitted, the next
style is the current style.

\snextN

Defines the number of the style on which the current style is based (the default
is 222—no style).

\sbasedonN

Used in a character style definition ('{\*'\cs_'}'). Indicates that character
style attributes are to be added to the current paragraph style attributes,
rather than setting the paragraph attributes to only those defined in the
character style definition.

\additive

Designates section style.

\dsN

Designates paragraph style.

\sN

Designates character style. Like \s, \cs is not a destination control word.
However, it is important to treat it like one inside the style sheet; that is,
\cs must be prefixed with \* and must appear as the first item inside a group.
Doing so ensures that readers that do not understand character styles will skip
the character style information correctly.  When used in body text to indicate
that a character style has been applied, do not include the \* prefix.

\*\csN

Meaning

Control word

The following is an example of an RTF style sheet {\stylesheet{\fs20
\sbasedon222\snext0{\*\keycode \shift\ctrl n} Normal;}{\s1\qr \fs20
\sbasedon0\snext1 FLUSHRIGHT;}{\s2\fi720\li720\fs20\ri2880\sbasedon0\snext2
IND;}}

and RTF paragraphs to which the styles are applied: \widowctrl\ftnbj\ftnrestart
\sectd \linex0\endnhere \pard\plain \fs20 This is Normal style.  \par
\pard\plain \s1\qr\fs20 This is right justified. I call this style FLUSHRIGHT.
\par \pard\plain \s2\fi-720\li720\fs20\ri2880 This is an indented paragraph. I
call this style IND. It produces

1

The hidden style property can only be accessed using Visual Basic for
Applications.  



Page 15

a hanging indent.  \par}

Some of the control words in this example are discussed in later sections. In
the example, note that the properties of the style were emitted following the
application of the style. This was done for two reasons: (1) to allow RTF
readers that don’t support styles to still retain all formatting; and, (2) to
allow the additive model for styles, where additional property changes are
“added” on top of the defined style. Some RTF readers may not “apply” a style
upon only encountering the style number without the accompanying formatting
information because of this.

List Table Word 97 stores bullets and numbering information very differently
from earlier versions of Word. In Word 6.0, for example, number formatting data
is stored individually with each paragraph. In Word 97, however, all of the
formatting information is stored in a pair of document-wide list tables which
act as a style sheet, and each individual paragraph stores only an index to one
of the tables, like a style index.  There are two list tables in Word: the List
table (destination \listtable), and the List Override table (destination
\listoverridetable).  The first table Word stores is the List table. A List
table is a list of lists (destination \list). Each list contains a number of
list properties that pertain to the entire list, and a list of levels
(destination \listlevel), each of which contains properties that pertain only to
that level.

Top-level List Properties

The argument for \listname is a string that is the name of this list. Names
allow ListNum fields to specify the list they belong to. This is a destination
control word.

\listname

1 if the list restarts at each section; 0 if not. Used for Word 7.0
compatibility only.

\listrestarthdnN

1 if the list has one level; 0 if the list has nine levels

\listsimpleN

Each list should have a unique template ID as well, which also should be
randomly generated. The template ID cannot be -1. The value N is a long integer.

\listtemplateidN

Each list must have a unique list ID that should be randomly generated. The
value N is a long integer. The list ID cannot be between -1 and -5.

\listidN

Meaning

Control word

List Levels Each list consists of either one or nine list levels depending upon
whether the \listsimple flag is set. Each list level contains a number of
properties that specify the formatting for that level, such as the start-at
value, the text string surrounding the number, its justification and indents,
and so on.  Control word \levelstartatN

Meaning N specifies the start-at value for the level





\levelnfcN

Page 16

Specifies the number type for the level:

Bullet (no number at all)

23

Arabic with leading zero (01, 02, 03, ..., 10, 11)

22

Ordinal text number (First, Second, Third)

7

Cardinal text number (One, Two Three)

6

Ordinal number (1st, 2nd, 3rd)

5

Lowercase letter (a, b, c)

4

Uppercase letter (A, B, C)

3

Lowercase Roman numeral (i, ii, iii)

2

Uppercase Roman numeral (I, II, III)

1

Arabic (1, 2, 3)

0

255 No number \leveljcN

0

Left justified Right justified

2

Center justified

1

The argument for this level should be the number format string for this level.
The first character is the length of the string, and any numbers within the
level should be replaced by the index of the level they represent. For example,
a level three number such as “1.1.1.” would generate the following RTF:
“{\leveltext \’06\’00.\’01.\’02.}” where the ’06 is the string length, the \’00,
\’01, and \’02 are the level place holders, and the periods are the surrounding
text.  This is a destination control word.

\leveltext

Minimum distance from the right edge of the number to the start of the paragraph
text (used for Word 7.0 compatibility only). This keyword will only be valid if
the \leveloldN keyword is emitted.

\levelspaceN

Minimum distance from the left indent to the start of the paragraph text (used
for Word 7.0 compatibility only). This keyword will only be valid if the
\leveloldN keyword is emitted.

\levelindentN

1 if this level includes the indentation from the previous level (used for Word
7.0 compatibility only); otherwise, the value is 0 . This keyword will only be
valid if the \leveloldN keyword is emitted.

\levelprevspaceN

1 if this level includes the text from the previous level (used for Word 7.0
compatibility only); otherwise, the value is 0 . This keyword will only be valid
if the \leveloldN keyword is emitted.

\levelprevN

1 if this level was converted from Word 6.0 or 7.0, 0 if it is a native Word 97
level.

\leveloldN





\levelnumbers

Page 17

The argument for this destination should be a string that gives the offsets into
the \leveltext of the level place holders. In the above example, “1.1.1.”, the
\levelnumbers RTF should be {\levelnumbers \’01\’03\’05}

because the level place holders have indices 1, 3, and 5. This is a destination
control word.  \levelfollowN

Specifies which character follows the level text:

Nothing

2

Space

1

Tab

0

1 if this level does not restart its count each time a number of a higher level
is reached, 0 if this level does restart its count each time a number of a
higher level is reached.

\levelnorestartN

1 if any list numbers from previous levels should be converted to arabic
numbers; 0 if they should be left with the format specified by their own level’s
definition.

\levellegalN

In addition to all of these properties, each list level can contain any
character properties (all of which affect all text for that level) and any
combination of three paragraph properties: left indents, first line left
indents, and tabs—each of which must be of a special type: jclisttab. These
paragraph properties will be automatically applied to any paragraph in the list.
List Override Table The List Override table is a list of list overrides
(destination \listoverride). Each list override contains the listid of one of
the lists in the List table, as well as a list of any properties it chooses to
override. Each paragraph will contain a list override index (keyword ls) which
is a 1-based index into this table. Most list overrides don’t override any
properties—instead, they provide a level of indirection to a list. There are
generally two types of list overrides: (1) formatting overrides, which allow a
paragraph to be part of a list and are numbered along with the other members of
the list, but have different formatting properties; and, (2) start-at overrides,
which allow a paragraph to share the formatting properties of a list, but have a
different start-at values. The first element in the document with each list
override index takes the start-at value that the list override specifies as its
value, while each subsequent element is assigned the number succeeding the
previous element of the list.  List overrides have a few top-level keywords,
including a \listoverridecount, which contains a count of the number of levels
whose format is overridden. This \listoverridecount should always be either 1 or
9, depending upon whether the list to be overridden is simple or multilevel. All
of the actual override information is stored within a list of list override
levels (destination \lfolevel).

The (1-based) index of this \listoverride in the \listoverride table. This value
should never be zero inside a \listoverride, and must be unique for all
\listoverrides within a document. The valid values are from 1 to 2000.

\ls

Number of list override levels within this list override (from 0 or 9).

\listoverridecountN

Should exactly match the \listid of one of the lists in the List table. The
value N is a long integer.

\listidN

Meaning

Control word





Page 18

List Override Level Each list override level contains flags to specify whether
the formatting or start-at values are being overridden for each level. If the
format flag (listoverrideformat) is given, the lfolevel should also contain a
list level (listlevel). If the start-at flag (listoverridestart) is given, a
start-at value must be provided. If the start-at is overridden but the format is
not, then a levelstartat should be provided in the lfolevel itself. If both
start-at and format are overridden, put the levelstartat inside the listlevel
contained in the lfolevel.

Number of list override levels within this list override (should be either 1 or
9).

\listoverrideformatN

Should exactly match the listID of one of the lists in the List table. The value
N is a long integer.

\listoverridestartN

Meaning

Control word

Track Changes (Revision Marks) This table allows tracking of multiple authors
and reviewers of a document, and is used in conjunction with the character
properties for tracking changes (using revision marks).

This group consists of subgroups that each identify the author of a revision in
the document, as in {Author1;}. This is a destination control word.

\*\revtbl

Definition

Control word

Revision conflicts, such as one author deleting another's additions, are stored
as one group, in the following form: CurrentAuthor\'00\'<length of previous
author's name>PreviousAuthor\'00 PreviousRevisionTime

The 4 bytes of the Date/Time (DTTM) structure are emitted as ASCII characters,
so values greater than 127 should be emitted as hexadecimal values enclosed in
quotation marks.

All time references for revision marks use the following bit field structure,
DTTM.

Day of week

29–31

Year

20–28

Month

16–19

Day of month

11–15

Hour

6–10

Minute

0–5

Information

Bit numbers

Range 0–59 0–23 1–31 1–12 = Year - 1900 0 (Sun)–6 (Sat)

Document Area Once the RTF header is defined, the RTF reader has enough
information to correctly read the actual document text. The document area has
the following syntax.  <document>

<info>? <docfmt>* <section>+





Page 19

Information Group The \info control word introduces the information group, which
contains information about the document.  This can include the title, author,
keywords, comments, and other information specific to the file. This information
is for use by a document-management utility, if available.  This group has the
following syntax.

\yr? \mo? \dy? \hr? \min? \sec?

<time>

'{' \buptim <time> '}'

<buptim>

'{' \printim <time> '}'

<printim>

'{' \revtim <time> '}'

<revtim>

'{' \creatim <time> '}'

<creatim>

'{' \hlinkbase #PCDATA '}'

<hlinkbase>

'{' \doccomm #PCDATA '}'

<doccomm>

'{' \comment #PCDATA '}'

<comment>

'{' \keywords #PCDATA '}'

<keywords>

{' \category #PCDATA '}'

<category>

'{' \operator #PCDATA '}'

<operator>

{' \company #PCDATA '}'

<company>

{' \manager #PCDATA '}'

<manager>

'{' \author #PCDATA '}'

<author>

'{' \subject #PCDATA '}'

<subject>

'{' \title #PCDATA '}'

<title>

'{' <title>? & <subject>? & <author>? & <manager>? & <company>? <operator>? &
<category>? & <keywords>? & <comment>? & \version? & <doccomm>? & \vern?  &
<creatim>? & <revtim>? & <printim>? & <buptim>? & \edmins? & \nofpages? &
\nofwords? \nofchars? & \id? '}'

<info>

Some applications, such as Word, ask the user to type this information when
saving the document in its native format. If the document is then saved as an
RTF file or translated into RTF, the RTF writer specifies this information using
the following control words. These control words are destinations and both the
control words and the text should be enclosed in braces ({ }).

Comments; text is ignored. This is a destination control word.

\comment

Selected keywords for the document. This is a destination control word.

\keywords

Category of the document. This is a destination control word.

\category

Person who last made changes to the document. This is a destination control
word.

\operator

Company of the author. This is a destination control word

\company

Manager of the author. This is a destination control word.

\manager

Author of the document. This is a destination control word.

\author

Subject of the document. This is a destination control word.

\subject

Title of the document. This is a destination control word.

\title

Meaning

Control word





Page 20

The base address that is used for the path of all relative hyperlinks inserted
in the document. This can be a path or an Internet address (URL).

\hlinkbase

Comments displayed in the Summary Info or Properties dialog box in Word. This is
a destination control word.

\doccomm

Version number of the document.

\versionN

The \userprops control word introduces the user-defined document properties.
Unique \propname control words define each user-defined property in the
document. The group has the following syntax.  ‘{\*’ \userprops (‘{’ <propinfo>
‘}’*) ‘}’

\proptypeN Specifies the type of the property.

\proptype

The name of a bookmark that contains the text to display as the value of the
property.

\linkval

The value of the property.

\staticval

The name of the user-defined property.

\propname

Meaning

Control Word

\linkval

<linkval>

\staticval

<staticval>

\proptype

<proptype>

‘{’ \propname #PCDATA ‘}’

<propname>

<propname><proptype><staticval><linkval>?

\userprops <propinfo>

For \proptype, the N argument can have the following values.

Text

30

Boolean

11

Date

7

Real number

5

Integer

3

Description

Value

The RTF writer may automatically enter other control words, including the
following.

Total editing time (in minutes)

\edminsN

Backup time

\buptim

Last print time

\printim

Revision time

\revtim

Creation time

\creatim

Internal version number

\vernN

Meaning

Control word





Internal ID number

\idN

Number of characters not including spaces

\nofcharsws

Number of characters including spaces

\nofcharsN

Number of words

\nofwordsN

Number of pages

\nofpagesN

Seconds

\secN

Minute

\minN

Hour

\hrN

Day

\dyN

Month

\moN

Year

\yrN

Page 21

Any control word described in the previous table that does not have a numeric
parameter specifies a date; all dates are specified with the \yr \mo \dy \hr
\min \sec controls. An example of an information group follows: {\info{\title
The Panda's Thumb}{\author Stephen J Gould}{\keywords science natural history }}

Document Formatting Properties After the information group (if there are any),
there may be some document formatting control words (described as <docfmt> in
the document area syntax description). These control words specify the
attributes of the document, such as margins and footnote placement. These
attributes must precede the first plain-text character in the document.  The
control words that specify document formatting are listed in the following table
(measurements are in twips; a twip is one-twentieth of a point). For omitted
control words, RTF uses the default values.

Destination. The argument is the name of a related template file; it must be
enclosed in braces. This is a destination control word.

\*\template

Destination. The argument is the name of the file to print or index next; it
must be enclosed in braces. This is a destination control word.

\*\nextfile

Uses fractional character widths when printing (QuickDraw only).

\fracwidth

Beginning line number (the default is 1).

\linestartN

Toggles automatic hyphenation (the default is off). Append 1 or leave control
word by itself to toggle property on; append 0 to turn it off.

\hyphauto

Toggles hyphenation of capitalized words (the default is on). Append 1 or leave
control word by itself to toggle property on; append 0 to turn it off.

\hyphcaps

N is the maximum number of consecutive lines that will be allowed to end in a
hyphen. 0 means no limit.

\hyphconsecN

Hyphenation hot zone in twips (the amount of space at the right margin in which
words are hyphenated).

\hyphhotzN

Default tab width in twips (the default is 720).

\deftabN

Meaning

Control word





Page 22

Default language ID for Asian versions of Word.

\deflangfe

Defines the default language used in the document used with a \plain control
word.  See the section "Character Formatting Properties" on page 34 of this
Application Note for a list of possible values for N.

\deflangN

Document is a boilerplate document. For Word for Windows, this is a template;
for Word for the Macintosh, this is a stationery file.

\doctemp

Prints PostScript over the text.

\psover

Tells the RTF reader that the document should be saved in RTF format.

\defformat

Backup copy is made automatically when the document is saved.

\makebackup

\windowcaption Sets the caption text for the document window. This is a string
value.  \doctypeN

\fromtext

An integer (0-2) that describes the document type for AutoFormat.

E-mail (for formatting e-mail, and used by WordMail)

2

Letter (for formatting letters, and used by Letter Wizard)

1

General Document (for formatting most documents, the default)

0

Indicates document was originally plain text.

Document views and zoom level \viewkindN

An integer (0-5) that represents the view mode of the document.

Online Layout view

5

Normal view

4

Master Document view

3

Outline view

2

Page Layout view

1

None

0

An integer (0 to 2) that represents the zoom kind of the document.

\viewzkN

Zoom level of the document; the N argument is a value representing a percentage
(the default is 100).

\viewscaleN

\private

Best fit

2

Full page

1

None

0

Obsolete destination. It has no leading \*. It should be skipped.





Page 23

Footnotes and Endnotes \fetN

Footnote/endnote type. This indicates what type of notes are present in the
document.

Footnotes and endnotes both.

2

Endnotes only.

1

Footnotes only or nothing at all (the default).

0

For backward compatibility, if \fet1 is emitted, \endnotes or \enddoc will be
emitted along with \aendnotes or \aenddoc. RTF readers that understand \fet will
need to ignore the footnote-positioning control words, and use the endnote
control words instead.

Footnote numbering—Roman lowercase (i, ii, iii, _)

\ftnnrlc

Footnote numbering—Alphabetic uppercase (A, B, C, _)

\ftnnauc

Footnote numbering—Alphabetic lowercase (a, b, c, _)

\ftnnalc

Footnote numbering—Arabic numbering (1, 2, 3, _)

\ftnnar

Continuous endnote numbering (the default).

\aftnrstcont

Restart endnote numbering each section.

\aftnrestart

Continuous footnote numbering (the default).

\ftnrstcont

Footnote numbers restart at each section. Microsoft Word for the Macintosh uses
this control to restart footnote numbering at each page.

\ftnrestart

Restart footnote numbering each page.

\ftnrstpg

Beginning endnote number (the default is 1).

\aftnstartN

Beginning footnote number (the default is 1).

\ftnstartN

Endnotes beneath text (top justified).

\aftntj

Endnotes at bottom of page (bottom justified).

\aftnbj

Endnotes at end of document.

\aenddoc

Endnotes at end of section (the default).

\aendnotes

Footnotes at the bottom of the page (bottom justified).

\ftnbj

Footnotes beneath text (top justified).

\ftntj

Footnotes at the end of the document.

\enddoc

Footnotes at the end of the section (the default).

\endnotes

Text argument is a notice for continued endnotes. This is a destination control
word.

\aftncn

Text argument separates continued endnotes from the document. This is a
destination control word.

\aftnsepc

Text argument separates endnotes from the document. This is a destination
control word.

\aftnsep

Text argument is a notice for continued footnotes. This is a destination control
word.

\ftncn

Text argument separates continued footnotes from the document. This is a
destination control word.

\ftnsepc

Text argument separates footnotes from the document. This is a destination
control word.

\ftnsep





Endnote numbering—Chicago Manual of Style (*, †, ‡, §)

\aftnnchi

Endnote numbering—Roman uppercase (I, II, III, _)

\aftnnruc

Endnote numbering—Roman lowercase (i, ii, iii, _)

\aftnnrlc

Endnote numbering—Alphabetic uppercase (A, B, C, _)

\aftnnauc

Endnote numbering—Alphabetic lowercase (a, b, c, _)

\aftnnalc

Endnote numbering—Arabic numbering (1, 2, 3, _)

\aftnnar

Footnote numbering—Chicago Manual of Style (*, †, ‡, §)

\ftnnchi

Footnote numbering—Roman uppercase (I, II, III, _)

\ftnnruc

Page 24

Page Information

Enable widow and orphan control.

\widowctrl

Beginning page number (the default is 1).

\pgnstartN

Landscape format.

\landscape

Switches margin definitions on left and right pages. Used in conjunction with
\facingp.

\margmirror

Gutter width in twips (the default is 0).

\gutterN

Facing pages (activates odd/even headers and gutters).

\facingp

Bottom margin in twips (the default is 1440).

\margbN

Top margin in twips (the default is 1440).

\margtN

Right margin in twips (the default is 1800).

\margrN

Left margin in twips (the default is 1800).

\marglN

Used to differentiate between paper sizes with identical dimensions under
Windows NT. Values 1–41 correspond to paper sizes defined in DRIVINI.H in the
Windows 3.1 SDK (DMPAPER_ values). Values greater than or equal to 42 correspond
to userdefined forms under Windows NT.

\pszN

Paper height in twips (the default is 15,840).

\paperhN

Paper width in twips (the default is 12,240).

\paperwN

Linked Styles \linkstyles

Update document styles automatically based on template.

Compatibility Options

Combine table borders as done in Word 5.x for the Macintosh. Contradictory table
border information is resolved in favor of the first cell.

\otblrul

Suppress space before paragraph property after hard page or column break.

\sprsspbf

Suppress extra line spacing at top of page. Basically, this means to ignore any
line spacing larger than Auto at the top of a page.

\sprstsp

Treat old-style escaped quotation marks (\") as current style ("") in mail merge
data documents.

\cvmme

Don't balance columns.

\nocolbal

Don't add extra space to line height for showing raised/lowered characters.

\noextrasprl

Print all colors as black.

\prcolbl

Wrap trailing spaces onto the next line.

\wraptrsp

Don't add automatic tab stop for hanging indent.

\notabind





Page 25

Advance to next tab stop like WordPerfect 6.x.

\wptab

Set the width of a space like WordPerfect 5.x.

\wpsp

Do full justification like WordPerfect 6.x for Windows.

\wpjst

Does nothing. This keyword should be ignored.

\sprstsm

Suppress extra line spacing at bottom of page.

\sprsbsp

Lines wrap like Word 6.0.

\oldlinewrap

Don't translate backslash to Yen sign. Option for compatibility with Word 6.0
(Japanese).

\noxlattoyen

Don't underline trailing spaces. Option for compatibility with Word 6.0
(Japanese).

\noultrlspc

Don't add space for underline. Option for compatibility with Word 6.0
(Japanese).

\nospaceforul

No external leading. Option for compatibility with Word for the Macintosh 5.x

\nolead

Small caps like Word for the Macintosh 5.x.

\msmcap

Use printer metrics to lay out document.

\lytprtmet

Don’t center exact line height lines.

\lytexcttp

Expand character spaces on line-ending with SHIFT + RETURN . Option for
compatibility with Word 6.0 (Japanese).

\expshrtn

Don't balance SBCS/DBCS characters. Option for compatibility with Word 6.0
(Japanese).

\dntblnsbdb

Print body before header/footer. Option for compatibility with Word for the
Macintosh 5.x.

\bdbfhdr

Don't add leading (extra space) between rows of text

\truncex

Round down to the nearest font size instead of rounding up.

\truncatefont height

Substitute fonts based on size first.

\subfontby size

Suppress extra line spacing like WordPerfect version 5.x.

\sprslnsp

Show hard (manual) page breaks and column breaks in frames.

\brkfrm

If a paragraph has a left border (not a box) and the Different Odd And Even or
Mirror Margins check box is selected, Word will print the border on the right
for oddnumbered pages.

\ swpbdr

Metafiles are considered transparent; don't blank the area behind metafiles.

\transmf

Forms

This document has print form data only on.

\printdata

This document currently has a forms drop-down box or check box selected.

\formdisp

This document has form field shading on.

\formshade

This document has no unprotected areas.

\allprot

This document is protected for forms.

\formprot

Revision Marks

Turns on revision marking.

\revisions

This document is protected for revisions. The user can edit the document, but
revision marking cannot be disabled.

\revprot





Page 26

Vertical lines mark altered text, based on the argument: 0 for no marking; 1 for
left margin; 2 for right margin; 3 for outside (the default: left on left pages,
right on right pages).

\revbarN

Argument indicates how revised text will be displayed: 0 for no properties
shown; 1 for bold; 2 for italic; 3 for underline (the default); 4 for double
underline.

\revpropN

Comments (Annotations) \annotprot

This document is protected for comments (annotations). The user cannot edit the
document but can insert comments (annotations).

Bidirectional Controls

This document will have English-style pagination (the default).

\ltrdoc

This document will be formatted to have Arabic-style pagination.

\rtldoc

Note that the three document-protection control words (\formprot, \revprot, and
\annotprot) are mutually exclusive; only one of the three can apply to any given
document. Also, there is currently no method for storing passwords in RTF, so
any document that associates a password with a protection level will lose the
password protection in RTF.  For more information about bidirectional controls,
see “Bidirectional Language Support” in this Application Note.  Page Borders

8

\pgbrdroptN

Page border art; the N argument is a value from 1-165 representing the number of
the border.

\brdrartN

Page border right.

\pgbrdrr

Page border left.

\pgbrdrl

Page border bottom.

\pgbrdrb

Page border top.

\pgbrdrt

Page border surrounds footer.

\pgbrdrfoot

Page border surrounds header.

\pgbrdrhead

Page border measure from text. Always display in front option is set to off.

32 Page border measure from edge of page. Always display in front option is set
to on.  40 Page border measure from edge of page. Always display in front option
is set to off.  \pgbrdrsnap

Align paragraph borders and table edges with page border.

The color, width, border style, and border spacing keywords for page borders are
the same as the keywords defined for paragraph borders.

Section Text Each section in the RTF file has the following syntax: <section>

<secfmt>* <hdrftr>? <para>+ (\sect <section>)?





Page 27

Section Formatting Properties At the beginning of each section, there may be
some section-formatting control words (described as <secfmt> in the section text
syntax description). These control words specify section-formatting properties,
which apply to the text following the control word, with the exception of the
section-break control words (those beginning with \sbk). Section-break control
words describe the break preceding the text. These control words can appear
anywhere in the section, not just at the start.  Note that if the \sectd control
word is not present, the current section inherits all section properties defined
in the previous section.  The section-formatting control words are listed in the
following table.

This section is unlocked for forms.

\sectunlocked

Used for multilevel lists. This property sets the default numbering style for
each corresponding \pnlvlN control word (bullets and numbering property for
paragraphs) within that section. This is a destination control word.

\pnseclvlN

Designates section style. If a section style is specified, style properties must
be specified with the section.

\dsN

N is the printer bin used for the pages of the section.

\binsxnN

N is the printer bin used for the first page of the section. If this control is
not defined, then the first page uses the same printer bin as defined by the
\binsxnN control.

\binfsxnN

Endnotes included in the section.

\endnhere

Reset to default section properties.

\sectd

New section.

\sect

Meaning

Control word

Section Break

Section break starts at an odd page.

\sbkodd

Section break starts at an even page.

\sbkeven

Section break starts a new page (the default).

\sbkpage

Section break starts a new column.

\sbkcol

No section break.

\sbknone

Columns

Line between columns.

\linebetcol

Width of column in twips; used to override the default constant width setting
for variable-width columns.

\colwN

Space to right of column in twips; used to specify formatting for variable-width
columns.

\colsrN

Column number to be formatted; used to specify formatting for variable-width
columns.

\colnoN

Space between columns in twips (the default is 720).

\colsxN

Number of columns for "snaking" (the default is 1).

\colsN

Line Numbering \linemodN

Line-number modulus amount to increase each line number (the default is 1).





Page 28

Line numbers continue from the preceding section.

\linecont

Line numbers restart on each page.

\lineppage

Line numbers restart at \linestarts value.

\linerestart

Beginning line number (the default is 1).

\linestartsN

Distance from the line number to the left text margin in twips (the default is
360).  The automatic distance is 0.

\linexN

Page Information

Footer is N twips from the bottom of the page (the default is 720).

\footeryN

Header is N twips from the top of the page (the default is 720).

\headeryN

First page has a special format.

\titlepg

Page orientation is in landscape format. To mix portrait and landscape sections
within a document, the \landscape control should not be used so that the default
for a section is portrait, which may be overridden by the \lndscpsxn control.

\lndscpsxn

Switches margin definitions on left and right pages. Used in conjunction with
\facingp.

\margmirsxn

N is the width of the gutter margin for the section in twips. A \sectd resets
the value to that specified by \gutterN from the document properties. If Facing
Pages is turned off, the gutter will be added to the left margin of all pages.
If Facing Pages is turned on, the gutter will be added to the left side of
odd-numbered pages and the right side of even-numbered pages.

\guttersxnN

N is the bottom margin of the page in twips. A \sectd resets the value to that
specified by \margbN in the document properties.

\margbsxnN

N is the top margin of the page in twips. A \sectd resets the value to that
specified by \margtN in the document properties.

\margtsxnN

N is the right margin of the page in twips. A \sectd resets the value to that
specified by \margrN in the document properties.

\margrsxnN

N is the left margin of the page in twips. A \sectd resets the value to that
specified by \marglN in the document properties.

\marglsxnN

N is the page height in twips. A \sectd resets the value to that specified by
\paperhN in the document properties.

\pghsxnN

N is the page width in twips. A \sectd resets the value to that specified by
\paperwN in the document properties.

\pgwsxnN

Page Numbers

Page-number format is uppercase letter.

\pgnucltr

Page-number format is lowercase roman numeral.

\pgnlcrm

Page-number format is uppercase roman numeral.

\pgnucrm

Page-number format is decimal.

\pgndec

Page number is N twips from the top margin (the default is 720). This control
word is understood but not used by current versions (6.0 or later) of Word.

\pgnyN

Page number is N twips from the right margin (the default is 720). This control
word is understood but not used by current versions (6.0 or later) of Word.

\pgnxN

Page numbers restart at \pgnstarts value.

\pgnrestart

Continuous page numbering (the default).

\pgncont

Beginning page number (the default is 1).

\pgnstartsN





Page 29

En-dash (–) separator character.

\pgnhnsn

Em-dash (—) separator character.

\pgnhnsm

Colon separator character.

\pgnhnsc

Period separator character.

\pgnhnsp

Hyphen separator character. This separator and the successive ones appear
between the heading level number and the page number.

\pgnhnsh

Indicates which heading level is used to prefix a heading number to the page
number. This control word can only be used in conjunction with numbered heading
styles. 0 specifies to not show heading level (the default). Values 1-9
correspond to heading levels 1 through 9.

\pgnhnN

Page-number format is lowercase letter.

\pgnlcltr

Vertical Alignment

Text is justified vertically.

\vertalj

Text is centered vertically.

\vertalc

Text is bottom-aligned.

\vertalb

Text is top-aligned (the default).

\vertalt

Bidirectional Controls

This section will snake (newspaper style) columns from left to right (the
default).

\ltrsect

This section will snake (newspaper style) columns from right to left.

\rtlsect

Text Flow \stextflow

Section property for specifying text flow.

Text flows vertically, non-vertical font

5

Text flows left to right and top to bottom, vertical

4

Text flows right to left and top to bottom

3

Text flows left to right and bottom to top

2

Text flows top to bottom and right to left, vertical

1

Text flows left to right and top to bottom

0

Page Borders

Page border art; the N argument is a value from 1-165 representing the number of
the border.

\brdrartN

Page border right.

\pgbrdrr

Page border left.

\pgbrdrl

Page border bottom.

\pgbrdrb

Page border top.

\pgbrdrt

Page border surrounds footer.

\pgbrdrfoot

Page border surrounds header.

\pgbrdrhead





\pgbrdroptN

8

Page 30

Page border measure from text. Always display in front option is set to off.

32 Page border measure from edge of page. Always display in front option is set
to on.  40 Page border measure from edge of page. Always display in front option
is set to off.  \pgbrdrsnap

Align paragraph borders and table edges with page border.

The color, width, border style, and border spacing keywords for page borders are
the same as the keywords defined for paragraph borders.

Headers and Footers Headers and footers are RTF destinations. Each section in
the document can have its own set of headers and footers. If no headers or
footers are defined for a given section, the headers and footers from the
previous section (if any) are used. Headers and footers have the following
syntax: \header | \footer | \headerl | \headerr | \headerf | \footerl | \footerr
| \footerf

<hdrctl>

'{' <hdrctl> <para>+ '}' <hdrftr>?

<hdrftr>

Note that each separate <hdrftr> group must have a distinct <hdrctl> introducing
it.

Footer on first page only. This is a destination control word.

\footerf

Footer on right pages only. This is a destination control word.

\footerr

Footer on left pages only. This is a destination control word.

\footerl

Header on first page only. This is a destination control word.

\headerf

Header on right pages only. This is a destination control word.

\headerr

Header on left pages only. This is a destination control word.

\headerl

Footer on all pages. This is a destination control word.

\footer

Header on all pages. This is a destination control word.

\header

Meaning

Control word

The \headerl, \headerr, \footerl, and \footerr control words are used in
conjunction with the \facingp control word, and the \headerf and \footerf
control words are used in conjunction with the \titlepg control word. Many RTF
readers will not function correctly if the appropriate document properties are
not set. In particular, if \facingp is not set, then only \header and \footer
should be used; if \facingp is set, then only \headerl, \headerr, \footerl, and
\footerr should be used. Combining both \facingp and \titlepg is allowed.  You
should not use \header to set the headers for both pages when \facingp is set.
You can use \headerf if \titlepg is not set, but no header will appear. For more
information, see "Document Formatting Properties" on page 30 and "Section
Formatting Properties" on page 30 of this Application Note.  If the previous
section had a first page header or footer and had \titlepg set, and the current
section does not, then the previous section's first page header or footer is
disabled. However, it is not destroyed; if subsequent sections have \titlepg
set, then the first page header or footer is restored.

Paragraph Text There are two kinds of paragraphs: plain and table. A table is a
collection of paragraphs, and a table row is a continuous sequence of paragraphs
partitioned into cells. The \intbl paragraph-formatting control word identifies
the paragraph as part of a table. For more information, see "Table Definitions"
on page 30 of this 



Page 31

Application Note. This control is inherited between paragraphs that do not have
paragraph properties reset with \pard.

<textpar>+ \cell

<cell>

<tbldef> <cell>+ \row

<row>

<pn>? <brdrdef>? <parfmt>* <apoctl>* <tabdef>? <shading>? (\subdocument |
<char>+) (\par <para>)?

<textpar>

<textpar> | <row>

<para>

Paragraph Formatting Properties These control words (described as <parfmt> in
the paragraph-text syntax description) specify generic paragraph formatting
properties. These control words can appear anywhere in the body of the
paragraph, not just at the beginning.  Note that if the \pard control word is
not present, the current paragraph inherits all paragraph properties defined in
the previous paragraph.  The paragraph-formatting control words are listed in
the following table.

Side-by-side paragraphs.

\sbys

Break page before the paragraph.

\pagebb

Outline level of paragraph. The N argument is a value from 0-8 representing the
outline level of the paragraph. In the default case, no outline level is
specified (same as body text).

\outlinelevelN

No line numbering.

\noline

N is the outline level of the paragraph.

\levelN

Keep paragraph with the next paragraph.

\keepn

Widow/orphan control is used for the current paragraph. This is a paragraph
property used to override the absence of the document-level \widowctrl

\widctlpar

No widow/orphan control. This is a paragraph-level property and is used to
override the document-level \widowctrl.

\nowidctlpar

Keep paragraph intact.

\keep

Paragraph is part of a table.

\intbl

Toggles automatic hyphenation for the paragraph. Append 1 or nothing to toggle
property on; append 0 to turn it off.

\hyphpar

Designates paragraph style. If a paragraph style is specified, style properties
must be specified with the paragraph. N references an entry in the stylesheet.

\sN

Resets to default paragraph properties.

\ pard

New paragraph.

\par

Meaning

Control word

Alignment

Centered.

\qc

Justified.

\qj

Right-aligned.

\qr

Left-aligned (the default).

\ql





Page 32

Indentation

Right indent (the default is 0).

\riN

Left indent (the default is 0).

\liN

First-line indent (the default is 0).

\fiN

Spacing

Line spacing multiple. Indicates that the current line spacing is a multiple of
"Single" line spacing. This control word can follow only the \sl control word
and works in conjunction with it.

\slmultN

Space between lines. If this control word is missing or if \sl1000 is used, the
line spacing is automatically determined by the tallest character in the line;
if N is a positive value, this size is used only if it is taller than the
tallest character (otherwise, the tallest character is used); if N is a negative
value, the absolute value of N is used, even if it is shorter than the tallest
character.

\slN

Space after (the default is 0).

\saN

Space before (the default is 0).

\sbN

Multiple line spacing, relative to "Single."

1

"At Least" or "Exactly" line spacing.

0

Subdocuments \subdocumentN

This indicates that a subdocument in a master document/subdocument relationship
should occur here. N represents an index into the file table. This control word
must be the only item in a paragraph.

Bidirectional Controls

Text in this paragraph will be displayed with left-to-right precedence (the
default).

\ltrpar

Text in this paragraph will be displayed with right-to-left precedence.

\rtlpar

Tabs Any paragraph may have its own set of tabs. Tabs must follow this syntax:

Leader dots.

\tldot

Bar tab position in twips from the left margin.

\tbN

Decimal tab.

\tqdec

Centered tab.

\tqc

Flush-right tab.

\tqr

Tab position in twips from the left margin.

\txN

Meaning

Control word

\tldot | \tlhyph | \tlul | \tlth | \tleq

<tablead>

\tqr | \tqc | \tqdec

<tabkind>

<tablead>? \tb

<bartab>

<tabkind>? <tablead>? \tx

<tab>

(<tab> | <bartab>) +

<tabdef>





Leader equal sign.

\tleq

Leader thick line.

\tlth

Leader underline.

\tlul

Leader hyphens.

\tlhyph

Page 33

Bullets and Numbering Word 6.0/95 RTF To provide compatibility with existing RTF
readers, all applications that can automatically format paragraphs with bullets
or numbers will also emit the generated text as plain text in the \pntext group.
This will allow existing RTF readers to capture the plain text and safely ignore
the autonumber instructions. This group precedes all bulleted or numbered
paragraphs, and will contain all the text and formatting that would be
auto-generated. It should precede the '{'\*\pn _ '}' destination, and it is the
responsibility of RTF readers that understand the '{'\*\pn _ '}' destination to
ignore the \pntext group.

'{' \pntxta #PCDATA'}'

<pntxta>

'{' \pntxtb #PCDATA'}'

<pntxtb>

\pnqc | \pnql | \pnqr

<pnjust>

\pnnumonce? & \pnacross? & \pnindent? & \pnsp? & \pnprev? & <pnjust>? &
\pnstart? & \pnhang? & \pnrestart?

<pnfmt>

\pnul | \pnuld | \pnuldb | \pnulnone | \pnulw

<pnul>

\pnf? & \pnfs? & \pnb? & \pni? & \pncaps? & \pnscaps? & <pnul>? & \pnstrike? &
\pncf?

<pnchrfmt>

\pncard | \pndec | \pnucltr | \pnucrm | \pnlcltr | \pnlcrm | \pnord | \pnordt

<pnnstyle>

<pnnstyle> & <pnchrfmt> & <pntxtb> & <pntxta> & <pnfmt>

<pndesc>

\pnlvl | \pnlvlblt | \pnlvlbody | \pnlvlcont

<pnlevel>

'{\*' \pn <pnlevel> <pndesc>'}'

<pnprops>

'{' \pntext <char> '}'

<pntext>

<pntext> <pnprops>

<pnpara>

'{\*' \pnseclvl <pndesc>'}'

<pnseclvl>

<pnseclvl> | <pnpara>

<pn>

Settings below marked with an asterisk can be turned off by appending 0 to the
control word.

Simple paragraph numbering (corresponds to level 10).

\pnlvlbody

Bulleted paragraph (corresponds to level 11). The actual character used for the
bullet is stored in the \pntxtb group.

\pnlvlblt

Paragraph level, where N is a level from 1 to 9. Default set by \pnseclvlN
section formatting property.

\pnlvlN

Turns on paragraph numbering. This is a destination control word.

\pn

This group precedes all numbered/bulleted paragraphs, and contains all
autogenerated text and formatting. It should precede the '{\*'\pn _ '}'
destination, and it is the responsibility of RTF readers that understand the
'{\*'\pn _ '}' destination to ignore this preceding group. This is a destination
control word.

\pntext

Definition

Control word





Page 34

Text before. This group contains the text that precedes the number. This is a
destination control word.

\pntxtb

Text after. This group contains the text that succeeds the number. This is a
destination control word.

\pntxta

Start at number.

\pnstartN

Right-justified numbering.

\pnqr

Left-justified numbering.

\pnql

Centered numbering.

\pnqc

Used for multilevel lists. Include information from previous level in this
level; for example, 1, 1.1, 1.1.1, 1.1.1.1

\pnprev

Distance from number text to body text.

\pnspN

Minimum distance from margin to body text.

\pnindentN

Font size (in half-points).

\pnfsN

Font number.

\pnfN

Foreground color—index into color table (the default is 0).

\pncfN

Strikethrough numbering.*

\pnstrike

Word underline.

\pnulw

Turns off underlining.

\pnulnone

Double underline.

\pnuldb

Dotted underline.

\pnuld

Continuous underline.*

\pnul

Small Caps numbering.*

\pnscaps

All Caps numbering.*

\pncaps

Italic numbering.*

\pni

Bold numbering.*

\pnb

Ordinal text numbering (First, Second, Third).

\pnordt

Ordinal numbering (1st, 2nd, 3rd).

\pnord

Lowercase roman numbering. (i, ii, iii).

\pnlcrm

Lowercase alphabetic numbering (a, b, c).

\pnlcltr

Uppercase roman numbering (I, II, III).

\pnucrm

Uppercase alphabetic numbering (A, B, C).

\pnucltr

Decimal numbering (1, 2, 3).

\pndec

Cardinal numbering (One, Two, Three).

\pncard

Restart numbering after each section break. Note that this control word is used
only in conjunction with the Heading Numbering feature (applying multilevel
numbering to Heading style definitions).

\pnrestart

Paragraph uses a hanging indent.

\pnhang

Number across rows (the default is to number down columns).

\pnacross

Number each cell only once in a table (the default is to number each paragraph
in a table).

\pnnumonce

Continue numbering but do not display number (“skip numbering”).

\pnlvlcont





Page 35

Note that there is a limit of 32 characters total for the sum of text before and
text after for simple numbering. Multilevel numbering has a limit of 64
characters total for the sum of all levels.  Word 97 RTF Each paragraph that is
part of a list must contain some keyword to indicate which list it’s in, and
which level of the list it belongs to. Word 97 also provides the flat text
representation of each number (in the \listtext destination); so, RTF readers
that don’t understand Word 97 numbering will get the paragraph number, along
with appropriate character properties, inserted into their document at the
beginning of the paragraph. Any RTF reader that does understand Word 97
numbering should ignore the entire \listtext destination.

Contains the flat text representation of the number, including character
properties.  Should be ignored by any reader that understands Word 97 numbering.
This is a destination control word.

\listtext

The 0-based level of the list to which the paragraph belongs. For all simple
lists, this should always be 0 . For multilevel lists, it can be 0-8.

\ilvl

Should exactly match the ls for one of the list overrides in the List Override
table.

\ls

Meaning

Control word

REVISION MARKS FOR PARAGRAPH NUMBERS Paragraph numbers and ListNum fields track
revision information with special properties applied to the paragraph mark and
ListNum field, respectively. The special properties hold the "old" value of the
number—the value it held when revision-mark tracking began. At display time,
Word checks the number's current value and compares it with this "old" value to
tell if it has changed. If the numbers are different, the old value shows up as
deleted and the new value as inserted; if the numbers are the same, Word
displays the new value normally, with no revision information. If there was no
old value, the new value shows up as inserted. The following table lists the RTF
specifications for these special properties.  Track Changes (Revision mark)
properties for paragraph numbers \pnrauthN

Index into the revision table. The content of the Nth group in the revision
table is considered to be the author of that revision.  Note This keyword is
used to indicate paragraph number revisions.

The keywords \pnrxst, \pnrrgb, \pnrpnbr, and \pnrnfc describe the "deleted
number" text for the paragraph number. Their values are binary. Each of these
keywords is represented as an array. The deleted number is written out with a
\pnrstart keyword, followed by the array’s keyword, followed by the first byte
of the array, followed by the array’s keyword, followed by the second byte of
the array’s keyword, followed by the array’s keyword, followed by the third byte
of the array’s keyword, and so on. This sequence is followed by the \pnrstop
keyword.

\pnrxstN

Indicates if the paragraph number for the current paragraph is marked as
"inserted."

\pnrnot

Time of the revision. The 32-bit DTTM structure is emitted as a long integer.

\pnrdateN

\pnrxst is a 32-item Unicode character array (double bytes for each character)
with a length byte as the first number—it has the actual text of the number,
with "level" place holders written out as digits from 0-8.  Nine-item array
containing the number format codes of each level (using the same values as the
\levelnfc keyword). The number format code is represented as a short integer.

\pnrnfcN

Nine-item array of indices of the level place holders in the \pnrxst array.

\pnrrgbN





Page 36

The \pnrxst, \pnrrgb, \pnrpnbr, and \pnrnfc arrays are each terminated by the
\pnrstop keyword, whose argument is the number of bytes written out in the
array.

\pnrstopN

The \pnrxst, \pnrrgb, \pnrpnbr, and \pnrnfc arrays are each preceded by the
\pnrstart keyword, whose argument is 0-3 depending on the array.

\pnrstartN

Nine-item array of the actual values of the number in each level. The number is
represented as a long integer

\pnrpnbrN

Example: Let’s take an example of the number "3-4b." which represents the third
level of the list. The following table lists the values of each array.

\'03\'04\'02

Pnrpnbr

\'00\'00\'04

Pnrnfc

The level place holders are at indices 1, 3, and 4 in the string.

\'01\'03\'04

Pnrrgb

The length of the string is 5. Then, first level (level 0), followed by a dash,
followed by the second and third levels (levels 1 and 2), followed by a period.

\'05\'00\'01\'02

pnrxst

Binary

Array

Comment

The nfc values are Arabic (0), Arabic (0), and lowercase letter (4).  The
numbers or 3, 4, and 2 (b)

Here is the RTF for this number: \pnrstart0
\pnrxst0\pnrxst5\pnrxst0\pnrxst1\pnrxst0\pnrxst45\pnrxst0\pnrxst2\pnrxst0\pnrxst3\pnrxst0\pnrxst4
6 \pnrstop12

\pnrstart1 \pnrrgb1\pnrrgb3\pnrrgb4 \pnrrgb0\pnrrgb0\pnrrgb0
\pnrrgb0\pnrrgb0\pnrrgb0 \pnrstop9

\pnrstart2 \pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc4
\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0
\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0\pnrnfc0 \pnrstop18

\pnrstart3 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr3
\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr4 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr2
\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0
\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0
\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 



Page 37

\pnrpnbr0\pnrpnbr0\pnrpnbr0\pnrpnbr0 \pnrstop36

Control word

Meaning

Track Changes (Revision mark) properties for ListNum fields \dfrauthN

Index into the revision table. The content of the Nth group in the revision
table is considered the author of that revision.  Note This keyword is used to
indicate the deleted value of a ListNum field.

The \dfrxst array is terminated by the \dfrstop keyword.

\dfrstop

The \dfrxst array is preceded by the \dfrstart keyword.

\dfrstart

Unicode character array with a length byte.

\dfrxst

Time of the revision. The 32-bit DTTM structure is emitted as a long integer.

\dfrdateN

Example: Let’s take the sample example from above. The deleted value is "3-4b."
The RTF would then be
\dfrstart0\dfrxst0\dfrxst5\dfrxst0\dfrxst51\dfrxst0\dfrxst45\dfrxst0\dfrxst52
\dfrxst0\dfrxst66\dfrxst0\dfrxst46\dfrstop10

where 5 is the length byte, 51 is Unicode for "3", 45 is Unicode for "-", 52 is
Unicode for "4", and so on.

Paragraph Borders Paragraph borders have the following syntax:

Single-thickness border.

\brdrs

Border around the paragraph (box paragraph).

\box

Border outside (right side of odd-numbered pages, left side of even-numbered
pages).

\brdrbar

Consecutive paragraphs with identical border formatting are considered part of a
single group with the border information applying to the entire group. To have
borders around individual paragraphs within the group, the \brdrbtw control must
be specified for that paragraph.

\brdrbtw

Border right.

\brdrr

Border left.

\brdrl

Border bottom.

\brdrb

Border top.

\brdrt

Meaning

Control word

\brdrs | \brdrth | \brdrsh | \brdrdb | \brdrdot | \brdrdash | \brdrhair

<brdrk>

<brdrk> \brdrw? \brsp? \brdrcf?

<brdr>

\brdrt | \brdrb | \brdrl | \brdrr | \brdrbtw | \brdrbar | \box

<brdrseg>

(<brdrseg> <brdr> )+

<brdrdef>





Page 38

Space in twips between borders and the paragraph.

\brspN

N is the color of the paragraph border, specified as an index into the color
table in the RTF header.

\brdrcfN

N is the width in twips of the pen used to draw the paragraph border line. N
cannot be greater than 75. To obtain a larger border width, the \brdth control
word can be used to obtain a width double that of N.

\brdrwN

Engrave border.

\brdrengrave

Emboss border.

\brdremboss

Striped border.

\brdrdashdotstr

Double wavy border.

\brdrwavydb

Wavy border.

\brdrwavy

Thin thick thin border (large).

\brdrtnthtnlg

Thin thick border (large).

\brdrthtnlg

Thick thin border (large).

\brdrtnthlg

Thin thick thin border (medium).

\brdrtnthtnmg

Thin thick border (medium).

\brdrthtnmg

Thick thin border (medium).

\brdrtnthmg

Thin thick thin border (small).

\brdrtnthtnsg

Thin thick border (small).

\brdrthtnsg

Thick thin border (small).

\brdrtnthsg

Triple border.

\brdrtriple

Dot dot dash border.

\brdrdashdd

Dot dash border.

\brdrdashd

Dash border (small).

\brdrdashsm

Hairline border.

\brdrhair

Dashed border.

\brdrdash

Dotted border.

\brdrdot

Double border.

\brdrdb

Shadowed border.

\brdrsh

Double-thickness border.

\brdrth

Paragraph Shading Paragraph shading has the following syntax:

N is the shading of the paragraph in hundredths of a percent.

\shadingN

Meaning

Control word

\bghoriz | \bgvert | \bgfdiag | \bgbdiag | \bgcross | \bgdcross | \bgdkhoriz |
\bgdkvert | \bgdkfdiag | \bgdkbdiag | \bgdkcross | \bgdkdcross

<pat>

(\shading | <pat>) \cfpat? \cbpat?

<shading>





Page 39

N is the background color of the background pattern, specified as an index into
the document's color table.

\cbpatN

N is the fill color, specified as an index into the document's color table.

\cfpatN

Specifies a dark diagonal cross background pattern for the paragraph.

\bgdkdcross

Specifies a dark cross background pattern for the paragraph.

\bgdkcross

Specifies a dark backward diagonal background pattern for the paragraph (////).

\bgdkbdiag

Specifies a dark forward diagonal background pattern for the paragraph (\\\\).

\bgdkfdiag

Specifies a dark vertical background pattern for the paragraph.

\bgdkvert

Specifies a dark horizontal background pattern for the paragraph.

\bgdkhoriz

Specifies a diagonal cross background pattern for the paragraph.

\bgdcross

Specifies a cross background pattern for the paragraph.

\bgcross

Specifies a backward diagonal background pattern for the paragraph (////).

\bgbdiag

Specifies a forward diagonal background pattern for the paragraph (\\\\).

\bgfdiag

Specifies a vertical background pattern for the paragraph.

\bgvert

Specifies a horizontal background pattern for the paragraph.

\bghoriz

Positioned Objects and Frames The following paragraph-formatting control words
specify the location of a paragraph on the page.  Consecutive paragraphs with
the same frame formatting are considered part of the same frame. For two framed
paragraphs to appear at the same position on a page, they must be separated by a
paragraph with different or no frame information.  Note that if any paragraph in
a table row has any of these control words specified, then all paragraphs in the
table row must have the same control words specified, either by inheriting the
properties from the previous paragraph or by re-specifying the controls.
Paragraph positioning has the following syntax:

N is the width of the frame in twips.

\abswN

Meaning

Control word

\posy? | \posnegy? | \posyt? | \posyil? | \posyb? | \posyc? & \abslock

<vdist>

\pvmrg? | \pvpg? | \pvpara?

<vframe>

\posx? | \posnegx? | \posxc? | \posxi? | \posxo? | \posxl? | \posxr?

<hdist>

\phmrg? | \phpg? | \phcol?

<hframe>

\dropcapli? & \dropcapt?

<dropcap>

\nowrap? & \dxfrtext? & \dfrmtxtx? &\dfrmtxty?

<txtwrap>

<vframe> & <vdist>

<vertpos>

<hframe> & <hdist>

<horzpos>

\absw? & \absh?

<framesize>

<framesize> & <horzpos> & <vertpos> & <txtwrap> & <dropcap>

<apoctl>





\abshN

Page 40

N is the height of the frame in twips. A positive number indicates the minimum
height of the frame and a negative number indicates the exact height of the
frame.  A value of zero indicates that the height of the frame adjusts to the
contents of the frame. This is the default for frames where no height is given.

Horizontal Position

Positions the paragraph to the left within the reference frame. This is the
default if no horizontal positioning information is given.

\posxl

Positions the paragraph to the right within the reference frame.

\posxr

Positions the paragraph horizontally outside the reference frame.

\posxo

Positions the paragraph horizontally inside the reference frame.

\posxi

Centers the frame horizontally within the reference frame.

\posxc

Same as \posx but allows arbitrary negative values.

\posnegxN

Positions the frame N twips from the left edge of the reference frame.

\posxN

Use the column as the horizontal reference frame. This is the default if no
horizontal reference frame is given.

\phcol

Use the page as the horizontal reference frame.

\phpg

Use the margin as the horizontal reference frame.

\phmrg

Vertical Position

Locks a frame anchor to the current paragraph that it is associated with.

\abslock

Positions the paragraph at the bottom of the reference frame.

\posyb

Centers the paragraph vertically within the reference frame.

\posyc

Positions the paragraph at the top of the reference frame.

\posyt

Positions the paragraph vertically to be in-line.

\posyil

Same as \posy but allows arbitrary negative values.

\posnegyN

Positions the paragraph N twips from the top edge of the reference frame.

\posyN

Positions the reference frame vertically relative to the top of the top left
corner of the next unframed paragraph in the RTF stream.

\pvpara

Positions the reference frame vertically relative to the page.

\pvpg

Positions the reference frame vertically relative to the margin. This is the
default if no vertical frame positioning information is given.

\pvmrg

Text Wrapping

Positions the paragraph vertically outside the reference frame.

\posyout

Positions the paragraph vertically inside the reference frame.

\posyin

Text flows underneath frame.

\overlay

N is the vertical distance in twips from text on both sides of the frame.

\dfrmtxtyN

N is the horizontal distance in twips from text on both sides of the frame.

\dfrmtxtxN

Distance in twips of a positioned paragraph from text in the main text flow in
all directions.

\dxfrtextN

Prevents text from flowing around the positioned object.

\nowrap





Page 41

Drop Caps

Type of drop cap:

\dropcaptN

Number of lines drop cap is to occupy. The range is 1 through 10.

\dropcapliN

Margin drop cap

2

In-text drop cap

1

The following is an example of absolute-positioned text in a document: \par
\pard \pvpg\phpg\posxc\posyt\absw5040\dxfrtest173 First APO para \par \pard
\phmrg\posxo\posyc\dxfrtext1152 Second APO para

Table Definitions There is no RTF table group; instead, tables are specified as
paragraph properties. A table is represented as a sequence of table rows. A
table row is a continuous sequence of paragraphs partitioned into cells. The
table row begins with the \trowd control word and ends with the \row control
word. Every paragraph that is contained in a table row must have the \intbl
control word specified or inherited from the previous paragraph. A cell may have
more than one paragraph in it; the cell is terminated by a cell mark (the \cell
control word), and the row is terminated by a row mark (the \row control word).
Table rows can also be positioned. In this case, every paragraph in a table row
must have the same positioning controls (see the <apoctl> controls on page 29 of
this Application Note). Table properties may be inherited from the previous row;
therefore, a series of table rows may be introduced by a single <tbldef>.  An
RTF table row has the following syntax, as shown in the general paragraph-text
syntax shown on page 23 of this Application Note.  <textpar>+ \cell

<cell>

<tbldef> <cell>+ \row

<row>

A table definition has the following syntax:

\clbrdrr <brdr>

<cellright>

\clbrdrb <brdr>

<cellbot>

\clbrdrl <brdr>

<cellleft>

\clbrdrt <brdr>

<celltop>

(\clmgf? & \clmrg? <celltop>? & <cellleft>? & <cellbot>? & <cellright>? &
<cellshad>?) \cellx

<celldef>

\trbrdrv <brdr>

<rowvert>

\trbrdrh <brdr>

<rowhor>

\trbrdrr <brdr>

<rowright>

\trbrdrb <brdr>

<rowleft>

\trbrdrl <brdr>

<rowbot>

\trbrdrt <brdr>

<rowtop>

\ltrrow | \rtlrow

<rowwrite>

\trql | \trqr | \trqc

<rowjust>

\trowd \trgaph <rowjust>? & <rowwrite>? <rowtop>? & <rowbot>? & <rowleft>? &
<rowright>? & <rowhor>? & <rowvert>? & \trleft? & \trrh? \trhdr? & \trkeep?
<celldef>+

<tbldef>





\clbghoriz | \clbgvert | \clbgfdiag | \clbgbdiag | \clbgcross | \clbgdcross |
\clbgdkhor | \clbgdkvert | \clbgdkfdiag | \clbgdkbdiag | \clbgdkcross |
\clbgdkdcross

<cellpat>

<cellpat>? \clcfpat? & \clcbpat? & \clshdng

<cellshad>

Page 42

Note for <tbldef> that the number of \cellxs must match the number of \cells in
the \row.  The following control words further define options for each row of
the table.

Contents of the table cell are merged with those of the preceding cell.

\clmrg

The first cell in a range of table cells to be merged.

\clmgf

Defines the right boundary of a table cell, including its half of the space
between cells.

\cellxN

Half the space between the cells of a table row in twips.

\trgaphN

Sets table cell defaults.

\tcelld

Sets table row defaults.

\trowd

Meaning

Control word

Row Formatting

Table row keep together. This row cannot be split by a page break. This property
is assumed to be off unless the control word is present.

\trkeep

Table row header. This row should appear at the top of every page the current
table appears on.

\trhdr

Height of a table row in twips. When 0, the height is sufficient for all the
text in the line; when positive, the height is guaranteed to be at least the
specified height; when negative, the absolute value of the height is used,
regardless of the height of the text in the line.

\trrhN

Position of the leftmost edge of the table with respect to the left edge of its
column.

\trleftN

Centers a table row with respect to its containing column.

\trqc

Right-justifies a table row with respect to its containing column.

\trqr

Left-justifies a table row with respect to its containing column.

\trql

Bidirectional Controls

Cells in this table row will have left-to-right precedence (the default).

\ltrrow

Cells in this table row will have right-to-left precedence.

\rtlrow

Row Borders

Table row border vertical (inside).

\trbrdrv

Table row border horizontal (inside).

\trbrdrh

Table row border right.

\trbrdrr

Table row border bottom.

\trbrdrb

Table row border left.

\trbrdrl

Table row border top.

\trbrdrt





Page 43

Cell Borders

Right table cell border.

\clbrdrr

Left table cell border.

\clbrdrl

Top table cell border.

\clbrdrt

Bottom table cell border.

\clbrdrb

Cell Shading and Background Pattern

N is the background color of the background pattern.

\clcbpatN

N is the line color of the background pattern.

\clcfpatN

Specifies a dark diagonal cross background pattern for the cell.

\clbgdkdcross

Specifies a dark cross background pattern for the cell.

\clbgdkcross

Specifies a dark backward diagonal background pattern for the cell (////).

\clbgdkbdiag

Specifies a dark forward diagonal background pattern for the cell (\\\\).

\clbgdkfdiag

Specifies a dark vertical background pattern for the cell.

\clbgdkvert

Specifies a dark horizontal background pattern for the cell.

\clbgdkhor

Specifies a diagonal cross background pattern for the cell.

\clbgdcross

Specifies a cross background pattern for the cell.

\clbgcross

Specifies a backward diagonal background pattern for the cell (////).

\clbgbdiag

Specifies a forward diagonal background pattern for the cell (\\\\).

\clbgfdiag

Specifies a vertical background pattern for the cell.

\clbgvert

Specifies a horizontal background pattern for the cell.

\clbghoriz

N is the shading of a table cell in hundredths of a percent. This control should
be included in RTF along with cell border information.

\clshdngN

Vertical Text Alignment

Vertical text aligned right (direction top down).

\cltxtbrl

Vertical text aligned left (direction bottom up).

\cltxlrtb

Text is bottom-aligned in cell.

\clvertalb

Text is centered vertically in cell.

\clvertalc

Text is top-aligned in cell (the default).

\clvertalt

The following is an example of table text: \par \trowd
\trqc\trgaph108\trrh280\trleft36 \clbrdrt\brdrth \clbrdrl\brdrth \clbrdrb\brdrdb
\clbrdrr\brdrdb \cellx3636\clbrdrt\brdrth \clbrdrl\brdrdb \clbrdrb\brdrdb
\clbrdrr\brdrdb \cellx7236\clbrdrt\brdrth \clbrdrl\brdrdb \clbrdrb\brdrdb
\clbrdrr\brdrdb \cellx10836\pard \intbl \cell \pard \intbl \cell \pard \intbl
\cell \pard \intbl \row \trowd \trqc\trgaph108\trrh280\trleft36 \clbrdrt\brdrdb
\clbrdrl\brdrth \clbrdrb \brdrsh\brdrs \clbrdrr\brdrdb Microsoft Technical
Support



Page 44

\cellx3636\clbrdrt\brdrdb \clbrdr \brdrdb \clbrdrb\brdrsh\brdrs \clbrdrr\brdrdb
\cellx7236\clbrdrt\brdrdb \clbrdr \brdrdb \clbrdrb\brdrsh\brdrs \clbrdrr\brdrdb
\cellx10836\pard \intbl \cell \pard \intbl \cell \pard \intbl \cell \pard \intbl
\row \pard

Character Text Character text has the following syntax:

#PCDATA | <spec> | <pict> | <obj> | <do> | <foot> | <annot> | <field> | <idx> |
<toc> | <book>

<data>

(<chrfmt>* <data>+ )+

<ptext>

<ptext> | <atext> | '{' <char> '}'

<char>

Font (character) Formatting Properties These control words (described as
<chrfmt> in the syntax description) change font (character) formatting
properties. A control word preceding plain text turns on the specified
attribute. Some control words (indicated in the following table by an asterisk
following the description) can be turned off by the control word followed by 0 .
For example, \b turns on bold, while \b0 turns off bold.  The font
(character)-formatting control words are listed in the following table.

Animated text properties.

\animtextN

Reset font (character) formatting properties to a default value defined by the
application (for example, bold, underline and italic are disabled; font size is
reset to 12 pt). The associated font (character) formatting properties
(described in the section "Associated Font (character) Properties" on page 37 of
this Application Note) are also reset.

\plain

Meaning

Control word

Shimmer

6

Marching red ants

5

Marching black ants

4

Sparkle text

3

Blinking background

2

Las Vegas Lights

1

Engrave.

\impr

Emboss.

\embo

Subscript position in half-points (the default is 6).

\dnN

Marks the text as deletion revision marked.*

\deleted

Character scaling value. The N argument is a value representing a percentage
(the default is 100).

\charscalexN

All capitals.*

\caps

Bold.*

\b





Page 45

Indicates any characters not belonging to the default document character set and
tells which character set they do belong to. Macintosh character sets are
represented by values greater than 255. The values for N correspond to the
values for the \ fcharset control word.

\cchsN

Designates character style. If a character style is specified, style properties
must be specified with the character run. N refers to an entry in the style
table.

\csN

The character data following this control word will be treated as a
left-to-right run (the default).

\ltrch

The character data following this control word will be treated as a
right-to-left run.

\rtlch

Background color (the default is 0).

\cbN

Foreground color (the default is 0).

\cfN

Hidden text.*

\v

Superscripts text and shrinks point size according to font information.

\super

Superscript position in half-points (the default is 6).

\upN

Wave underline.

\ulwave

Word underline.

\ulw

Thick underline

\ulth

Stops all underlining.

\ulnone

Double underline.

\uldb

Dot dot dash underline.

\uldashdd

Dot dash underline.

\uldashd

Dash underline.

\uldash

Dotted underline.

\uld

Continuous underline. \ul0 turns off all underlining.

\ul

Double strikethrough.

\strikedl

Strikethrough.*

\strike

Shadow.*

\shad

Small capitals.*

\scaps

Outline.*

\outl

Italic.*

\i

Font size in half-points (the default is 24).

\fsN

Font number. N refers to an entry in the font table.

\fN

Point size (in half-points) above which to kern character pairs. \kerning0 turns
off kerning.

\kerningN

Expansion or compression of the space between characters in twips; a negative
value compresses. For backward compatibility, both \expndtw and \expnd should be
emitted.

\expndtwN

Expansion or compression of the space between characters in quarter-points; a
negative value compresses (the default is 0).

\expndN

Turns off superscripting or subscripting.

\nosupersub

Subscripts text and shrinks point size according to font information.

\sub





\langN

Page 46

Applies a language to a character. N is a number corresponding to a language.
The \plain control word resets the language property to the language defined by
\deflangN in the document properties.

The following table defines the standard languages used by Microsoft. This table
was generated by the Unicode group for use with TrueType and Unicode.

0x0417

Rhaeto-Romanic

0x0816

Portuguese

0x0415

Polish

0x0814

Norwegian (Nynorsk)

0x0414

Norwegian (Bokmal)

0x0412

Korean

0x0411

Japanese

0x0410

Italian

0x040f

Icelandic

0x040e

Hungarian

0x040d

Hebrew

0x0408

Greek

0x0407

German

0x0c0c

French (Canadian)

0x040c

French

0x040b

Finnish

0x0409

English (U.S.)

0x0809

English (U.K.)

0x0c09

English (Australian)

0x0413

Dutch

0x0406

Danish

0x0405

Czech

0x041a

Croato-Serbian (Latin)

0x0403

Catalan

0x0402

Bulgarian

0x0416

Brazilian Portuguese

0x080c

Belgian French

0x0813

Belgian Dutch

0x0421

Bahasa

0x0401

Arabic

0x041c

Albanian

0x0400

No language

Language ID

Language name





0x0429

Farsi (Persian)

0x0431

Tsonga

0x0432

Tswana

0x0433

Venda

0x0434

Xhosa

0x0435

Zulu

0x0436

Afrikaans

0x0430

Sesotho (Sotho)

0x0420

Urdu

0x041f

Turkish

0x0404

Traditional Chinese

0x041e

Thai

0x0810

Swiss Italian

0x0807

Swiss German

0x100c

Swiss French

0x041d

Swedish

0x080a

Spanish (Mexican)

0x040a

Spanish (Castilian)

0x041b

Slovak

0x0804

Simplified Chinese

0x081a

Serbo-Croatian (Cyrillic)

0x0419

Russian

0x0418

Romanian

Page 47

To read negative \expnd values from Word for the Macintosh, an RTF reader should
use only the low-order 6 bits of the value read. Word for the Macintosh does not
emit negative values for \expnd. Instead, it treats values from 57 through 63 as
–7 through –1, respectively (the low-order 6 bits of 57 through 63 are the same
as –7 through –1).

Character Borders and Shading Character shading has the following syntax.

Character shading. The N argument is a value representing the shading of the
text in hundredths of a percent.

\chshdngN

Character border (border always appears on all sides).

\chbrdr

Meaning

Control word

\chbghoriz | \chbgvert | \chbgfdiag | \chbgbdiag | \chbgcross | \chbgdcross |
\chbgdkhoriz | \chbgdkvert | \chbgdkfdiag | \chbgdkbdiag | \chbgdkcross |
\chbgdkdcross

<pat>

(\chshdng | <pat>) \chcfpat? \chcbpat?

<shading>





Page 48

Specifies a dark diagonal cross background pattern for the text.

\chbgdkdcross

Specifies a dark cross background pattern for the text.

\chbgdkcross

Specifies a dark backward diagonal background pattern for the text (////).

\chbgdkbdiag

Specifies a dark forward diagonal background pattern for the text (\\\\).

\chbgdkfdiag

Specifies a dark vertical background pattern for the text.

\chbgdkvert

Specifies a dark horizontal background pattern for the text.

\chbgdkhoriz

Specifies a diagonal cross background pattern for the text.

\chbgdcross

Specifies a cross background pattern for the text.

\chbgcross

Specifies a backward diagonal background pattern for the text (////).

\chbgbdiag

Specifies a forward diagonal background pattern for the text (\\\\).

\chbgfdiag

Specifies a vertical background pattern for the text.

\chbgvert

Specifies a horizontal background pattern for the text.

\chbghoriz

N is the fill color, specified as an index into the document's color table.

\chcbpatN

N is the color of the background pattern, specified as an index into the
document’s color table.

\chcfpatN

The color, width, and border style keywords for character borders are the same
as the keywords for paragraph borders.  Control word

Meaning

Track Changes (Revision Mark) properties

Index into the revision table. The content of the Nth group in the revision
table is considered to be the author of that revision.

\crauthN

Time of the revision. The 32-bit DTTM structure is emitted as a long integer.

\revdttmN

Index into the revision table. The content of the Nth group in the revision
table is considered to be the author of that revision.

\revauthN

Text has been added since revision marking was turned on.

\revised

Note This keyword is used to indicate formatting revisions, such as bold,
italic, and so on.

Time of the deletion. The 32-bit DTTM structure is emitted as a long integer.

\revdttmdelN

Index into the revision table. The content of the Nth group in the revision
table is considered to be the author of that deletion.

\revauthdelN

Time of the revision. The 32-bit DTTM structure is emitted as a long integer.

\crdateN

Associated Character Properties Bidirectional-aware text processors often need
to associate a Latin (or other left-to-right) font with an Arabic or Hebrew (or
other right-to-left) font. The association is needed to match commonly used
pairs of fonts in name, size, and other attributes. Although RTF defines a broad
variety of associated character properties, any implementation may choose not to
implement a particular associated character property and share the property
between the Latin and Arabic fonts.  Property association uses the following
syntax: \rtlch \af & <aprops>* \ltrch <ptext>

<ltrrun>

<ltrrun> | <rtlrun>

<atext>





<rtlrun>

Page 49

\ltrch \af & <aprops>* \rtlch <ptext>

Here are some examples of property association: \ltrch\af2\ab\au\rtlch\u Sample
Text

This is a right-to-left run. Text will use the default bidirectional font, and
will be underlined. The left-toright font associated with this run is font 2 (in
the font table) with bolding and underlining.  \plain\rtlch\ltrch Sample Text

This is a left-to-right run. The right-to-left font and the left-to-right font
use the default font (specified by \deff).  \rtlch\af5\ab\ai\ltrch\u Sample Text

This is a left-to-right run. The right-to-left font is font 5, bold and
italicized. The left-to-right font is the default font, underlined. If the
reader does not support underlining in the associated font, both fonts will be
underlined.  The property association control words (described as <aprops> in
the syntax description) are listed in the following table. Some control words
(indicated in the following table by an asterisk following the description) can
be turned off by the control word followed by 0 .

Superscript position in half-points (the default is 6).

\aupN

Associated font is word underline.

\aulw

Associated font is no longer underlined.

\aulnone

Associated font is double underline.

\auldb

Associated font is dotted underline.

\auld

Associated font is continuous underline. \aul0 turns off all underlining for the
alternate font.

\aul

Associated font is strikethrough.*

\astrike

Associated font is shadow.*

\ashad

Associated font is small capitals.*

\ascaps

Associated font is outline.*

\aoutl

Language ID for the associated font. (This uses the same language ID codes
described on page 35 of this Application Note.)

\alangN

Associated font is italic.*

\ai

Associated font size in half-points (the default is 24).

\afsN

Associated font number (the default is 0).

\afN

Expansion or compression of the space between characters in quarter-points; a
negative value compresses (the default is 0).

\aexpndN

Associated font is subscript position in half-points (the default is 6).

\adnN

Associated foreground color (the default is 0).

\acfN

Associated font is all capitals.*

\acaps

Associated font is bold.*

\ab

Meaning

Control word





Page 50

Highlighting This property applies highlighting to text. The formatting is not a
character format, so it cannot be part of a style definition.

Highlights the specified text. N specifies the color.

\highlightN

Definition

Control Word

For \highlight, the N argument can have the following values:

Light Gray

16

Dark Gray

15

Dark Yellow

14

Dark Red

13

Dark Magenta

12

Dark Green

11

Dark Cyan

10

Dark Blue

9

Unused

8

Yellow

7

Red

6

Magenta

5

Green

4

Cyan

3

Blue

2

Black

1

Description

Value

Special Characters The RTF Specification includes control words for special
characters (described as <spec> in the charactertext syntax description). If a
special-character control word is not recognized by the RTF reader, it is
ignored, and the text following it is considered plain text. The RTF
Specification is flexible enough to allow new special characters to be added for
interchange with other software.  The special RTF characters are listed in the
following table.

Current page number (as in headers).

\chpgn

Current time (as in headers).

\chtime

Current date in abbreviated format (for example, Thu, Oct 28, 1997).

\chdpa

Current date in long format (for example, Thursday, October 28, 1997).

\chdpl

Current date (as in headers).

\chdate

Meaning

Control word





Page 51

A hexadecimal value, based on the specified character set (may be used to
identify 8-bit values).

\'hh

Marks a destination whose text should be ignored if not understood by the RTF
reader.

\*

Specifies a subentry in an index entry.

\:

Nonbreaking hyphen.

\_

Optional hyphen.

\-

Nonbreaking space.

\~

Formula character. (Used by Word 5.1 for the Macintosh as the beginning
delimiter for a string of formula typesetting commands.)

\|

Right double quotation mark.

\rdblquote

Left double quotation mark.

\ldblquote

Right single quotation mark.

\rquote

Left single quotation mark.

\lquote

Bullet character.

\bullet

Nonbreaking space equal to width of character "n" in current font. Some old RTF
writers use the construct ‘{\enspace }’ (with two spaces before the closing
brace) to trick readers unaware of \enspace into parsing a regular space. A
correct reader should interpret this as an \enspace and a regular space.

\enspace

Nonbreaking space equal to width of character "m" in current font. Some old RTF
writers use the construct ‘{\emspace }’ (with two spaces before the closing
brace) to trick readers unaware of \emspace into parsing a regular space. A
reader should interpret this as an \emspace and a regular space.

\emspace

En-dash (–).

\endash

Em-dash (—).

\emdash

Tab character.

\tab

Nonrequired line height. This is emitted as a prefix to each line.

\softlheightN

Nonrequired line break. Emitted as it appears in galley view.

\softline

Nonrequired column break. Emitted as it appears in galley view.

\softcol

Nonrequired page break. Emitted as it appears in galley view.

\softpage

Required line break (no paragraph break).

\line

Required column break.

\column

Required page break.

\page

End of section and paragraph.

\sect

End of paragraph.

\par

End of table row.

\row

End of table cell.

\cell

Anchoring character for footnote continuation.

\chftnsepc

Anchoring character for footnote separator.

\chftnsep

Annotation reference (annotation text follows in a group).

\chatn

Automatic footnote reference (footnotes follow in a group).

\chftn

Current section number (as in headers).

\sectnum





Page 52

Zero-width nonjoiner. This is used for unligating a character.

\zwnj

Zero-width joiner. This is used for ligating (joining) characters.

\zwj

The following characters should be displayed from right to left; usually found
at the start of \rtlch runs.

\rtlmark

The following characters should be displayed from left to right; usually found
at the start of \ltrch runs.

\ltrmark

A carriage return (character value 13) or linefeed (character value 10) will be
treated as a \par control if the character is preceded by a backslash. You must
include the backslash; otherwise, RTF ignores the control word. (You may also
want to insert a carriage-return/linefeed pair without backslashes at least
every 255 characters for better text transmission over communication lines.) A
tab (character value 9) should be treated as a \tab control word. Not all RTF
readers understand this; therefore, an RTF writer should always emit the control
word for tabs.  The following are the code values for the special characters
listed.

148

\rdblquote

147

\ldblquote

146

\rquote

145

\lquote

151

\emdash

150

\endash

149

\bullet

Word for Windows and OS/2

Control word

Apple Macintosh 0xA5 0xD1 0xD0 0xD4 0xD5 0xD2 0xD3

Document Variables Document variables are definable and accessed through macros.
The group has the following syntax.

A group that defines a document variable name and its value.

\ docvar

Definition

Control Word

#PCDATA

<vartype>

#PCDATA

<varname>

\docvar

<docvar>

‘{\*’ <docvar>‘{’ <varname> ‘}’ ‘{’ <vartext> ‘}’ ‘}’*

<variables>

Bookmarks This destination may specify one of two control words: \*\bkmkstart,
which indicates the start of the specified bookmark, and \*\bkmkend, which
indicates the end of the specified bookmark.  Bookmarks have the following
syntax: <book>

<bookstart> | <bookend> 



'{\*' \bkmkend #PCDATA '}'

<bookend>

'{\*' \bkmkstart (\bkmkcolf? & \bkmkcoll?) #PCDATA '}'

<bookstart>

Page 53

A bookmark is shown in the following example: \pard\plain \fs20 Kuhn believes
that science, rather than discovering in experience certain structured
relationships, actually creates (or already participates in) a presupposed
structure to which it fits the data.  {\bkmkstart paradigm} Kuhn calls such a
presupposed structure a paradigm.{\bkmkend paradigm}

The bookmark start and the bookmark end are matched with the bookmark tag. In
the example, the bookmark tag is "paradigm." Each bookmark start should have a
matching bookmark end; however, the bookmark start and the bookmark end may be
in any order.  \bkmkcolfN is used to denote the first column of a table covered
by a bookmark. If it is not included, the first column is assumed. \bkmkcollN is
used to denote the last column. If it is not used, the last column is assumed.
These controls are used within the \*\bkmkstart destination following the
\bkmkstart control. For example, {\*\bkmkstart\bkmkcolf2\bkmkcoll5 Table1}
places the bookmark "Table1" on columns 2 through 5 of a table.

Pictures An RTF file can include pictures created with other applications. These
pictures can be in hexadecimal (the default) or binary format. Pictures are
destinations, and begin with the \pict control word. The \pict keyword is
preceded by \*\shppict destination control keyword as described in the following
example. A picture destination has the following syntax:

(\bin #BDATA) | #SDATA

<data>

\picbmp & \picbpp

<metafileinfo>

(\picw & \pich) \picwgoal? & \pichgoal? \picscalex? & \picscaley? & \picscaled?
& \piccropt? & \piccropb? & \piccropr? & \piccropl?

<pictsize>

\wbmbitspixel & \wbmplanes & \wbmwidthbytes

<bitmapinfo>

| \emfblip | \pngblip | \jpegblip | \macpict | \pmmetafile | \wmetafile |
\dibitmap <bitmapinfo> | \wbitmap <bitmapinfo>

<picttype>

'{' \pict (<brdr>? & <shading>? & <picttype> & <pictsize> & <metafileinfo>?)
<data> '}'

<pict>

These control words are described in the following table. Some measurements in
this table are in twips; a twip is one-twentieth of a point.

Specifies that Word 97 has written a {\pict destination that it will not read on
input. This keyword is for compatibility with other readers.

\nonshppict

Specifies a Word 97 picture. This is a destination control word.

\shppict

Source of the picture is a JPEG.

\jpegblip

Source of the picture is a PNG.

\pngblip

Source of the picture is an EMF (enhanced metafile).

\emfblip

Meaning

Control Word





Page 54

Source of the picture is a Windows device-independent bitmap. The N argument
identifies the bitmap type (must equal 0).

\dibitmapN

Source of the picture is a Windows metafile. The N argument identifies the
metafile type (the default is 1).

\wmetafileN

Source of the picture is an OS/2 metafile. The N argument identifies the
metafile type. The N values are described on page 43 of this Application Note.

\pmmetafileN

Source of the picture is QuickDraw.

\macpict

The information to be included in RTF from a Windows device-independent bitmap
is the concatenation of the BITMAPINFO structure followed by the actual pixel
data.  \wbitmapN

Source of the picture is a Windows device-dependent bitmap. The N argument
identifies the bitmap type (must equal 0).  The information to be included in
RTF from a Windows device-dependent bitmap is the result of the GetBitmapBits
function.

Example: {\*\shppict {\pict \emfblip ….. }}{\nonshppict {\pict ….}}

For more information on the GetDIBits and GetBitmapBits functions and the
structure of Windows deviceindependent and device-dependent bitmaps, see Volume
1 and Volume 2 of the Programmer's Reference in the Microsoft Windows 3.1
Software Development Kit. For best device-independence and interoperability with
Microsoft products, however, use of the \wbitmap and \dibitmap control words is
discouraged. Rather, bitmaps should be embedded within Windows metafiles and the
\wmetafile control word used. For more information on embedding bitmaps within
metafiles, see Volume 1 and Volume 2 of the Programmer's Reference in the
Microsoft Windows 3.1 Software Development Kit.  Control word

Meaning

Bitmap Information

Specifies the number of bytes in each raster line. This value must be an even
number because the Windows graphics device interface (GDI) assumes that the bit
values of a bitmap form an array of integer (two-byte) values. In other words,
\wbmwidthbytes times 8 must be the next multiple of 16 greater than or equal to
the \picw (bitmap width in pixels) value.

\wbmwidthbytesN

Number of bitmap color planes (must equal 1).

\wbmplanesN

Number of adjacent color bits on each plane needed to define a pixel (the
default is 1). Possible values are 1 (monochrome), 4 (16 colors), 8 (256 colors)
and 24 (RGB).

\wbmbitspixelN

Picture Size, Scaling, and Cropping

Vertical scaling value. The N argument is a value representing a percentage (the
default is 100).

\picscaleyN

Horizontal scaling value. The N argument is a value representing a percentage
(the default is 100).

\picscalexN

Desired height of the picture in twips. The N argument is a long integer.

\pichgoalN

Desired width of the picture in twips. The N argument is a long integer.

\picwgoalN

yExt field if the picture is a Windows metafile; picture height in pixels if the
picture is a bitmap or from QuickDraw. The N argument is a long integer.

\pichN

xExt field if the picture is a Windows metafile; picture width in pixels if the
picture is a bitmap or from QuickDraw. The N argument is a long integer.

\picwN





Page 55

Right cropping value in twips. A positive value crops toward the center of the
picture; a negative value crops away from the center, adding a space border
around picture (the default is 0).

\piccroprN

Left cropping value in twips. A positive value crops toward the center of the
picture; a negative value crops away from the center, adding a space border
around picture (the default is 0).

\piccroplN

Bottom cropping value in twips. A positive value crops toward the center of the
picture; a negative value crops away from the center, adding a space border
around picture (the default is 0).

\piccropbN

Top cropping value in twips. A positive value crops toward the center of the
picture; a negative value crops away from the center, adding a space border
around picture (the default is 0).

\piccroptN

Indicates there are shape properties applied to an inline picture. This is a
destination control word.

\picprop

Scales the picture to fit within the specified frame. Used only with \macpict
pictures.

\picscaled

Metafile Information

Specifies the bits per pixel in a metafile bitmap. The valid range is 1–32, with
1, 4, 8, and 24 being recognized.

\picbppN

Specifies whether a metafile contains a bitmap.

\picbmp

Picture Data

A mostly unique identifier for a picture, where N is a long integer value.

\bliptagN

Used as: {\*\blipuid XXXXX} where XXXX is a 16-byte identification number for
the image.

\blipuid XXXXX

N represents units per inch on a picture (only certain image types need or
output this)

\blipupiN

The picture is in binary format. The numeric parameter N is the number of bytes
that follow. Unlike all other controls, this control word takes a 32-bit
parameter.

\binN

The \wbitmap control word is optional. If no other picture type is specified,
the picture is assumed to be a Windows bitmap. If \wmetafile is specified, the N
argument can be one of the following types.

8

MM_ANISOTROPIC

7

MM_ISOTROPIC

6

MM_TWIPS

5

MM_HIENGLISH

4

MM_LOENGLISH

3

MM_HIMETRIC

2

MM_LOMETRIC

1

MM_TEXT

N argument

Type

For more information about these types, see volume 1 of the Programmer’s
Reference in the Microsoft Windows 3.1 Software Development Kit.  Microsoft
Technical Support



Page 56

If \pmmetafile is specified, the N argument can be one of the following types.
Type PU_ARBITRARY

N argument 0x0004

0x001C

PU_TWIPS

0x0018

PU_HIENGLISH

0x0014

PU_LOENGLISH

0x0010

PU_HIMETRIC

0x000C

PU_LOMETRIC

0x0008

PU_PELS

For more information about these types, see volume 2 of the OS/2 Programmer’s
Reference.  Be careful with spaces following control words when dealing with
pictures in binary format. When reading files, RTF considers the first space
after a control word the delimiter and subsequent spaces part of the document
text. Therefore, any extra spaces are attached to the picture, with
unpredictable results.  RTF writers should not use the carriage-return/linefeed
(CR/LF) combination to break up pictures in binary format. If they do, the CR/LF
combination is treated as literal text and considered part of the picture data.
The picture in hexadecimal or binary format follows the picture-destination
control words. The following example illustrates the destination format:
{\pict\wbitmap0\picw170\pich77\wbmbitspixel1\wbmplanes1\wbmwidthbytes22
\picwgoal505 \pichgoal221 \picscalex172 \picscaley172
49f2000000000273023d1101a030 3901000a000000000273023d98 0048000200000275
02040000200010275023e000000000 273023d000002b90002b90002 b90002b90002b9
0002b90002b90002b90002b90002b90002 b92222b90002b90002b90 002b90002b9
0002b90002b90002b90002b9000

Objects Microsoft OLE links, Microsoft OLE embedded objects, and Macintosh
Edition Manager subscriber objects are represented in RTF as objects. Objects
are destinations that contain a data part and a result part. The data part is
generally hidden to the application that produced the document. A separate
application uses the data and supplies the appearance of the data. This
appearance is the result part of the object.  The representation of objects in
RTF is designed to allow RTF readers that don't understand objects or don't use
a particular type of object to use the current result in place of the object.
This allows the appearance of the object to be maintained through the conversion
even though the object functionality is lost. Each object comes with optional
information about the object, a required destination that contains the object
data, and an optional result that contains the current appearance of the object.
This result 



Page 57

contains standard RTF. It is an important responsibility of the RTF writer to
provide the result so that existing RTF readers that either do not support
objects or that do not support the particular type of object will be able to
display the object.  When the object is an OLE embedded or linked object, the
data part of the object is the structure produced by the OLESaveToStream
function. Some OLE clients rely on the OLE system to render the object and a
copy of the result is not available to the RTF writer for that application. For
these cases, the object result can be extracted from the structure produced by
the OLESaveToStream function. For information about the OLESaveToStream
function, see the Microsoft Object Linking and Embedding Software Development
Kit.  The syntax for this destination is:

Meaning

Control word

'{' \result <para>+ '}'

<result>

'{\*' \objsect <data> '}'

<objsect>

'{\*' \objalias <data> '}'

<objalias>

'{\*' \objdata (<objalias>? & <objsect>?) <data> '}'

<objdata>

\objh & \objw

<objhw>

\objsetsize? & \objalign? & \objtransy? & <objhw>? & \objcropt? & \objcropb? &
\objcropl? & \objcropr? & \objscalex? & \objscaley?

<objsize>

\rsltrtf | \rslttxt | \rsltpict | \rsltbmp

<rslttype>

\rsltmerge? & <rslttype>?

<rsltmod>

'{\*' \objtime <time> '}'

<objtime>

'{\*' \objname #PCDATA '}'

<objname>

'{\*' \objclass #PCDATA '}'

<objclass>

\linkself? & \objlock? | \objupdate?

<objmod>

\objemb | \objlink | \objautlink | \objsub | \objpub | \objicemb | objhtml |
objocx

<objtype>

( '{' \object (<objtype> & <objmod>? & <objclass>? & <objname>? & <objtime>? &
<objsize>? & <rsltmod>?) <objdata> <result> '}' ) | <pubobject>

<obj>

Object Type

An object type of HTML control.

\objhtml \objocx

An object type of MS Word for the Macintosh Installable Command (IC) Embedder.

\objicemb

An object type of Macintosh Edition Manager publisher.

\objpub

An object type of Macintosh Edition Manager subscriber.

\objsub

An object type of OLE autolink.

\objautlink

An object type of OLE link.

\objlink

An object type of OLE embedded object. If no type is given for the object, the
object is assumed to be of type \objemb.

\objemb

An object type of OLE control.

Object Information

Locks the object from any updates.

\objlock

The object is a link to another part of the same document.

\linkself





Page 58

Describes the time that the object was last updated.

\objtime

The text argument is the name of this object. This is a destination control
word.

\objname

The text argument is the object class to use for this object; ignore the class
specified in the object data. This is a destination control word.

\objclass

Forces an update to the object before displaying it. Note that this will
override any values in the <objsize> control words, but reasonable values should
always be provided for these to maintain backwards compatibility.

\objupdate

Object Size, Position, Cropping, and Scaling

N is the vertical scaling percentage.

\objscaleyN

N is the horizontal scaling percentage.

\objscalexN

N is the right cropping distance in twips.

\objcroprN

N is the left cropping distance in twips.

\objcroplN

N is the bottom cropping distance in twips.

\objcropbN

N is the top cropping distance in twips.

\objcroptN

N is the distance in twips the objects should be moved vertically with respect
to the baseline. This is needed to place Math Type equations correctly in line.

\objtransyN

N is the distance in twips from the left edge of the objects that should be
aligned on a tab stop. This is needed to place Equation Editor equations
correctly in line.

\objalignN

Forces the object server to set the object's dimensions to that specified by the
client.

\objsetsize

N is the original object width in twips, assuming the object has a graphical
representation.

\objwN

N is the original object height in twips, assuming the object has a graphical
representation.

\objhN

Object Data

This subdestination contains the section record for the publisher object for the
Macintosh Edition Manager. This is a destination control word.

\objsect

This subdestination contains the alias record for the publisher object for the
Macintosh Edition Manager. This is a destination control word.

\objalias

This subdestination contains the data for the object in the appropriate format;
OLE objects are in OLESaveToStream format. This is a destination control word.

\objdata

Object Result

The result destination is optional in the \object destination. It contains the
last update of the result of the object. The data of the result destination
should be standard RTF so that RTF readers that don't understand objects or the
type of object represented can use the current result in the object's place to
maintain appearance. This is a destination control word.

\result

Uses the formatting of the current result whenever a new result is obtained.

\rsltmerge

Forces the result to be plain text, if possible.

\rslttxt

Forces the result to be a bitmap, if possible.

\rsltbmp

Forces the result to be a Windows metafile or MacPict image format, if possible.

\rsltpict

Forces the result to be rich text format, if possible.

\rsltrtf





Page 59

When Word is used as an editor for Mail, the following control word can be
emitted. It is not seen in other situations.

Object attachment placeholder. Used in the RTF stream when Word is started as a
mail editor and the message contains attachments. The control word tells where
in the text stream the attachment should be placed. It does not define the
actual attachment.

\objattph

Meaning

Control Word

Macintosh Edition Manager Publisher Objects Word for the Macintosh writes
publisher objects for the Macintosh Edition Manager in terms of bookmarks (see
"Bookmarks" on page 41 of this Application Note). The range of publisher objects
are marked as bookmarks, so these controls are all used within the \bkmkstart
destination. The RTF syntax for a publisher object is:

The publisher object updates all Macintosh Edition Manager subscribers of this
object automatically whenever it is edited.

\pubauto

The bookmark marks a Macintosh Edition Manager publisher object.

\bkmkpub

Meaning

Control word

'{\*' \bkmkstart \bkmkpub \pubauto? (<objalias>? & <objsect>) #PCDATA '}'

<pubobject>

Drawing Objects Word 6.0/95 RTF Drawing objects and the drawing primitives
enumerated within drawing object groups use the syntax described by the
following tables.

\dptxbx \dptxbxmar '{' \dptxbxtext <para>+'}'

<dptextbox>

\dprect (\dproundr)?

<dprect>

\dpline <dppt> <dppt>

<dpline>

<dpline> | <dprect> | <dptextbox> | <dpellipse> | <dppolyline> | <dparc>

<dpsimpledpk>

<dpsimpledpk> <dphead> <dpprops>

<dpsimple>

\dpcallout <cotype> <coangle>? <coaccent>? <cosmartattach>? <cobestfit>?
<cominusx>? <cominusy>? <coborder>? <codescent>? \dpcooffset \dpcolength
<dphead> <dppolyline> <dphead> <dpprops> <dptextbox> <dphead> <dpprops>

<dpcallout>

\dpgroup \dpcount <dphead> <dpinfo>+ \dpendgroup <dphead>

<dpgroup>

<dpgroup> | <dpcallout> | <dpsimple>

<dpinfo>

\dolock

<dolock>

\dodhgt

<dodhgt>

\dobypage | \dobypara | \dobymargin

<doby>

\dobxpage | \dobxcolumn | \dobxmargin

<dobx>

<dobx> <doby> <dodhgt> <dolock>?

<dohead>

'{\*' \do <dohead> <dpinfo>'}'

<do>





\dpx \dpy \dpxsize \dpysize

<dphead>

\dpptx \dppty

<dppt>

\dppolyline (\dppolygon)? \dppolycount <dppt>+

<dppolyline>

\dparc \dparcflipx? \dparcflipy?

<dparc>

\dpellipse

<dpellipse>

Page 60

Note that in <dpgroup> the number of <dpinfo>s is equal to the argument of
\dpcount, whereas in <dppolyline> the number of <dppt>s is equal to the argument
of \dppolycount.  The following elements of the drawing-object syntax pertain
specifically to callout objects:

\dpcoaccent

<coaccent>

\dpcoa

<coangle>

\dpcotright | \dpcotsingle | \dpcotdouble | \dpcottriple

<cotype>

<cosmartattach> \dpcosmarta

\dpcodtop | \dpcodcenter | \dpcodbottom | \dpcodabs

<codescent>

\dpcoborder

<coborder>

\dpcominusy

<cominusy>

\dpcominusx

<cominusx>

\dpcobestfit

<cobestfit>

The remaining elements of the drawing object syntax are properties applied to
individual drawn primitives:

\dpastartsol | \dpastarthol

<arrowstartfill>

<arrowstartfill> \dpastartl \dpastartw

<endstylestart>

\dpfillbgpal

<fillbgpal>

\dpfillbgcr \dpfillbgcg \dpfillbgcb<fillbgpal>?

<fillbgrgb>

\dpfillbggray

<fillbggray>

<fillbggray> | <fillbgrgb>

<fillcolorbg>

\dpfillfgpal

<fillfgpal>

\dpfillfgcr \dpfillfgcg \dpfillfgcb<fillfgpal>?

<fillfgrgb>

\dpfillfggray

<fillfggray>

<fillfggray> | <fillfgrgb>

<fillcolorfg>

<fillcolorfg> <fillcolorbg> \dpfillpat

<fillprops>

\dplinepal

<linepal>

\dplinecor \dplinecog \dplinecob<linepal>?

<linergb>

\dplinegray

<linegray>

<linegray> | <linergb>

<linecolor>

\dplinesolid | \dplinehollow | \dplinedash | \dplinedot | \dplinedado |
\dplinedadodo

<linestyle>

<linestyle> <linecolor> \dplinew

<lineprops>

<lineprops>? <fillprops>? <endstylestart>? <endstyleend>? <shadow>?

<dpprops>





\dpshadow \dpshadx \dpshady

<shadow>

\dpaendsol | \dpaendhol

<arrowendfill>

<arrowendfill> \dpaendl \dpaendw

<endstyleend>

Page 61

The following table describes the control words for the drawing object group in
detail. All color values are RGB values between 0-255. All distances are in
twips. All other values are as indicated.

The drawing object is positioned at the following numeric address in the
z-ordering.

\dodhgtN

The drawing object is margin relative in the y-direction.

\dobymargin

The drawing object is paragraph relative in the y-direction.

\dobypara

The drawing object is page relative in the y-direction.

\dobypage

The drawing object is margin relative in the x-direction.

\dobxmargin

The drawing object is column relative in the x-direction.

\dobxcolumn

The drawing object is page relative in the x-direction.

\dobxpage

The drawing object's anchor is locked and cannot be moved.

\dolock

Indicates a drawing object is to be inserted at this point in the character
stream.  This is a destination control word.

\do

Definition

Control word

Drawing Primitives

Text box drawing primitive.

\dptxbx

Rectangle drawing primitive.

\dprect

Polyline drawing primitive.

\dppolyline

Polygon drawing primitive (closed polyline).

\dppolygon

Line drawing primitive.

\dpline

Ellipse drawing primitive.

\dpellipse

Callout drawing primitive, which consists of both a polyline and a text box.

\dpcallout

Arc drawing primitive.

\dparc

End group of drawing primitives.

\dpendgroup

Number of drawing primitives in the current group.

\dpcountN

Begin group of drawing primitives.

\dpgroup

Position and Size

Y-size of the drawing primitive.

\dpysizeN

Y-offset of the drawing primitive from its anchor.

\dpyN

X-size of the drawing primitive.

\dpxsizeN

X-offset of the drawing primitive from its anchor.

\dpxN

Callouts \dpcoaN

Angle of callout's diagonal line is restricted to one of the following: 0, 30,
45, 60, or 90. If this control word is absent, the callout has an arbitrary
angle, indicated by the coordinates of its primitives.  Microsoft Technical
Support



Page 62

Triple line callout.

\dpcottriple

Single line callout.

\dpcotsingle

Right angle callout.

\dpcotright

Double line callout.

\dpcotdouble

Auto-attached callout. Polyline will attach to either the top or bottom of the
text box depending on the relative quadrant.

\dpcosmarta

Offset of callout. This is the distance between the end of the polyline and the
edge of the text box.

\dpcooffsetN

Text box falls in quadrants III or IV relative to polyline origin.

\dpcominusy

Text box falls in quadrants II or III relative to polyline origin.

\dpcominusx

Length of callout.

\dpcolengthN

The descent of the callout

\dpcodescentN

Top-attached callout.

\dpcodtop

Center-attached polyline.

\dpcodcenter

Bottom-attached polyline.

\dpcodbottom

Absolute distance-attached polyline.

\dpcodabs

Visible border on callout text box.

\dpcoborder

Best fit callout (x-length of each line in callout is similar).

\dpcobestfit

Accent bar on callout (vertical bar between polyline and text box).

\dpcoaccent

Text Boxes and Rectangles

Rectangle is a round rectangle.

\dproundr

Group that contains the text of the text box.

\dptxbxtext

Internal margin of the text box.

\dptxbxmarN

Lines and Polylines

Number of vertices in polyline drawing primitive.

\dppolycountN

Y-coordinate of the current vertex (only for lines and polylines). The
coordinate order for a point must be x, y.

\dpptyN

X-coordinate of the current vertex (only for lines and polylines). The
coordinate order for a point must be x, y.

\dpptxN

Arcs

This indicates that the end point of the arc is below the start point. Arcs are
drawn counter-clockwise.

\dparcflipy

This indicates that the end point of the arc is to the right of the start point.
Arcs are drawn counter-clockwise.

\dparcflipx

Line Style

Red value for line color.

\dplinecorN

Green value for line color.

\dplinecogN

Blue value for line color.

\dplinecobN





Page 63

Thickness of line (in twips).

\dplinewN

Solid line style.

\dplinesolid

Hollow line style (no line color).

\dplinehollow

Grayscale value for line color (in half-percentages).

\dplinegrayN

Dotted line style.

\dplinedot

Dashed line style.

\dplinedash

Dashed-dotted-dotted line style.

\dplinedadodo

Dashed-dotted line style.

\dplinedado

Render line color using the PALETTERGB macro instead of the RGB macro in
Windows.

\dplinepal

Arrow Style

Length of end arrow, relative to pen width:

\dpaendlN

Hollow end arrow (lines only).

\dpaendhol

Large

3

Medium

2

Small

1

Width of end arrow, relative to pen width:

\dpaendwN

Solid end arrow (lines only).

\dpaendsol

Large

3

Medium

2

Small

1

Length of start arrow, relative to pen width:

\dpastartlN

Hollow start arrow (lines only).

\dpastarthol

Large

3

Medium

2

Small

1

Width of start arrow, relative to pen width:

\dpastartwN

Solid start arrow (lines only).

\dpastartsol

Large

3

Medium

2

Small

1

Fill Pattern

Grayscale value for background fill (in half-percentages).

\dpfillbggrayN

Render fill background color using the PALETTERGB macro instead of the RGB macro
in Windows.

\dpfillbgpal

Red value for background fill color.

\dpfillbgcrN

Green value for background fill color.

\dpfillbgcgN

Blue value for background fill color.

\dpfillbgcbN





Page 64

Index into a list of fill patterns. See below for list.

\dpfillpatN

Grayscale value for foreground fill (in half-percentages).

\dpfillfggrayN

Render fill foreground color using the PALETTERGB macro instead of the RGB macro
in Windows.

\dpfillfgpal

Red value for foreground fill color.

\dpfillfgcrN

Green value for foreground fill color.

\dpfillfgcgN

Blue value for foreground fill color.

\dpfillfgcbN

Shadow

Y-offset of the shadow.

\dpshadyN

X-offset of the shadow.

\dpshadxN

Current drawing primitive has a shadow.

\dpshadow

The following values are available for specifying fill patterns in drawing
objects with the \dpfillpat control word.

Light left-diagonal lines (\\\)

22

Light vertical lines

21

Light horizontal lines

20

Dark trellis lines

19

Dark grid lines

18

Dark right-diagonal lines (///)

17

Dark left-diagonal lines (\\\)

16

Dark vertical lines

15

Dark horizontal lines

14

90%

13

80%

12

75%

11

70%

10

60%

9

50%

8

40%

7

30%

6

25%

5

20%

4

10%

3

5%

2

Solid (100%)

1

Clear (no pattern)

0

Fill pattern

Value





Light trellis lines

25

Light grid lines

24

Light right-diagonal lines (///)

23

Page 65

Word 97 RTF for Drawing Objects (Shapes) Basic Format The basic format for
drawing objects in RTF is as follows { \shp

........

{ \*\shpinst

{ \shprslt

{ \spp

{ \sn .......... }

............... }

{ \sp .............. }

}

}

}

The first destination (\shp) is always present. This control word groups
everything related to a shape together. Following the destination change, comes
basic information regarding the shape. The following keywords with values can
appear in any order after the “{ \shp” control word.  Control word

Meaning

Shape keywords

The shape is positioned relative to the paragraph in the y (vertical) direction.

\shpbypara

The shape is positioned relative to the margin in the y (vertical) direction.

\shpbymargin

The shape is positioned relative to the page in the y (vertical) direction.

\shpbypage

The shape is positioned relative to the column in the x (horizontal) direction.

\shpbxcolumn

The shape is positioned relative to the margin in the x (horizontal) direction.

\shpbxmargin

The shape is positioned relative to the page in the x (horizontal) direction.

\shpbxpage

0 if the shape is in the main document. 1 if the shape is in the header
document.

\shpfhdrN

Describes z-order of shape. It starts at 0 for the back most shape and proceed
to N for the top most shape. The shapes that appear inside of the header
document will have a separate z-order as compared to the z-order of the shapes
in the main document. For instance the back-most shape in the header will have
z-order number 0, and the back-most main-document shape will also have z-order
number 0.

\shpzN

A number that is unique to each shape. This keyword is primarily used for linked
text boxes. The value N is a long integer.

\shplidN

The value N is a measurement in twips. Specifies position of shape from right of
the anchor.

\shprightN

The value N is a measurement in twips. Specifies position of shape from bottom
of the anchor.

\shpbottomN

The value N is a measurement in twips. Specifies position of shape from top of
the anchor.

\shptopN

The value N is a measurement in twips. Specifies position of shape from the left
of the anchor.

\shpleftN





\shpwrN

\shpwrkN

\shpfblwtxtN

Page 66

Describes the type of wrap for the shape.

Wrap text through shape

5

Wrap tightly around shape

4

None (wrap as if shape isn’t present)

3

Wrap around shape

2

Wrap around top and bottom of shape (no text allowed beside shape)

1

Wrap on side (for types 2 and 4 for \shpwrN ).

Wrap only on largest side

3

Wrap right side only

2

Wrap left side only

1

Wrap both sides of shape

0

Describes relative z-ordering.  Shape is below text

1

Text is below shape

0

Text for a shape. The text must come after all the other properties for the
shape (inside the \shpinst destination) in the following format:

\shptxt

Lock anchor for shape.

\shplockanchor

{ \shptxt

Any Valid RTF for the current textbox }

Note For linked text boxes, the first text box of the linked set has the entire
story, so all following text boxes will not have a \shptxt field.  Specifies a
group shape. The parameters following this keyword are the same as those
following \shp. The order of the shapes inside a group is from bottom to top in
z-order.

\shpgrp

This is where the Word 6.0/95 drawn object RTF can be placed.

\shprslt

Inside of a \shpgrp, no { \shprslt .... } fields would be generated (that is,
only the root-level shape can have a \shprslt field (this field describes the
entire group).  For example: { \shpgrp

....... { \shp ..... (and all sub-items as usual) } { \shp ......(and all
sub-items as usual) }

Note A { \shpgrp ...... } can be substituted for a { \shp ..... } at any place
(to accomplish groups inside of groups).  With the exception of \shplid, these
do not apply for shapes that are within a group. For more information about
groups, see the "Introduction" section of this Applicaiton Note.

Specifies the document background. This is a destination keyword. It contains
the {

\background

Meaning

Control word

\shp keyword and all the shape properties.

Drawing Object Properties The { \shp ............ control word is followed by {
\*\shpinst 



The bulk of a shape is defined as a series of properties. Following the
properties of a shape each in the following format: { \sp

{ \*\shpinst

Page 67

is a list of all the

{ \sn PropertyName } { \sv PropertyValueInformation } }

The control word for the drawing object property is \sp. Each property has a
pair of name (\sn) and value (\sv) control words placed in the shape property
group. For example, the vertical flip property is represented as: {\sp{\sn
fFlipV}{\sv 1}}

Here, the name of the property is fFlipV and the value is 1, which indicates
True. All shape properties follow this basic format. Only properties that have
been explicitly set for a shape are written out in RTF format. Other properties
assume the default values (a property may be set to the default value
explicitly).  The following table describes all the names of properties for
drawing objects along with the type of their corresponding value.

See below for values. 0 indicates user-drawn freeforms and polygons.

ShapeType

Horizontal flip, applied after the rotation.

Boolean

FFlipH

Boolean

FFlipV

Angle

Rotation

Type of Value Meaning

Property Object Type

Boolean

fHidden

Boolean

fIsButton

Boolean

fBehindDocument

EMU

dyWrapDistBottom

EMU

dxWrapDistRight

EMU

dyWrapDistTop

EMU

dxWrapDistLeft

Array

pWrapPolygonVertices

String

WzName

Rotation of the shape.  Vertical flip, applied after the rotation.

Shape name (only set through Visual Basic® for Applications).  Points of the
text wrap polygon.  Left wrapping distance from text.  Top wrapping distance
from text.  Right wrapping distance from text.  Bottom wrapping distance from
text.  Place the shape behind text.  Specified whether the shape is a button.
Do not display or print (only set through Visual Basic for Applications).

Lock

Boolean

fLockVerticies

Boolean

fLockCropping

Boolean

fLockAgainstSelect

Boolean

fLockAspectRatio

Boolean

fLockRotation

Lock rotation.  Lock aspect ratio.  No selecting this shape.  No cropping this
shape.  No points edit mode.





Boolean

fLockAgainstGrouping

Boolean

fLockAdjustHandles

Boolean

fLockText

Page 68

Do not edit text.  Do not adjust.  Do not group this shape.

Text Box

Wrap text at shape margins:

WrapText

Bottom internal margin of the text box.

EMU

dyTextBottom

EMU

dxTextRight

EMU

dyTextTop

EMU

dxTextLeft

anchorText

Left internal margin of the text box.  Top internal margin of the text box.
Right internal margin of the text box.

Through

4

Top Bottom

3

None

2

Tight

1

Square

0

Text anchor point:

txflTextFlow

Bottom Centered Baseline

6

Bottom Centered

5

Middle Centered

4

Top Centered

3

Bottom

2

Middle

1

Top

0

Text flow:

Horizontal ASCII font

4

Top to bottom non-ASCII font

3

Bottom to top non-ASCII font

2

Top to bottom ASCII font

1

Horizontal non-ASCII font

0

WordArt Effect

Alignment on curve:

gtextAlign

Unicode text string.

gtextUNICODE

gtextSize

String

Fixed

Spread words out to fit width

5

Spread letters out to fit width

4

Right justify

3

Left justify

2

Center text on width

1

Stretch each line of text to fit width

0

Default point size.





Boolean

gtextFStrikethrough

Boolean

gtextFSmallcaps

Boolean

gtextFShadow

Boolean

gtextFUnderline

Boolean

gtextFItalic

Boolean

gtextFBold

Boolean

gtextFDxMeasure

Boolean

gtextFNormalize

Boolean

gtextFBestFit

Boolean

gtextFShrinkFit

Boolean

gtextFStretch

Boolean

gtextFTight

Boolean

gtextFKern

Boolean

gtextFVertical

Boolean

fGtext

String

gtextFont

Fixed

gtextSpacing

Page 69

Adjust the spacing between characters (1.0 is normal).  Font name.  True if the
text effect properties (gtext*) are used.  False if these properties are
ignored.  If an @ font is available use it; otherwise, rotate individual
characters 90 degrees counter-clockwise.  If the font supports character pair
kerning, use it.  Adjust the spacing between characters rather than the
character advance by the gtextSpacingratio.  Stretch the text to fit shape.
When laying out the characters, consider the glyph bounding box rather than the
nominal font character bounds.  Scale text laid out on a path to fit the path.
Stretch individual character heights independently to fit.  When laying out
characters, measure distances along the x-axis rather than along the path.  Bold
font (if available).  Italic font (if available).  Underline font (if
available).  Shadow font (if available).  Small caps font (if available).
Strikethrough font (if available).

Picture

Flags for linked to file pictures:

pibFlags

Picture file name for link to file pictures.

String

pibName

Picture

pib

Fixed

cropFromRight

Fixed

cropFromLeft

Fixed

cropFromBottom

Fixed

cropFromTop

Boolean

pictureBiLevel

Boolean

pictureGray

Fixed

pictureGamma

Fixed

PictureBrightness

Fixed

pictureContrast

Color

pictureTransparent

Top cropping percentage.  Bottom cropping percentage.  Left cropping percentage.
Right cropping percentage.  Binary picture data.

Link to file; do not save picture with document

14

Link to file; save with document

10

No links (default)

0

Transparent color.  Contrast setting.  Brightness setting.  Gamma correction
setting.  Display grayscale.  Display bi-level.





Page 70

Geometry

Integer

adjust10Value

Integer

adjust9Value

Integer

adjust8Value

Integer

adjust7Value

Integer

adjust6Value

Integer

adjust5Value

Integer

adjust4Value

Integer

adjust3Value

Integer

adjust2Value

Integer

adjustValue

Array

pSegmentInfo

Array

pVerticies

Long integer

geoBottom

Long integer

geoRight

Long integer

geoTop

Long integer

geoLeft

Left edge of the bounds of a user-drawn shape.  Top edge of the bounds of a
user-drawn shape.  Right edge of the bounds of a user-drawn shape.  Bottom edge
of the bounds of a user-drawn shape.  The points of the shape.  The segment
information.  First adjust value from an adjust handle. The interpretation
varies with the shape type. Adjust values alter the geometry of the shape in
smart ways.  Second adjust value.  Third adjust value.  Fourth adjust value.
Fifth adjust value.  Sixth adjust value.  Seventh adjust value.  Eighth adjust
value.  Ninth adjust value.  Tenth adjust value.

Fill

Flags for fills:

fillblipflags

Picture file name for custom fills.

String

fillBlipName

Picture

fillBlip

Fixed

fillBackOpacity

Color

fillBackColor

Fixed

fillOpacity

Color

fillColor

Fill type

fillType

Type of fill:

Shade using the fillAngle

7

Shade from shape outline to end point

6

Shade from bounding rectangle to end point

5

Shade from start to end points

4

A picture centered in the shape

3

A texture (pattern with its own color map)

2

A pattern (bitmap)

1

A solid color

0

Foreground color.  Opacity. Normal is 1.0.  Background color.  Opacity for
shades only. Normal is 1.0.  Pattern/texture picture for the fill.

Link to file; save with document

10

No links (default)

0 14

Link to file; do not save picture with document





Linear shaded fill focus percent.

fillFocus

Fade angle number of degrees.

Fixed

fillAngle

EMU

fillHeight

EMU

fillWidth

Boolean

fFilled

Fixed

fillShapeOriginY

Fixed

fillShapeOriginX

Fixed

fillOriginY

Fixed

fillOriginX

Array

fillShadeColors

Fixed

fillToBottom

Fixed

fillToRight

Fixed

fillToTop

Fixed

fillToLeft

Page 71

The pattern or tile will be expanded to approximately this size.  The pattern or
tile will be expanded to approximately this size.

The fillToLeft, fillToTop, fillToRight, and fillToBottom values define the
"focus" rectangle for concentric shapes; they are specified as a fraction of the
outer rectangle of the shade.  See fillToLeft definition.  See fillToLeft
definition.  See fillToLeft definition.  Custom or preset color ramps for
graduated fills on shapes.  When a textured fill is used, the texture may be
aligned to with shape (fFillShape)—if this is done, the default alignment is to
the top left. The values FillOriginY FillShapeOriginX fillShapeOriginY allow an
arbitrary position in the texture (relative to the top-left proportion of the
texture's height and width) to be aligned on an arbitrary position on the shape
(relative to the top-left proportion of the width and height of the bounding
box).  Note that all these values are fixed point fractions of the relevant
width or height.  See fillOriginX definition.  See fillOriginX definition.  See
fillOriginX definition.  The shape is filled.

Line

Picture

lineFillBlip

Line type

lineType

Color

lineBackColor

Color

lineColor

Color of the line.  Background color of the pattern.  Type of line:

Picture fill with the lineFillBlip

3

Textured fill with the lineFillBlip

2

Patterned fill with the lineFillBlip

1

Solid fill with the line color

0

Pattern for the line.





lineblipflags

Page 72

Flags for patterned lines:

Link to file; do not save picture with document

14

Link to file; save with document

10

No links (default)

0

Line style:

lineStyle

Line width

EMU

lineWidth

EMU

lineFillHeight

EMU

lineFillWidth

lineDashing

Width of the pattern Height of the pattern

Three lines, thin, thick, thin

4

Double lines, reverse order

3

Double lines, one thick, one thin

2

Double lines of equal width

1

Single line (of width lineWidth)

0

Dashing:

lineStartArrowhead

Long dash dot dot

11

Long dash dot

10

Dash dot

9

Long dash

8

Dash

7

Dot

6

Dash dot dot (Windows)

4

Dash dot (Windows)

3

Dot (Windows)

2

Dash (Windows)

1

Solid

0

Start arrow type:

Double chevron arrow

8

Chevron arrow

7

Open arrow

6

Oval

4

Diamond

3

Stealth arrow

2

Arrow

1

Nothing

0

Start arrow width:

lineStartArrowWidth

End arrow type (same values as for lineStartArrowhead).

lineEndArrowhead

Wide

2

Medium

1

Narrow

0





lineStartArrowLength

Page 73

Start arrow length:

Long

2

Medium

1

Short

0

End arrow length (same values as for lineStartArrowLength).

lineEndArrowLength

End arrow width (same values as for lineStartArrowWidth).

lineEndArrowWidth

fLine

Boolean

Has a line.

Shadow shadowType

Type of shadow:

Boolean

fShadow

Fixed

ShadowOriginY

Fixed

shadowOriginX

Fixed

shadowWeight

Fixed

shadowPerspectiveY

Fixed

shadowPerspectiveX

Fixed

shadowScaleYToY

Fixed

shadowScaleXToY

Fixed

shadowScaleYToX

Fixed

shadowScaleXToX

EMU

shadowSecondOffsetY

EMU

shadowSecondOffsetX

EMU

shadowOffsetY

EMU

shadowOffsetX

Fixed

shadowOpacity

Color

shadowHighlight

Color

shadowColor

Emboss or engrave

6

Perspective shadow cast in drawing space

4

Rich perspective shadow (cast in shape space)

3

Rich perspective shadow (cast relative to shape)

2

Double offset shadow

1

Offset shadow

0

Foreground color.  Embossed color.  Opacity of the shadow. Normal is 1.0.
Shadow offset toward the right.  Shadow offset toward the bottom.  Double shadow
offset toward the right.  Double shadow offset toward the bottom.  The
shadowScaleXToX to shadowWeight define a 3x2 transform matrix that is applied to
the shape to generate the shadow.  See definition for shadowScaleXToX.  See
definition for shadowScaleXToX.  See definition for shadowScaleXToX.  See
definition for shadowScaleXToX.  See definition for shadowScaleXToX.  See
definition for shadowScaleXToX.  Define the position of the origin relative to
the center of the shape— this position is determined based on a proportion of
the rotated shape width and height. The shape will be rotated and then
positioned such that the point is at (0,0) before the transformation is applied.
See the definition for shadowOriginX.  Switches the shadow on or off.

3-D Effects c3DSpecularAmt

Fixed

Specular amount for the material.  



Fixed

c3DRotationCenterY

Fixed

c3DRotationCenterX

Boolean

fC3DRotationCenterAut

Angle

c3DRotationAngle

Long integer

c3DRotationAxisZ

Long integer

c3DRotationAxisY

Long integer

c3DRotationAxisX

Angle

c3DXRotationAngle

Angle

c3DYRotationAngle

Boolean

fc3DLightFace

Boolean

fc3DUseExtrusionColor

Boolean

fc3DMetallic

Boolean

f3D

Color

c3DExtrusionColor

EMU

c3DExtrudeBackward

EMU

c3DExtrudeForward

EMU

c3DEdgeThickness

Fixed

c3DShininess

Fixed

c3DDiffuseAmt

Page 74

Diffusion amount for the material.  Shininess of the material.  Specular edge
thickness.  Extrusion amount forward.  Extrusion amount backward.  Color of the
extrusion.  True if shape has a three-dimensional (3D) effect, False if it does
not.  True if shape uses metallic specularity, False if it does not.  Extrusion
color is set explicitly.  Light the face of the shape.  Degrees about y-axis.
If fc3DconstrainRotation (a Boolean property which defaults to True) is True the
rotation is restricted to x-y rotation and the final rotation results from first
rotating by c3DYRotationAngle degrees about the y-axis and then by
c3DXRotationAngle degrees about the z-axis.  If fc3DconstrainRotation is False,
the final rotation results from a single rotation of c3DrotationAngle about the
axis specified by c3DrotationAxisX, c3DrotationAxisY, and c3DrotationAxisZ.
Degrees about x-axis.  These specify the rotation axis. Only their relative
magnitudes matter.  See the c3DYRotationAxisX definition.  See the
c3DYRotationAxisX definition.  The rotation about the axis (defined above in the
c3DRotationAxisX, Y, and Z parameter sections) If fC3DRotationCenterAuto is True
the rotation will be about the center of the 3-D bounding cube of the 3-D group;
otherwise, the rotation center will be about c3DRotationCenterX,
c3DRotationCenterY, and c3DRotationCenterZ.  Rotation center (X).  The X and Y
values are a 16.16 fraction of the geometry width and height, with (0,0) being
at the center of the geometry. The Z value must be in absolute units (EMUs).
Rotation center (Y).  If fC3DRotationCenterAuto is True the rotation will be
about the center of the 3-D bounding cube of the 3-D group; otherwise, the
rotation center will be about c3DRotationCenterX, c3DRotationCenterY, and
c3DRotationCenterZ.  The X values and Y values are a fraction of the geometry
width and height, with (0,0) being at the center of the geometry. The Z value is
in absolute units.  



Boolean

fc3DParallel

Fixed

c3DFillIntensity

Long integer

c3DFillZ

Long integer

c3DFillY

Long integer

c3DFillX

Fixed

c3DKeyIntensity

Long integer

c3DKeyZ

Long integer

c3DKeyY

Long integer

c3DKeyX

Fixed

c3DAmbientIntensity

Fixed

c3DSkewAmount

Fixed

c3DSkewAngle

Fixed

c3DOriginY

Fixed

c3DOriginX

EMU

c3DZViewpoint

EMU

c3DYViewpoint

EMU

c3DXViewpoint

Long Integer

c3DRenderMode

EMU

c3DRotationCenterZ

Page 75

See c3DRotationCenterY above.  0

Render with full detail Render a bounding cube

2

Render as a wire frame

1

X view point.  Y view point.  Z view distance.  The following c3DOriginY and
c3DSkewAngle values define the origin relative to which the viewpoint origin is
measured.  These values are 16.16 numbers that specify the position of the
origin within the shape bounding box as multiples of the width and height of
that bounding box and relative to the center (that is, they are displaced from
the center).  When these values are applied, the actual transformed shape path
is used rather than the shape geometry (compare with the shadow and perspective
values which necessarily work on the geometry bounding box not the actual
points). This means that a shape that extends outside the geometry bounding box
(such as a text effect) is handled "correctly" for the calculation of the 3-D
origin.  See the definition for c3DOriginX.  Skew angle.  Percentage skew
amount.  Ambient intensity should be low (0 to .1) to avoid washed out
appearance.  Key light source direction. Values may be any number; only their
relative magnitudes matter.  See c3DKeyX definition above.  See c3DKeyX
definition above.  Fixed point intensity. Theoretical maximum is 1, but can be
higher.  Fill light source direction; only their relative magnitudes matter.
This direction defines a second light source arbitrarily called the "fill
light." Generally this will be positioned 90-180 degrees away from the key light
and very roughly in front of the scene to fill in any harsh shadows. This fill
will be dim compared to the first light source. Theoretically it should be
non-harsh, but harsh fill lighting looks better sometimes.  See c3DfillX
definition.  See c3DfillX definition.  Theoretical maximum is 1, but can be
higher.  True if the fill has parallel projection, False if it does not.  If
fc3DParallel is True, the fc3DKeyHarsh and fc3DFillHarsh properties determine
the parallel projection used. A skew amount of 0 means the projection is
orthographic.  



Boolean

fc3DFillHarsh

Boolean

fc3DKeyHarsh

Page 76

True if key lighting is harsh, False if it is not.  True if fill lighting harsh,
False if it is not.

Callout spcot

Callout type:

EMU

Three segments

4

Two segments

3

One segment

2

Right angle

1

Callout angle:

spcoa

Distance from box to first point.

dxyCalloutGap

spcod

90 degrees

5

60 degrees

4

43 degrees

3

30 degrees

2

Any angle

1

Callout drop type:

EMU

Specified by dxyCalloutDropSpecified

3

Bottom

2

Center

1

Top

0

In the case where fCalloutLengthSpecified is True, this holds the actual
distance.

dxyCalloutLengthSpecified EMU

If spcod is 3, then this holds the actual drop distance.

dxyCalloutDropSpecified

Boolean

fCalloutLengthSpecified

Boolean

fCalloutDropAuto

Boolean

fCalloutTextBorder

Boolean

fCalloutAccentBar

Boolean

fCallout

This is a callout.  Callout has an accent bar.  Callout has a text border.  True
if Auto attach is on. False if it is off. If this is True, then the converter
should occasionally invert the drop distance.  True if the callout length is
specified; False if it is not. If True, use dxyCalloutLengthSpecified. If False,
the Best Fit option is on.

The format of the value depends on the property name it is paired with. Many
values are simple single numbers. Distances are expressed in EMU units. There
are 12700 EMU units in a point hence 914400 in an inch and 360000cm-1.
Fractional or fixed values are expressed using units that are 1/65536th of a
whole.  Angles are expressed as fractions of a degree. Colors are 24 bit color
values. Booleans have two possible values: 1 for True and 0 for False.  Arrays
are formatted as a sequence of number separated by semicolons. The first number
tells the size of each element in the array in bytes. The number of bytes per
element may be 2, 4, or 8. When the size of the element is 8, each element is
represented as a group of two numbers. The second number tells the number of
elements in the array. For example, the points of a square polygon are written
as: {sv 8;4;{0,0};{100,0};{100,100};{0,100}} 



Page 77

The ShapeType property can have the following possible values.

Accent Callout 1

44

Callout 3

43

Callout 2

42

Callout 1

41

Text on ring

31

Text on curve

30

Text ring

29

Text wave

28

Text curve

27

Text hexagon

26

Text octagon

25

Text simple

24

Donut

23

Can

22

Plaque

21

Line

20

Arc

19

Seal

18

Balloon

17

Cube

16

Home plate

15

Thick arrow

14

Arrow

13

Star

12

Plus Sign

11

Octagon

10

Hexagon

9

Trapezoid

8

Parallelogram

7

Right triangle

6

Isosceles triangle

5

Diamond

4

Ellipse

3

Round rectangle

2

Rectangle

1

Freeform or non-autoshape

0

Description

Value





Quad Arrow Callout

83

Up Down Arrow Callout

82

Left Right Arrow Callout

81

Down Arrow Callout

80

Up Arrow Callout

79

Right Arrow Callout

78

Left Arrow Callout

77

Quad Arrow

76

Picture Frame

75

Heart

74

Lightning Bolt

73

IrregularSeal2

72

IrregularSeal1

71

Up Down Arrow

70

Left Right Arrow

69

Up Arrow

68

Down Arrow

67

Left Arrow

66

Folded Corner

65

Wave

64

Wedge Ellipse Callout

63

Wedge RRect Callout

62

Wedge Rect Callout

61

Seal32

60

Seal16

59

Seal8

58

No Smoking

57

Pentagon

56

Chevron

55

Ribbon2

54

Ribbon

53

Accent Border Callout 3

52

Accent Border Callout 2

51

Accent Border Callout 1

50

Border Callout 3

49

Border Callout 2

48

Border Callout 1

47

Accent Callout 3

46

Accent Callout 2

45

Page 78





Flow Chart Punched Tape

122

Flow Chart Punched Card

121

Flow Chart Connector

120

Flow Chart Manual Operation

119

Flow Chart Manual Input

118

Flow Chart Preparation

117

Flow Chart Terminator

116

Flow Chart Multidocument

115

Flow Chart Document

114

Flow Chart Internal Storage

113

Flow Chart Predefined Process

112

Flow Chart Input Output

111

Flow Chart Decision

110

Flow Chart Process

109

Ellipse Ribbon 2

108

Ellipse Ribbon

107

Cloud Callout

106

Curved Down Arrow

105

Curved Up Arrow

104

Curved Left Arrow

103

Curved Right Arrow

102

Uturn Arrow

101

Notched Circular Arrow

100

Circular Arrow

99

Horizontal Scroll

98

Vertical Scroll

97

Smiley Face

96

Block Arc

95

Notched Right Arrow

94

Striped Right Arrow

93

Seal24

92

Bent Arrow

91

Bent Up Arrow

90

Left Up Arrow

89

Right Brace

88

Left Brace

87

Right Bracket

86

Left Bracket

85

Bevel

84

Page 79





Text Deflate

161

Text Inflate

160

Text Wave4

159

Text Wave3

158

Text Wave2

157

Text Wave1

156

Text Cascade Down

155

Text Cascade Up

154

Text Curve Down

153

Text Curve Up

152

Text Button Pour

151

Text Circle Pour

150

Text Arch Down Pour

149

Text Arch Up Pour

148

Text Button Curve

147

Text Circle Curve

146

Text Arch Down Curve

145

Text Arch Up Curve

144

Text Ring Outside

143

Text Ring Inside

142

Text Chevron Inverted

141

Text Chevron

140

Text Triangle Inverted

139

Text Triangle

138

Text Stop

137

Text Plain Text

136

Flow Chart Delay

135

Flow Chart Display

134

Flow Chart Magnetic Drum

133

Flow Chart Magnetic Disk

132

Flow Chart Magnetic Tape

131

Flow Chart Online Storage

130

Flow Chart Offline Storage

129

Flow Chart Merge

128

Flow Chart extract

127

Flow Chart Sort

126

Flow Chart Collate

125

Flow Chart Or

124

Flow Chart Summing Junction

123

Page 80





Text Box

202

Host Control

201

Double Wave

188

Seal4

187

Brace Pair

186

Bracket Pair

185

Moon

184

Sun

183

Left Right Up Arrow

182

Accent Border Callout 90

181

Border Callout 90

180

Accent Callout 90

179

Callout 90

178

Flow Chart Off-Page Connector

177

Flow Chart Alternate Process

176

Text Can Down

175

Text Can Up

174

Text Slant Down

173

Text Slant Up

172

Text Fade Down

171

Text Fade Up

170

Text Fade Left

169

Text Fade Right

168

Text Deflate Inflate Deflate

167

Text Deflate Inflate

166

Text Deflate Top

165

Text Inflate Top

164

Text Deflate Bottom

163

Text Inflate Bottom

162

Page 81

The following keywords are related to defining a hyperlink hanging off of a
shape (that is, all of them are inside of a {\sp {\sn … } {\sp …}}). These
specifically can occur in the \sp to define a property that is a hyperlink. They
are used like this: { \hl

{ \hlloc

RTF-string } { \hlsrc RTF-string } { \hlfr RTF-string } }

The three groups can be in any order. These provide the three strings needed to
describe a hyperlink fully.  Control word

Meaning

Hyperlink property for shapes

Friendly name for hyperlink.

\hlfr

Source string for hyperlink.

\hlsrc

Location string for hyperlink.

\hlloc





Page 82

Footnotes The \footnote control word introduces a footnote. Footnotes are
destinations in RTF. A footnote is anchored to the character that immediately
precedes the footnote destination (that is, the footnote moves with the
character to which it is anchored). If automatic footnote numbering is defined,
the destination can be preceded by a footnote reference character, identified by
the control word \chftn. No Microsoft product supports footnotes within headers,
footers, or comments (annotations). Placing a footnote within headers, footers,
or comments (annotations) will often result in a corrupted document.  Footnotes
have the following syntax.  <foot>

'{' \footnote <para>+ '}'

Here is an example of a destination containing footnotes: \ftnbj\ftnrestart
\sectd \linemod0\linex0\endnhere \pard\plain \ri1170 \fs20 {\pu6 Mead's landmark
study has been amply annotated.\chftn {\footnote \pard\plain \s246 \fs20
{\up6\chftn }See Sahlins, Bateson, and Geertz for a complete bibliography.} It
was her work in America during the Second World War, however, that forms the
basis for the paper. As others have noted, \chftn {\footnote \pard\plain \s246
\fs20 {\up6\chftn} A complete bibliography will be found at the end of this
chapter.} this period was a turning point for Margaret Mead.} \par

To indicate endnotes, the following combination is emitted: \footnote\ftnalt.
Existing readers will ignore the \ftnalt control word and treat everything as a
footnote.  For other control words relating to footnotes, see the sections
titled "Document Formatting Properties" (page 16), "Section Formatting
Properties" (page 20), and "Special Characters" (page 38) in this Application
Note.

Comments (Annotations) RTF comments (annotations) have two parts; the author ID
(introduced by the control word \atnid) and the annotation text (introduced by
the control word \annotation); there is no group enclosing both parts. No
Microsoft product supports comments (annotations) within headers, footers, or
footnotes. Placing an annotation within headers, footers, or footnotes will
often result in a corrupted document. Each part of the annotation is an RTF
destination. Comments (annotations) are anchored to the character that
immediately precedes the annotation.  If an annotation is associated with an
annotation bookmark, the following two destination control words precede and
follow the bookmark. The alphanumeric string N, such as a long integer,
represents the bookmark name.  '{\*' \atrfend N '}'

<atrfend>

'{\*' \atrfstart N '}'

<atrfstart>

Comments (annotations) have the following syntax:

'{\*' \annotation <atnref> <para>+ '}'

<annotdef>

'{\*' \atnauthor #PCDATA '}'

<atnauthor>

'{\*' \atnid #PCDATA '}'

<annotid>

<annotid> <atnauthor> <atntime>? \chatn <atnicn>? <annotdef>

<annot>





'{\*' \atnicn <pict> '}'

<atnicn>

'{\*' \atntime <time> '}'

<atntime>

'{\*' \atnref N '}'

<atnref>

Page 83

An example of annotation text follows: An example of a paradigm might be
Newtonian physics or Darwinian biology.{\v\fs16 {\atnid bz}\chatn{\*\annotation
\pard\plain \s224 \fs20 {\field{\fldinst page \\#'"Page:
'#'\line'"}{\fldrslt}}{\fs16 \chatn } How about some examples that deal with
social science?  That's what this paper is about.}}

Comments (annotations) may have optional time stamps (contained in the \atntime
destination) or icons (contained in the \atnicn destination).

Fields The \field control word introduces a field destination, which contains
the text of fields. Fields have the following syntax:

'{' \fldrslt <para>+ '}'

<fieldrslt>

\fldalt

<fldalt>

'{\*' \fldinst <para>+ <fldalt>? '}'

<fieldinst>

\flddirty? & \fldedit? & \fldlock? & \fldpriv?

<fieldmod>

'{' \field <fieldmod>? <fieldinst> <fieldrslt> '}'

<field>

There are several control words that alter the interpretation of the field.
These control words are listed in the following table.

Result is not in a form suitable for display (for example, binary data used by
fields whose result is a picture).

\fldpriv

Field is locked and cannot be updated.

\fldlock

Text has been added to, or removed from, the field result since the field was
last updated.

\fldedit

A formatting change has been made to the field result since the field was last
updated.

\flddirty

Meaning

Control word

Two subdestinations are required within the \field destination. They must be
enclosed in braces ({ }) and begin with the following control words.

Most recent calculated result of the field. This is a destination control word.

\fldrslt

Field instructions. This is a destination control word.

\fldinst

Meaning

Control word





Page 84

If the instruction for a field contains a file name, then the \cpg control can
be used to define the character set of the file name. See “Code Page Support” on
page 9 of this Application Note for details.  The \fldrslt control word should
be included even if no result has been calculated because most readers (even
those readers that do not recognize fields) can generally include the value of
the \fldrslt destination in the document. A field result should not start with a
table, because this will break some RTF readers.  An example of some field text
follows: {\field {\*\fldinst AUTHOR \\*MERGEFORMAT

}{\fldrslt Joe Smith}}\par\pard

{\field{\*\fldinst time \\@ "h:mm AM/PM"}{\fldrslt 8:12 AM}}

You can use the \fldalt control word to specify that the given field reference
is to an endnote. For example, the following field in RTF is a reference to a
footnote {\field{\*\fldinst NOTEREF _RefNumber } {\fldrslt 1}}

The following is an example of a reference to an endnote {\field{\*\fldinst
NOTEREF _RefNumber \fldalt } {\fldrslt I}}

If the specified field is a form field, the \*\datafield destination appears as
a part of <char> and contains the binary data of a form field instruction. For
example: {\field{\*\fldinst {\*\bkmkstart Text1} FORMTEXT {{\*\datafield
00000000000000000554657874310008476565207768697a0000000000000000000000}}}{\fldrslt
Default Result}}{\*\bkmkend Text1}

Note that the \datafield destination requires the \* prefix. The \fldtype,
\date, \time, and \wpeqn field keywords should be ignored.

Form Fields

Form field type:

\fftypeN

Group destination keyword indicating start of form field data.

\formfield

Meaning

Control word

List

2

Check box

1

Text

0

Type of size selected for check box field:

\ffsizeN

1 if this field is protected, 0 otherwise.

\ffprotN

1 if there is associated status line text (defined under \ffstattext), 0
otherwise.

\ffownstatN

1 if there is associated Help text (defined under \ffhelptext), 0 otherwise.

\ffownhelpN

Exact

1

Auto

0





\fftypetxtN

Page 85

Type of text field:

Calculation

5

Current time

4

Current date

3

Date

2

Number

1

Regular text

0

Result field for a form field. Values from 0 to N-1, where N is the number of
\ffl entries.

\ffresN

List of text for list field. This is a destination control word.

\ffl

Macro to be executed upon exit from this form field (string). This is a
destination control word.

\ffexitmcr

Macro to be executed upon entry into this form field (string). This is a
destination control word.

\ffentrymcr

Status line text (string). This is a destination control word.

\ffstattext

Help text (string). This is a destination control word.

\ffhelptext

Format for text field (string). This is a destination control word.

\ffformat

Default entry for list field (for example 0 = first list item, 1 = second list
item).

\ffdefres

Default text for text field (string). This is a destination control word.

\ffdeftext

Form field name (string). This is a destination control word.

\ffname

Check box size (half-point sizes).

\ffhpsN

Number of characters for text field.

\ffmaxlen

1 if this field has list box attached to it, 0 otherwise.

\ffhaslistboxN

1 if the field should be calculated on exit, 0 otherwise.

\ffrecalcN

Index Entries The \xe control word introduces an index entry. Index entries in
RTF are destinations. An index entry has the following syntax:

'{' \rxe #PCDATA '}'

<rxe>

'{' \txe <char>+ '}'

<txe>

'{' \xe (\xef? & \bxe? & \ixe?) <char>+ (<txe> | <rxe>)? '}'

<idx>

If the text of the index entry is not formatted as hidden text with the \v
control word, the text is put into the document as well as into the index. For
more information on the \v control word, see "Character Formatting Properties"
on page 34 of this Application Note. Similarly, the text of the \txe
subdestination, described later in this section, becomes part of the document if
it is not formatted as hidden text.  The following control words may also be
used.

Allows multiple indexes within the same document. N is an integer that
corresponds to the ASCII value of a letter between A and Z.

\xefN

Meaning

Control word





Page 86

Text argument to be used instead of a page number. This is a destination control
word.

\txe Text

Formats the page number or cross-reference in italic.

\ixe

Formats the page number or cross-reference in bold.

\bxe

\rxe Text argument is a bookmark for the range of page numbers. This is a
destination BookmarkName control word.

Table of Contents Entries The \tc control word introduces a table of contents
entry, which can be used to build the actual table of contents. The \tcn control
word marks a table of contents entry that will not have a page number associated
with it; this is used in place of \tc for such entries. Table of contents
entries are destinations, and they have the following syntax: <toc>

'{' \tc | \tcn (\tcf? & \tcl?) <char>+ '}'

As with index entries, text that is not formatted as hidden with the \v
character-formatting control word is put into the document. The following
control words can also be used in this destination.

Level number (the default is 1).

\tclN

Type of table being compiled. N is mapped by existing Microsoft software to a
letter between A and Z (the default is 67, which maps to C, used for tables of
contents).

\tcfN

Meaning

Control word

Bidirectional Language Support RTF supports bidirectional writing orders for
languages such as Arabic. The controls are described below (as well as in the
appropriate sections throughout this Application Note). Also refer to the
associated character properties defined in “Associated Character Properties” on
page 37 of this Application Note.  All the control words relating to
bidirectional language support are repeated here for convenience.

Text in this document will be displayed from left to right unless overridden by
a more specific control (the default).

\ltrdoc

Text in this document will be displayed from right to left unless overridden by
a more specific control.

\rtldoc

This section will thread columns from left to right (the default).

\ltrsect

This section will thread columns from right to left.

\rtlsect

Cells in this table row will have left-to-right precedence (the default).

\ltrrow

Cells in this table row will have right-to-left precedence.

\rtlrow

Text in this paragraph will be displayed with left-to-right precedence (the
default).

\ltrpar

Text in this paragraph will be displayed with right-to-left precedence

\rtlpar

The following characters should be displayed from left to right.

\ltrmark

The following characters should be displayed from right to left.

\rtlmark

The character data following this control word will be treated as a
left-to-right run (the default).

\ltrch

The character data following this control word will be treated as a
right-to-left run.

\rtlch

Meaning

Control word





Zero-width nonjoiner. This is used for unligating characters.

\zwnj

Zero-width joiner. This is used for ligating characters.

\zwj

Page 87





Page 88

APPENDIX A: SAMPLE RTF READER APPLICATION The GC0165 disk included with this
Application Note contains the sample RTF reader program RTFREADR.EXE, which will
help you create an RTF reader for your own application when used in conjunction
with the Microsoft Rich Text Format Specification and the information below.
Note The sample RTF reader is not a for-sale product, and Microsoft does not
provide technical or any other type of support for the sample RTF reader code or
the RTF specification.

How to Write an RTF Reader There are three basic things that an RTF reader must
do: 1. Separate text from RTF controls.  2. Parse an RTF control.  3. Dispatch
an RTF control.  Separating text from RTF controls is relatively simple, because
all RTF controls begin with a backslash.  Therefore, any incoming character that
is not a backslash is text and will be handled as text. (Of course, what one
does with that text may be relatively complicated.) Parsing an RTF control is
also relatively simple. An RTF control is either (a) a sequence of alphabetic
characters followed by an optional numeric parameter, or (b) a single
non-alphanumeric character.  Dispatching an RTF control, on the other hand, is
relatively complicated. A recursive-descent parser tends to be overly strict
because RTF is intentionally vague about the order of various properties
relative to one another. However, whatever method you use to dispatch an RTF
control, your reader should do the following: 〈

Ignore control words you don’t understand.  Many readers crash when they come
across an unknown RTF control. Because Microsoft is continually adding new RTF
controls, this limits an RTF reader to working with the RTF from one particular
product (usually some version of Word for Windows).

〈

Always understand \*.  One of the most important things an RTF reader can do is
to understand the \* control. This control introduces a destination that is not
part of the document. It tells the RTF reader that if the reader does not
understand the next control word, then it should skip the entire enclosing
group. If your reader follows this rule and the one above, your reader will be
able to cope with any future change to RTF short of a complete rewrite.

〈

Remember that binary data can occur when you’re skipping RTF.  A simple way to
skip a group in RTF is to keep a running count of the opening braces that the
reader has encountered in the RTF stream. When the reader sees an opening brace,
it increments the count; when the reader sees a closing brace, it decrements the
count. When the count becomes negative, the end of the group has been found.
Unfortunately, this doesn’t work when the RTF file contains a \bin control; the
reader must explicitly check each control word found to see if it’s a \bin
control, and, if a \bin control is found, skip that many bytes before resuming
its scanning for braces.

A Sample RTF Reader Implementation The Microsoft Word Processing Conversions
group uses a table-driven approach to reading RTF. This approach allows the most
flexibility in reading RTF, with the corresponding problem that it’s difficult
to detect incorrect RTF. An RTF reader that is based on this approach is
presented below. This reader works exactly as described in the RTF specification
and uses the principles of operation described in the RTF Microsoft Technical
Support



Page 89

specification. This reader is designed to be simple to understand but is not
intended to be very efficient.  This RTF reader also implements the three design
principles listed in the previous section.  The RTF reader consists of four
files:

Rtfactn.c, which contains the dispatch routines for the RTF reader

〈

Rtfreadr.c, which contains the main program, the main loop of the RTF reader,
and the RTF control parser

〈

Rtftype.h, which contains the types used in the RTF reader

〈

Rtfdecl.h, which contains the prototypes for all the functions in the RTF reader

〈

Rtfdecl.h and Rtfreadr.c Rtfdecl.h is straightforward and requires little
explanation.  rtfreadr.c is also reasonably straightforward; the function
ecRtfParse separates text from RTF controls and handles text, and the function
ecParseRtfKeyword parses an RTF control and also collects any parameter that
follows the RTF control.

Rtftype.h Rtftype.h begins by declaring a sample set of character, paragraph,
section, and document properties.  These structures are present to demonstrate
how the dispatch routines can modify any particular property and are not
actually used to format text.  For example, the following enumeration describes
which destination text should be routed to: typedef enum { rdsNorm, rdsSkip }
RDS;

Because this is just a sample RTF reader, there are only two destinations; a
more complicated reader would add an entry to this enumeration for each
destination supported [for example, headers, footnotes, endnotes, comments
(annotations), bookmarks, and pictures].  The following enumeration describes
the internal state of the RTF parser: typedef enum { risNorm, risBin, risHex }
RIS;

This is entirely separate from the state of the dispatch routines and the
destination state; other RTF readers may not necessarily have anything similar
to this.  The following structure encapsulates the state that must be saved at a
group start and restored at a group end: typedef struct save { struct save
*pNext; CHP chp; PAP pap; SEP sep; DOP dop; RDS rds; RIS ris; } SAVE;

The following enumeration describes a set of classes for RTF controls: typedef
enum {kwdChar, kwdDest, kwdProp, kwdSpec} KWD; 



Page 90

Use kwdChar for controls that represent special characters (such as \-, \{, or
\}).  Use kwdDest for controls that introduce RTF destinations.  Use kwdProp for
controls that modify some sort of property.  Use kwdSpec for controls that need
to run some specialized code.  The following enumeration defines the number of
PROP structures (described below) that will be used.  There will typically be an
iprop for every field in the character, paragraph, section, and document
properties.  typedef enum {ipropBold, ipropItalic, ipropUnderline, ipropLeftInd,
ipropRightInd, ipropFirstInd, ipropCols, ipropPgnX, ipropPgnY, ipropXaPage,
ipropYaPage, ipropXaLeft, ipropXaRight, ipropYaTop, ipropYaBottom,
ipropPgnStart, ipropSbk, ipropPgnFormat, ipropFacingp, ipropLandscape,
ipropJust, ipropPard, ipropPlain, ipropMax} IPROP;

The following structure is a very compact way to describe how to locate the
address of a particular value in one of the property structures: typedef enum
{actnSpec, actnByte, actnWord} ACTN; typedef enum {propChp, propPap, propSep,
propDop} PROPTYPE;

typedef struct propmod { ACTN actn; PROPTYPE prop; int offset; } PROP;

The actn field describes the width of the value being described: if the value is
a byte, then actn is actnByte; if the value is a word, then actn is actnWord; if
the value is neither a byte nor a word, then you can use actnSpec to indicate
that some C code needs to be run to set the value. The prop field indicates
which property structure is being described; propChp indicates that the value is
located within the CHP structure; propPap indicates that the value is located
within the PAP structure, and so on. Finally, the offset field contains the
offset of the value from the start of the structure. The offsetof() macro is
usually used to initialize this field.  The following structure describes how to
parse a particular RTF control: typedef enum {ipfnBin, ipfnHex, ipfnSkipDest }
IPFN; typedef enum {idestPict, idestSkip } IDEST;

typedef struct symbol { char *szKeyword; int dflt; bool fPassDflt; KWD kwd; int
idx; } SYM;





Page 91

szKeyword points to the RTF control being described; kwd describes the class of
the particular RTF control (described above); dflt is the default value for this
control, and fPassDflt should be nonzero if the value in dflt should be passed
to the dispatch routine. (fPassDflt is only nonzero for control words that
normally set a particular value. For example, the various section break controls
typically have nonzero fPassDflt controls, but controls that take parameters
should not.) Idx is a generalized index; its use depends on the kwd being used
for this control.

If kwd is kwdSpec, then idx is an ipfn for the appropriate function.

〈

If kwd is kwdProp, then idx is the iprop for the appropriate property.

〈

If kwd is kwdDest, then idx is the idest for the new destination.

〈

If kwd is kwdChar, then idx is the character that should be output.

〈

With this structure, it is very simple to dispatch an RTF control word. Once the
reader isolates the RTF control word and its (possibly associated) value, the
reader then searches an array of SYM structures to find the RTF control word. If
the control word is not found, the reader ignores it, unless the previous
control was \*, in which case the reader must scan past an entire group.  If the
control word is found, the reader then uses the kwd value from the SYM structure
to determine what to do. This is, in fact, exactly what the function
ecTranslateKeyword in the file RTFACTN.C does.

Rtfactn.c Rtfactn.c contains the tables describing the properties and control
words, and the routines to evaluate properties (ecApplyPropChange) and to
dispatch control words (ecTranslateKeyword).  The tables are the keys to
understanding the RTF dispatch routines. The following are some sample entries
from both tables, along with a brief explanation of each entry.  The Property
Table. This table must have an entry for every iprop.  actnByte,

propChp,

offsetof(CHP, fBold),

// ipropBold

This property says that the ipropBold property is a byte parameter bound to
chp.fBold.  actnWord,

propPap,

offsetof(PAP, xaRight),

// ipropRightInd

This property says that ipropRightInd is a word parameter bound to pap.xaRight.
actnWord,

propSep,

offsetof(SEP, cCols),

// ipropCols

This property says that ipropCols is a word parameter bound to sep.cCols.
actnSpec,

propChp,

0,

// ipropPlain

This property says that ipropPlain is a special parameter. Instead of directly
evaluating it, ecApplyPropChange will run some custom C code to apply a property
change.  The Control Word Table.  "b",

1,

fFalse,

kwdProp,

ipropBold,

This structure says that the control \b sets the ipropBold property. Because
fPassDflt is False, the reader only uses the default value if the control does
not have a parameter. If no parameter is provided, the reader uses a value of 1.
"sbknone",

sbkNon, fTrue,

kwdProp,

ipropSbk,

This entry says that the control \sbknone sets the ipropSbk property. Because
fPassDflt is True, the reader always uses the default value of sbkNon, even if
the control has a parameter.  "par",

0,

fFalse,

kwdChar,

0x0a,

This entry says that the control \par is equivalent to a 0x0a (linefeed)
character.  "tab",

0,

fFalse,

kwdChar,

0x09,

This entry says that the control \tab is equivalent to a 0x09 (tab) character.




"bin",

0,

fFalse,

kwdSpec,

Page 92

ipfnBin,

This entry says that the control \bin should run some C code. The particular
piece of C code can be located by the ipfnBin parameter.  "fonttbl",

0,

fFalse,

kwdDest,

idestSkip,

This entry says that the control \fonttbl should change to the destination
idestSkip.

Notes on Implementing Other RTF Features The table-driven approach to
dispatching RTF controls used by the sample converter does not implement any
syntax checking. For most controls, this is not a problem; a control simply
modifies the appropriate property. However, some controls, such as those for
tabs and borders, are dependent on other control words either before or after
the current control word.  There are some standard techniques for handling these
features.

Tabs and Other Control Sequences Terminating in a Fixed Control The best way to
implement these types of control sequences is to have a global structure that
represents the current state of the tab descriptor (or other entity). As the
modifiers come in, they modify the various fields of the global structure. When
the fixed control at the end of the sequence is dispatched, it adds the entire
descriptor and reinitializes the global variable.

Borders and Other Control Sequences Beginning with a Fixed Control The best way
to implement these types of control sequences is to have a global pointer that
is initialized when the fixed control is dispatched. The controls that modify
the fixed control then modify fields pointed to by the control.

Other Problem Areas in RTF Style Sheets Style sheets can be handled as
destinations; however, styles have default values, just as every other control
does. RTF readers should be sure to handle a missing style control as the
default style value (that is, 0).

Property Changes Some RTF readers use various bits of RTF syntax to mark
property changes. In particular, they assume that property changes will occur
only after a group start, which is not correct. Because there is a variety of
ways to represent identical property changes in RTF, RTF readers should look at
the changes in the properties and not at any particular way of representing a
property change. In particular, properties can be changed explicitly with a
control word or implicitly at the end of a group. For example, these three
sequences of RTF have exactly the same semantics, and should be translated
identically:

{\b bold \i Bold Italic \plain\b Bold again}

〈

{\b bold {\i Bold Italic }Bold again}

〈

{\b bold \i Bold Italic \i0 Bold again}

〈





Page 93

Fields All versions of Microsoft Word for Windows and version 6.0 and later of
Microsoft Word for the Macintosh have fields. If you’re writing an RTF reader
and expect to do anything with fields, keep the following notes in mind:

Some fields, the INCLUDE field in particular, can have section breaks in the
field results. If this occurs, then the text after the end of the field does not
have the same section properties as the text at the start of the field; the
section properties must not be restored when the field results contain section
breaks.

〈

Field instructions may have arbitrary amounts of character formatting and
arbitrarily nested groups.  While the groups will be properly nested within the
field instructions, you may be inside an arbitrary number of groups by the time
you know which field you are working with. If you then expect to be able to skip
to the end of the field instructions, you’ll have to know how many groups have
started so that you can skip to the end properly.

〈

Tables Tables are probably the trickiest part of RTF to read and write
correctly. Because of the way Microsoft word processors implement tables, and
the table-driven approach of many Microsoft RTF readers, it is very easy to
write tables in RTF that will crash Microsoft word processors when you try to
read the RTF. Here are some guidelines to reduce problems with tables in RTF:

Even though nested tables are not explicitly defined in RTF, and Word for
Windows and Word for the Macintosh do not support nested tables, you must still
save table properties when changing destinations because tables can be nested
inside other destinations—that is, you can have a table that contains a footnote
or an annotation, and the footnote or annotation can contain another table.

〈

Cell definitions starting before the left margin of the paper begins (that is,
the parameter plus the left margin is negative) are always in error.

〈

Do not use the \sbys control inside a table. \sbys is a holdover from Word for
MS-DOS and early versions of Word for the Macintosh. Word for Windows and
current versions of Word for the Macintosh translate \sbys as a table. Because
Word for Windows and Word for the Macintosh do not support nested tables, these
products will probably crash if you specify \sbys in a table.

〈

Some controls must be the same in all paragraphs in a row. In particular, all
paragraphs in a row must have the same positioning controls, and all paragraphs
in a row must have \intbl specified.

〈

Make sure the number of cells in the RTF matches the number of cell definitions.

〈

Place the entire table definition before any paragraph properties, including
\pard.

〈





Page 94

Appendix A-1: Listings Rtfdecl.h // RTF parser declarations

int ecRtfParse(FILE *fp); int ecPushRtfState(void); int ecPopRtfState(void); int
ecParseRtfKeyword(FILE *fp); int ecParseChar(int c); int ecTranslateKeyword(char
*szKeyword, int param, bool fParam); int ecPrintChar(int ch); int
ecEndGroupAction(RDS rds); int ecApplyPropChange(IPROP iprop, int val); int
ecChangeDest(IDEST idest); int ecParseSpecialKeyword(IPFN ipfn); int
ecParseSpecialProperty(IPROP iprop, int val); int ecParseHexByte(void);

// RTF variable declarations

extern int cGroup; extern RDS rds; extern RIS ris;

extern CHP chp; extern PAP pap; extern SEP sep; extern DOP dop;

extern SAVE *psave; extern long cbBin; extern long lParam; extern bool
fSkipDestIfUnk; extern FILE *fpIn;

// RTF parser error codes

#define ecOK 0

3

#define ecUnmatchedBrace

2

#define ecStackOverflow

1

#define ecStackUnderflow

// Everything's fine!  // Unmatched '}' // Too many '{' -- memory exhausted //
RTF ended during an open group.  



7

#define ecEndOfFile

6

#define ecAssertion

5

#define ecBadTable

4

#define ecInvalidHex

Page 95

// invalid hex character found in data // RTF table (sym or prop) invalid //
Assertion failure // End of file reached while reading RTF

Rtftype.h typedef char bool; #define fTrue 1 #define fFalse 0

typedef struct char_prop { char fBold; char fUnderline; char fItalic; } CHP;

// CHaracter Properties

typedef enum {justL, justR, justC, justF } JUST; typedef struct para_prop {

// justification

JUST just;

// first line indent in twips

int xaFirst;

// right indent in twips

int xaRight;

// left indent in twips

int xaLeft;

} PAP;

// PAragraph Properties

typedef enum {sbkNon, sbkCol, sbkEvn, sbkOdd, sbkPg} SBK; typedef enum {pgDec,
pgURom, pgLRom, pgULtr, pgLLtr} PGN; typedef struct sect_prop {

// how the page number is formatted

PGN pgnFormat;

// y position of page number in twips

int yaPgn;

// x position of page number in twips

int xaPgn;

// section break type

SBK sbk;

// number of columns

int cCols;

} SEP;

// SEction Properties

typedef struct doc_prop {

// right margin in twips

int xaRight;

// top margin in twips

int yaTop;

// left margin in twips

int xaLeft;

// page height in twips

int yaPage;

// page width in twips

int xaPage;





// landscape or portrait??

char fLandscape;

// facing pages enabled?

char fFacingp;

// starting page number in twips

int pgnStart;

// bottom margin in twips

int yaBottom;

} DOP;

Page 96

// DOcument Properties

// Rtf Internal State

typedef enum { risNorm, risBin, risHex } RIS;

// Rtf Destination State

typedef enum { rdsNorm, rdsSkip } RDS;

typedef struct save

// property save structure

{ struct save *pNext;

// next save

CHP chp; PAP pap; SEP sep; DOP dop; RDS rds; RIS ris; } SAVE;

// What types of properties are there?  typedef enum {ipropBold, ipropItalic,
ipropUnderline, ipropLeftInd, ipropRightInd, ipropFirstInd, ipropCols,
ipropPgnX, ipropPgnY, ipropXaPage, ipropYaPage, ipropXaLeft, ipropXaRight,
ipropYaTop, ipropYaBottom, ipropPgnStart, ipropSbk, ipropPgnFormat,
ipropFacingp, ipropLandscape, ipropJust, ipropPard, ipropPlain, ipropSectd,
ipropMax } IPROP;

typedef enum {actnSpec, actnByte, actnWord} ACTN; typedef enum {propChp,
propPap, propSep, propDop} PROPTYPE;

typedef struct propmod {

// structure containing value

PROPTYPE prop;

// size of value

ACTN actn;

int

offset;

// offset of value from base of structure

} PROP;

typedef enum {ipfnBin, ipfnHex, ipfnSkipDest } IPFN; typedef enum {idestPict,
idestSkip } IDEST; typedef enum {kwdChar, kwdDest, kwdProp, kwdSpec} KWD;

typedef struct symbol 



Page 97

{ char *szKeyword; dflt;

// RTF keyword

// true to use default value from this table

bool fPassDflt;

// default value to use

int

idx;

int

kwd;

KWD

// base action to take // index into property table if kwd == kwdProp // index
into destination table if kwd == kwdDest // character to print if kwd == kwdChar

} SYM;





Page 98

Rtfreadr.c #include <stdio.h> #include <stdlib.h> #include <ctype.h> #include
"rtftype.h" #include "rtfdecl.h"

int cGroup; bool fSkipDestIfUnk; long cbBin; long lParam;

RDS rds; RIS ris;

CHP chp; PAP pap; SEP sep; DOP dop;

SAVE *psave; FILE *fpIn;

// // %%Function: main // // Main loop. Initialize and parse RTF.  // main(int
argc, char *argv[]) { FILE *fp; int ec;

fp = fpIn = fopen("test.rtf", "r"); if (!fp) { printf ("Can't open test
file!\n"); return 1; } if ((ec = ecRtfParse(fp)) != ecOK) printf("error %d
parsing rtf\n", ec); else printf("Parsed RTF file OK\n"); Microsoft Technical
Support



Page 99

fclose(fp); return 0; }

// // %%Function: ecRtfParse // // Step 1: // Isolate RTF keywords and send them
to ecParseRtfKeyword; // Push and pop state at the start and end of RTF groups;
// Send text to ecParseChar for further processing.  //

int ecRtfParse(FILE *fp) { int ch; int ec; int cNibble = 2; int b = 0; while
((ch = getc(fp)) != EOF) { if (cGroup < 0) return ecStackUnderflow; if (ris ==
risBin)

// if we're parsing binary data, handle it

directly { if ((ec = ecParseChar(ch)) != ecOK) return ec; } else { switch (ch) {
case '{': if ((ec = ecPushRtfState()) != ecOK) return ec; break; case '}': if
((ec = ecPopRtfState()) != ecOK) return ec; break; case '\\': if ((ec =
ecParseRtfKeyword(fp)) != ecOK) return ec; 



Page 100

break; case 0x0d: case 0x0a:

// cr and lf are noise characters...

break; default: if (ris == risNorm) { if ((ec = ecParseChar(ch)) != ecOK) return
ec; } else {

// parsing hex data if (ris != risHex) return ecAssertion; b = b << 4; if
(isdigit(ch)) b += (char) ch - '0'; else { if (islower(ch)) { if (ch < 'a' || ch
> 'f') return ecInvalidHex; b += (char) ch - 'a'; } else { if (ch < 'A' || ch >
'F') return ecInvalidHex; b += (char) ch - 'A'; } } cNibble--; if (!cNibble) {
if ((ec = ecParseChar(b)) != ecOK) return ec; cNibble = 2; b = 0;

ris = risNorm; } }

// end else (ris != risNorm)

break; }

// switch 



} }

Page 101

// else (ris != risBin) // while

if (cGroup < 0) return ecStackUnderflow; if (cGroup > 0) return
ecUnmatchedBrace; return ecOK; }

// // %%Function: ecPushRtfState // // Save relevant info on a linked list of
SAVE structures.  //

int ecPushRtfState(void) { SAVE *psaveNew = malloc(sizeof(SAVE)); if (!psaveNew)
return ecStackOverflow;

psaveNew -> pNext = psave; psaveNew -> chp = chp; psaveNew -> pap = pap;
psaveNew -> sep = sep; psaveNew -> dop = dop; psaveNew -> rds = rds; psaveNew ->
ris = ris; ris = risNorm; psave = psaveNew; cGroup++; return ecOK; }

// // %%Function: ecPopRtfState // // If we're ending a destination (that is,
the destination is changing), // call ecEndGroupAction.  // Always restore
relevant info from the top of the SAVE list.  //

int 



Page 102

ecPopRtfState(void) { SAVE *psaveOld; int ec;

if (!psave) return ecStackUnderflow;

if (rds != psave->rds) { if ((ec = ecEndGroupAction(rds)) != ecOK) return ec; }
chp = psave->chp; pap = psave->pap; sep = psave->sep; dop = psave->dop; rds =
psave->rds; ris = psave->ris;

psaveOld = psave; psave = psave->pNext; cGroup--; free(psaveOld); return ecOK; }

// // %%Function: ecParseRtfKeyword // // Step 2: // get a control word (and its
associated value) and // call ecTranslateKeyword to dispatch the control.  //

int ecParseRtfKeyword(FILE *fp) { int ch; char fParam = fFalse; char fNeg =
fFalse; int param = 0; char *pch; char szKeyword[30]; Microsoft Technical
Support



Page 103

char szParameter[20];

szKeyword[0] = '\0'; szParameter[0] = '\0'; if ((ch = getc(fp)) == EOF) return
ecEndOfFile; if (!isalpha(ch))

// a control symbol; no delimiter.

{ szKeyword[0] = (char) ch; szKeyword[1] = '\0'; return
ecTranslateKeyword(szKeyword, 0, fParam); } for (pch = szKeyword; isalpha(ch);
ch = getc(fp)) *pch++ = (char) ch; *pch = '\0'; if (ch == '-') { fNeg

= fTrue;

if ((ch = getc(fp)) == EOF) return ecEndOfFile; } if (isdigit(ch)) { fParam =
fTrue;

// a digit after the control means we have a parameter

for (pch = szParameter; isdigit(ch); ch = getc(fp)) *pch++ = (char) ch; *pch =
'\0'; param = atoi(szParameter); if (fNeg) param = -param; lParam =
atol(szParameter); if (fNeg) param = -param; } if (ch != ' ') ungetc(ch, fp);
return ecTranslateKeyword(szKeyword, param, fParam); }

// // %%Function: ecParseChar // // Route the character to the appropriate
destination stream.  // 



Page 104

int ecParseChar(int ch) { if (ris == risBin && --cbBin <= 0) ris = risNorm;
switch (rds) { case rdsSkip: // Toss this character.  return ecOK; case rdsNorm:
// Output a character. Properties are valid at this point.  return
ecPrintChar(ch); default: // handle other destinations....  return ecOK; } } //
// %%Function: ecPrintChar // // Send a character to the output file.  //

int ecPrintChar(int ch) { // unfortunately, we don't do a whole lot here as far
as layout goes...  putchar(ch); return ecOK; }





Page 105

RTFACTN.C #include <stdio.h> #include <string.h> #include <stddef.h> #include
<ctype.h> #include "rtftype.h" #include "rtfdecl.h"

// RTF parser tables

// Property descriptions PROP rgprop [ipropMax] = {

propDop,

actnByte,

propDop,

actnByte,

propSep,

actnByte,

propSep,

actnByte,

propDop,

actnWord,

propDop,

actnWord,

propDop,

actnWord,

propDop,

actnWord,

propDop,

actnWord,

propDop,

actnWord,

propDop,

actnWord,

propSep,

actnWord,

propSep,

actnWord,

propSep,

actnWord,

propPap,

actnWord,

propPap,

actnWord,

propPap,

actnWord,

propChp,

actnByte,

propChp,

actnByte,

propChp,

actnByte,

propSep,

actnSpec,

propChp,

actnSpec,

propPap,

actnSpec,

propPap,

actnByte,

offsetof(CHP, fBold), offsetof(CHP, fItalic), offsetof(CHP, fUnderline),
offsetof(PAP, xaLeft), offsetof(PAP, xaRight), offsetof(PAP, xaFirst),
offsetof(SEP, cCols), offsetof(SEP, xaPgn), offsetof(SEP, yaPgn), offsetof(DOP,
xaPage), offsetof(DOP, yaPage), offsetof(DOP, xaLeft), offsetof(DOP, xaRight),
offsetof(DOP, yaTop), offsetof(DOP, yaBottom), offsetof(DOP, pgnStart),
offsetof(SEP, sbk), offsetof(SEP, pgnFormat), offsetof(DOP, fFacingp),
offsetof(DOP, fLandscape), offsetof(PAP, just), 0, 0, 0,

// ipropBold // ipropItalic // ipropUnderline // ipropLeftInd // ipropRightInd
// ipropFirstInd // ipropCols // ipropPgnX // ipropPgnY // ipropXaPage //
ipropYaPage // ipropXaLeft // ipropXaRight // ipropYaTop // ipropYaBottom //
ipropPgnStart // ipropSbk // ipropPgnFormat // ipropFacingp // ipropLandscape //
ipropJust // ipropPard // ipropPlain // ipropSectd

};

// Keyword descriptions SYM rgsymRtf[] = { //

keyword

dflt

1,

"i",

1,

"u",

1,

"b",

fPassDflt fFalse, fFalse, fFalse,

kwd kwdProp, kwdProp, kwdProp,

idx ipropBold, ipropUnderline, ipropItalic,





sbkOdd, fTrue,

"sbkodd",

sbkEvn, fTrue,

"sbkeven",

sbkCol, fTrue,

"sbkcol",

sbkNon, fTrue,

"sbknone",

1,

"cols",

0,

"fi",

0,

"ri",

0,

"li",

pgDec,

"pgndec",

0,

"pgny",

0,

"pgnx",

sbkPg,

"sbkpage",

fFalse, fFalse, fFalse, fFalse,

fTrue, fFalse, fFalse, fTrue,

kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp,
kwdProp, kwdProp, kwdProp,

kwdProp,

fTrue,

kwdProp,

"pgnlcltr", pgLLtr, fTrue,

kwdProp,

"pgnucltr", pgULtr, fTrue,

kwdProp,

pgLRom, fTrue,

"pgnlcrm",

pgURom, fTrue,

"pgnucrm",

1800,

"margr",

1800,

"margl",

15480,

"paperh",

12240,

"paperw",

justF,

"qj",

justR,

"qr",

justL,

"ql",

justC,

"qc",

fTrue, fTrue, fTrue, fFalse, fFalse, fFalse, fFalse,

fTrue,

1,

fTrue,

"pgnstart", 1,

fFalse,

1440,

"margb",

1440,

"margt",

fFalse,

fFalse,

0,

fFalse,

"rdblquote",0,

fFalse,

"ldblquote",0,

fFalse,

0,

"tab",

0,

"\0x0d",

0,

"\0x0a",

fFalse,

0,

"par",

fTrue,

"landscape",1,

"facingp",

fFalse, fFalse,

0,

"doccomm",

0,

"creatim",

fFalse,

0,

"comment",

fFalse,

"colortbl", 0,

fFalse,

0,

"buptim",

0,

"author",

0,

"'",

0,

"*",

"bin",

fFalse, fFalse, fFalse,

fFalse, fFalse,

kwdProp,

kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp, kwdProp,
kwdProp, kwdProp, kwdProp, kwdChar, kwdChar, kwdChar, kwdChar, kwdChar, kwdChar,
kwdSpec, kwdSpec, kwdSpec, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest,

Page 106

ipropLeftInd, ipropRightInd, ipropFirstInd, ipropCols, ipropSbk, ipropSbk,
ipropSbk, ipropSbk, ipropSbk, ipropPgnX, ipropPgnY, ipropPgnFormat,
ipropPgnFormat, ipropPgnFormat, ipropPgnFormat, ipropPgnFormat, ipropJust,
ipropJust, ipropJust, ipropJust, ipropXaPage, ipropYaPage, ipropXaLeft,
ipropXaRight, ipropYaTop, ipropYaBottom, ipropPgnStart, ipropFacingp,
ipropLandscape, 0x0a, 0x0a, 0x0a, 0x09, '"', '"', ipfnBin, ipfnSkipDest,
ipfnHex, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip,





fFalse,

0,

fFalse,

"private1", 0,

fFalse,

0,

"printim",

fFalse,

0,

"pict",

fFalse,

"operator", 0,

fFalse,

"keywords", 0,

fFalse,

0,

"info",

0,

"headerr",

0,

"headerl",

0,

"headerf",

0,

"header",

0,

"ftnsepc",

0,

"ftnsep",

fFalse,

0,

"ftncn",

fFalse,

"footnote", 0,

fFalse,

0,

"footerr",

0,

"footerl",

0,

"footerf",

0,

"footer",

0,

"fonttbl",

0,

"rxe",

"revtim",

"stylesheet",

0,

"\\",

0,

"}",

0,

"{",

0,

"xe",

0,

"txe",

0,

"title",

0,

"tc",

0,

"subject",

0,

fFalse, fFalse, fFalse, fFalse,

fFalse, fFalse, fFalse, fFalse, fFalse, fFalse,

fFalse, fFalse, fFalse, fFalse, fFalse, fFalse, fFalse, fFalse, fFalse, fFalse,

kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest,
kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest,
kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest, kwdDest,
kwdChar, kwdChar, kwdChar,

Page 107

idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip,
idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip,
idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip,
idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, idestSkip, '{', '}', '\\'

}; int isymMax = sizeof(rgsymRtf) / sizeof(SYM);

// // %%Function: ecApplyPropChange // // Set the property identified by _iprop_
to the value _val_.  // //

int ecApplyPropChange(IPROP iprop, int val) { char *pb; Microsoft Technical
Support



if (rds == rdsSkip) return ecOK;

Page 108

// If we're skipping text, // don't do anything.

switch (rgprop[iprop].prop) { case propDop: pb = (char *)&dop; break; case
propSep: pb = (char *)&sep; break; case propPap: pb = (char *)&pap; break; case
propChp: pb = (char *)&chp; break; default: if (rgprop[iprop].actn != actnSpec)
return ecBadTable; break; } switch (rgprop[iprop].actn) { case actnByte:
pb[rgprop[iprop].offset] = (unsigned char) val; break; case actnWord: (*(int *)
(pb+rgprop[iprop].offset)) = val; break; case actnSpec: return
ecParseSpecialProperty(iprop, val); break; default: return ecBadTable; } return
ecOK; }

// // %%Function: ecParseSpecialProperty // // Set a property that requires code
to evaluate.  



Page 109

//

int ecParseSpecialProperty(IPROP iprop, int val) { switch (iprop) { case
ipropPard: memset(&pap, 0, sizeof(pap)); return ecOK; case ipropPlain:
memset(&chp, 0, sizeof(chp)); return ecOK; case ipropSectd: memset(&sep, 0,
sizeof(sep)); return ecOK; default: return ecBadTable; } return ecBadTable; }

// // %%Function: ecTranslateKeyword.  // // Step 3.  // Search rgsymRtf for
szKeyword and evaluate it appropriately.  // // Inputs:

fFalse if it did not.

//

fTrue if the control had a parameter; (that is, if param is valid)

// fParam:

The parameter of the RTF control.

// param:

The RTF control to evaluate.

// szKeyword:

//

int ecTranslateKeyword(char *szKeyword, int param, bool fParam) { int isym;

// search for szKeyword in rgsymRtf

for (isym = 0; isym < isymMax; isym++) if (strcmp(szKeyword,
rgsymRtf[isym].szKeyword) == 0) 



Page 110

break; if (isym == isymMax)

// control word not found

{ if (fSkipDestIfUnk) rds = rdsSkip;

// if this is a new destination // skip the destination // else just discard it

fSkipDestIfUnk = fFalse; return ecOK; }

// found it!

use kwd and idx to determine what to do with it.

fSkipDestIfUnk = fFalse; switch (rgsymRtf[isym].kwd) { case kwdProp: if
(rgsymRtf[isym].fPassDflt || !fParam) param = rgsymRtf[isym].dflt; return
ecApplyPropChange(rgsymRtf[isym].idx, param); case kwdChar: return
ecParseChar(rgsymRtf[isym].idx); case kwdDest: return
ecChangeDest(rgsymRtf[isym].idx); case kwdSpec: return
ecParseSpecialKeyword(rgsymRtf[isym].idx); default: return ecBadTable; } return
ecBadTable; }

// // %%Function: ecChangeDest // // Change to the destination specified by
idest.  // There's usually more to do here than this...  //

int ecChangeDest(IDEST idest) { if (rds == rdsSkip) return ecOK;

// if we're skipping text, // don't do anything





Page 111

switch (idest) { default: rds = rdsSkip;

// when in doubt, skip it...

break; } return ecOK; }

// // %%Function: ecEndGroupAction // // The destination specified by rds is
coming to a close.  // If there's any cleanup that needs to be done, do it now.
//

int ecEndGroupAction(RDS rds) { return ecOK; }

// // %%Function: ecParseSpecialKeyword // // Evaluate an RTF control that needs
special processing.  //

int ecParseSpecialKeyword(IPFN ipfn) { if (rds == rdsSkip && ipfn != ipfnBin)
return ecOK;

// if we're skipping, and it's not // the \bin keyword, ignore it.

switch (ipfn) { case ipfnBin: ris = risBin; cbBin = lParam; break; case
ipfnSkipDest: fSkipDestIfUnk = fTrue; break; case ipfnHex: ris = risHex;




Page 112

break; default: return ecBadTable; } return ecOK; }

Makefile rtfreadr.exe: rtfactn.obj rtfreadr.obj link rtfreadr.obj rtfactn.obj
<nul

rtfactn.obj: rtfactn.c rtfdecl.h rtftype.h

rtfreadr.obj: rtfreadr.c rtfdecl.h rtftype.h





Page 113

APPENDIX B: WORD (ASIAN VERSIONS) TEXT FORMAT This appendix contains the changes
to the Rich Text Format (RTF) specification for the Japanese version of Word
(all platforms). In this section, Word J refers to the Japanese version of Word
and RTF-J refers to the RTF specification described below. This document also
contains some information about the interpretation of RTF-J and some behaviors
of Word J.  This appendix is meant to be used in conjunction with the full RTF
specification, assumes you have read the rest of this document, and does not
contain the necessary information to implement an RTF reader or writer by
itself. If you have any questions, please refer to the main specification first.

RTF-J There is a Japanese local RTF specification, called RTF-J, that is
somewhat different from the standard RTF specification. Although Word 7.0 J does
not write RTF-J, it can read RTF-J files. It retains the text strings in the
file and disregards unknown control words.

Escaped Expressions An escape expression (for example, \'hh, \\, or \{) is
usable in all RTF control words.  Writer: In general RTF should be written out
with all characters above 0x80 in the escaped form, \'hh.

Escaped (\'hh)

0x80 <= ch <= 0xFF

Raw (non-escaped) character

0x20 <= ch < 0x80

Escaped (\'hh)

0x00 <= ch < 0x20

Write out as

Character code

For compatibility, there is an RTFParam option in the
HKEY_CURRENT_USERF\Software\Microsoft\Word\7.0FE\ section of the registry
database that determines whether raw 8-bit characters or escaped characters are
used for the double-byte characters in \stylesheet, \fonttbl, \bkmkstart, and
\bkmkend. This option is valid only when writing out the RTF; it does not affect
RTF reading behavior.  [Microsoft Word] RTFParam=7 (the default) uses an escaped
expression when the character is above 0x80.  RTFParam=8 uses raw 8-bit
characters for \stylesheet, \fonttbl, \bkmkstart, and \bkmkend (does not escape
even if trailing-byte was an RTF special character such as \, {, or }).  Reader:
When the RTF reader encounters raw characters in the leading-byte range of the
double-byte character, it regards the next character as the trailing byte of the
double-byte character and combines the two characters into one double-byte
character.

Raw (0x20 <= ch <= 0x7f)

Escaped

Trailing byte

Leading byte

Validity Valid (standard format for double-byte character) Microsoft Technical
Support



Escaped

Raw

Raw

Raw

Escaped (other)

Escaped

Page 114

Valid (standard format for double-byte character) Valid (RTF-J format for
double-byte character) Invalid

Character Set Word J specifies the character set in the font table using
\fcharset. Word J interprets \cpg437 as \fcharset0 and \cpg932 as \fcharset128
if it encounters these control words when reading RTF. If both \fcharset and
\cpg appear in the font table, \cpg is ignored.

Character Mapping Word maps single-byte characters according to character set
information (for example, Macintosh to ANSI) and leaves double-byte characters
unmapped.

Font Family RTF-J control words Definition and the interpretation in Word

RTF-J uses \fjminchou and \fjgothic to specify font family. Word J interprets
these as \fnil, which is the default font family.

\fjminchou and \fjgothic

RTF-J uses \jis as a control word for character set. Word J interprets this as
\ansi, which is the default character set used if the character set is not
defined.

\jis

ShiftJIS Font Without \cpg or \fcharset If \cpg or \fcharset control words are
not present, Word J uses the text metrics of the font before determining the
character set of these fonts. If the font is unknown, Word J assumes it is
SHIFTJIS_CHARSET.

Composite Fonts (Associated Fonts for International Runs) Word J defines control
words to specify composite fonts as associated character properties. These
control words follow the rule of associated character properties and understand
font designation (\af). All other <aprops> are ignored in Word J.

Specifies a run of the double-byte characters.

\dbch

For the characters in the high-ANSI (0x80–-0xFF) area.

\hich

Specifies a run of the characters in the low-ANSI (0x00–0x7F) area.

\loch

Definition

Control word

\loch \af & <aprops> \hich \af & <aprops> \dbch <ptext>

<dbrun>

\loch \af & <aprops> \dbch \af & <aprops> \hich <ptext>

<hisbrun>

\hich \af & <aprops> \dbch \af & <aprops> \loch <ptext>

<losbrun>

<losbrun> | <hisbrun> | <dbrun>

<atext>





Page 115

Word J writes out associated character properties in the styles. In the style
sheet, the <dbrun> definition should be used for compatibility with applications
that have transparent readers.
{\stylesheet{\loch\af5\hich\af5\dbch\f27\fs20\snext0 Normal;}} If the composite
font definition matches the style, only the control word (\loch, \hich, or
\dbch) will be used to distinguish the type of run, along with the font
information for transparent readers.  {\fonttbl{\f5\fswiss\fcharset0\fprq2
Arial;}{\f27\froman\fcharset128\fprq1 Mincho;}}
{\stylesheet{\loch\af5\hich\af5\dbch\f27 \fs20\snext0 Normal;}} \pard\plain
{\dbch\f27\fs20 \'82\'b1\'82\'ea\'82\'cd} {\loch\f5 Test }
{\dbch\f27\'82\'c5\'82\'b7\'81B} \par}

If one or all of \loch, \hich, and \dbch are missing from the style sheet
definition (or the character set doesn't match), Word J will apply appropriate
fonts to each character run in the style using the bulleted rules below.

Any font whose character set is SHIFTJIS_CHARSET.

\dbch

Any font whose character set is ANSI_CHARSET.

\hich

Same font as \f.

\loch

Font that Word J will apply

Control word

If the composite font control words are missing from the character run, Word J
will interpret all characters below 0x80 as a \loch run. Characters above or
equal to 0x80 will be determined using the following rules: If the character is
in the leading-byte range and the next character is in the trailing-byte range
of a double-byte character, it will be treated as a \dbch run (one double-byte
character). For example:

\'99\'47 If the character is in the leading-byte range of a double-byte
character but the next character is not in the trailing-byte range, it will be
treated as a \hich run (two high-ANSI or low-ANSI characters). For example:

\'99\'FF ÿ If the character is in the leading-byte range of a double-byte
character and is the last character in the run, it will be treated as a \hich
run (one high-ANSI character). For example:

\'99\par If the character is not in the leading-byte range of a double-byte
character, it will be treated as a \hich run (one high-ANSI character). For
example:

\'FF ÿ New Control Words Created by Word 6J Control word

Description

Associated Character Properties The text consists of single-byte low-ANSI
(0x00–0x7F) characters.

\loch

The text consists of double-byte characters.

\dbch

The text consists of single-byte high-ANSI (0x80–0xFF) characters.

\hich

Page 116

Borders

Dash-dot-dotted border.

\brdrdashdd

Dash-dotted border.

\brdrdashd

Dashed border.

\brdrdash

Character Properties

Double strikethrough.

\striked

Character width scaling.

\charscalex

Over comma accent.

\acccomma

Over dot accent.

\accdot

No accent characters (over dot / over comma).

\accnone

Wave underline.

\ulwave

Thick underline.

\ulth

Hairline underline.

\ulhair

Dash-dot-dotted underline.

\uldashdd

Dash-dotted underline.

\uldashd

Dashed underline.

\uldash

Document Formatting Properties

Print two logical pages on one physical page.

\twoonone

Show Nth vertical grid (the default is 0).

\dgvshowN

Show Nth horizontal grid (the default is 3).

\dghshowN

Grid vertical origin in twips (the default is 1984).

\dgvoriginN

Grid horizontal origin in twips (the default is 1701).

\dghoriginN

Grid vertical spacing in twips (the default is 120).

\dgvspaceN

Grid horizontal spacing in twips (the default is 120).

\dghspaceN

Snap to grid.

\dgsnap

Parallel gutter.

\gutterprl

Expanding justification.

\jexpand

Compressing justification (default).

\jcompress

List of leading kinsoku characters.

\*\lchars

List of following kinsoku characters.

\*\fchars

Vertical rendering.

\vertdoc

Horizontal rendering.

\horzdoc





\lnongrid

Page 117

Define line based on the grid.

Bullets and Numbering

Wave underline.

\pnulwave

Thick underline.

\pnulth

Hairline underline.

\pnulhair

Dash-dot-dotted underline.

\pnuldashdd

Dash-dotted underline.

\pnuldashd

Dashed underline.

\pnuldash

20 numbered list in circle (\*circlenum).

\pncnum

46 phonetic double-byte katakana characters (\*iroha\*dbchar).

\pnirohad

46 phonetic katakana characters in "iroha" order (\*iroha).

\pniroha

46 phonetic double-byte katakana characters (\*aiueo\*dbchar).

\pnaiud

46 phonetic katakana characters in "aiueo" order (\*aiueo).

\pnaiu

Kanji numbering without the digit character (\*dbnum1).

\pndbnum

Double-byte decimal numbering (\*arabic\*dbchar).

\pndecd

Drawing Objects

Text box flows from top to bottom and right to left, vertically.

\dptxtbrlv

Text box flows from left to right and top to bottom, vertically.

\dptxlrtbv

Text box flows from left to right and bottom to top.

\dptxbtlr

Text box flows from right to left and top to bottom.

\dptxtbrl

Text box flows from left to right and top to bottom (default).

\dptxlrtb

Frame Properties

Frame box flows top to bottom and right to left, vertical.

\frmtxtbrlv

Frame box flows left to right and top to bottom, vertical.

\frmtxlrtbv

Frame box flows left to right and bottom to top.

\frmtxbtlr

Frame box flows right to left and top to bottom.

\frmtxtbrl

Frame box flows from left to right and top to bottom (default).

\frmtxlrtb

Index Entries "Yomi" (pronunciation) for index entry.  \*\pxe Paragraph
Properties

Auto spacing between DBC and English.

\aspalpha

No overflow period and comma.

\nooverflow

Distributed.

\qd

No word wrapping.

\nowwrap

No character wrapping.

\nocwrap





Font alignment → Upholding fixed.

\fafixed

Font alignment → Upholding variable.

\favar

Font alignment → Roman (default).

\faroman

Font alignment → Center.

\facenter

Font alignment → Hanging.

\fahang

Auto spacing between DBC and numbers.

\aspnum

Page 118

Section Formatting Properties

Kanji numbering without the digit character.

\pgndbnum

Double-byte decimal numbering.

\pgndecd

Vertical rendering.

\vertsect

Horizontal rendering.

\horzsect

Kanji numbering with the digit character.  \pgndbnumd Special Characters

Zero-width nonbreak opportunity. Used to remove break opportunity between two
characters.

\zwnbo

Zero-width break opportunity. Used to insert break opportunity between two
characters.

\zwbo

One-quarter em space.  \qmspace Table Formatting \clbrdrdtlcldglu Diagonal line
(top left to bottom right).  \clbrdrdtr\cldgll Diagonal line (top right to
bottom left).

Leader middle dots.

\tlmdot

Cell bottom align.

\clvertalb Tabs

Cell vertically center align.

\clvertalc

Cell top align.

\clvertalt

Contents of the table cell are vertically merged with those of the preceding
cell.

\clvmrg

The first cell in a range of table cells to be vertically merged.

\clvmgf

Text in a cell flows top to bottom and right to left, vertical.

\cltxtbrlv

Text in a cell flows left to right and top to bottom, vertical.

\cltxlrtbv

Text in a cell flows left to right and bottom to top.

\cltxbtlr

Text in a cell flows right to left and top to bottom.

\cltxtbrl

Text in a cell flows from left to right and top to bottom (default).

\cltxlrtb

New Control Words Created by Asian Versions of Word 97 Control word

Meaning

Character Formatting Properties \cgridN

Character grid.  



Disable character space basement.

\nosectexpand

Destination keyword related to character grids.

\gridtbl

Grid column width.

\gcw

Destination related to character grids.

\g

Page 119

Paragraph Formatting Properties

Font alignment the default setting for this is "Auto."

\faauto

Disable snap line to grid.

\nosnaplinegrid Borders \brdrframe

Border resembles a “Frame.”

Bullets and Numbers

Korean numbering 2 (*chosung).

\pnchosung

Korean numbering 1 (*ganada).

\pnganada

Chinese Zodiac numbering 3 (*zodiac3).

\pnzodiacl

Chinese Zodiac numbering 2 (*zodiac2).

\pnzodiacd

Chinese Zodiac numbering 1 (*zodiac1).

\pnzodiac

Chinese numbering 4 (*gb4).

\pngbnumk

Chinese numbering 3 (*gb3).

\pngbnuml

Chinese numbering 2 (*gb2).

\pngbnumd

Chinese numbering 1 (*gb1).

\pngbnum

Korean numbering 2 (*ganada).

\pnganada

Kanji numbering 4 (*dbnum4).

\pndbnumk

Kanji numbering 3 (*dbnum3).

\pndbnuml

Kanji numbering 3 (*dbnum3).

\pndbnumt

Kanji numbering with the digit character (*dbnum2).

\pndbnumd

46 phonetic double-byte Katakana characters (*aiueo*dbchar).

\pnaiueod

46 phonetic Katakana characters in "aiueo" order (*aiueo).

\pnaiueo

Endnotes and Footnotes

Footnote Chinese numbering 3 (*gb3).

\ftnngbnuml

Footnote Chinese numbering 2 (*gb2).

\ftnngbnumd

Footnote Chinese numbering 1 (*gb1).

\ftnngbnum

Footnote Korean numbering 2 (*ganada).

\ftnnganada

Footnote double-byte numbering (*dbchar).

\ftnndbar

Footnote Kanji numbering 4 (*dbnum4).

\ftnndbnumk

Footnote Kanji numbering 3 (*dbnum3).

\ftnndbnumt

Footnote Kanji numbering with the digit character (*dbnum2).

\ftnndbnumd

Foonote Kanji numbering without the digit character (*dbnum1).

\ftnndbnum

Footnote Circle numbering (*circlenum).

\ftnncnum

Footnote Korean numbering 1 (*chosung).

\ftnnchosung





Endnote numbering— Chinese Zodiac numbering 3 (* zodiac3).

\aftnnzodiacl

Endnote numbering— Chinese Zodiac numbering 2 (* zodiac2)

\aftnnzodiacd

Endnote numbering— Chinese Zodiac numbering 1 (* zodiac1)

\aftnnzodiac

Endnote Chinese numbering 4 (*gb4).

\aftnngbnumk

Endnote Chinese numbering 3 (*gb3).

\aftnngbnuml

Endnote Chinese numbering 2 (*gb2).

\aftnngbnumd

Endnote Chinese numbering 1 (*gb1).

\aftnngbnum

Endnote Korean numbering 2 (*ganada).

\aftnnganada

Endnote double-byte numbering (*dbchar).

\aftnndbar

Endnote Kanji numbering 4 (*dbnum4).

\aftnndbnumk

Endnote Kanji numbering 3 (*dbnum3).

\aftnndbnumt

Endnote Kanji numbering with the digit character (*dbnum2).

\aftnndbnumd

Endnote Kanji numbering without the digit character (*dbnum1).

\aftnndbnum

Endnote Circle numbering (*circlenum).

\aftnncnum

Endnote Korean numbering 1 (*chosung).

\aftnnchosung

Footnote numbering— Chinese Zodiac numbering 3 (* zodiac3).

\ftnnzodiacl

Footnote numbering— Chinese Zodiac numbering 2 (* zodiac2)

\ftnnzodiacd

Footnote numbering— Chinese Zodiac numbering 1 (* zodiac1)

\ftnnzodiac

Footnote Chinese numbering 4 (*gb4).

\ftnngbnumk

Page 120

Section Formatting Properties

Specify both number of characters per line and number of lines per page.

\sectspecifylN

Specify number of characters per line only.

\sectspecifyclN

Default state of section. Indicates \sectspecifyclN and \sectspecifylN are not
emitted.

\sectdefaultclN

Line grid.

\sectlinegridN

Character space basement.

\sectexpandN

Chinese Zodiac numbering 3 (*zodiac3).

\pgnzodiacl

Chinese Zodiac numbering 2 (*zodiac2).

\pgnzodiacd

Chinese Zodiac numbering 1 (*zodiac1).

\pgnzodiac

Chinese numbering 4 (*gb4).

\pgngbnumk

Chinese numbering 3 (*gb3).

\pgngbnuml

Chinese numbering 2 (*gb2).

\pgngbnumd

Chinese numbering 1 (*gb1).

\pgngbnum

Korean numbering 2 (*ganada)

\pgnganada

Kanji numbering 4 (*dbnum4).

\pgndbnumk

Kanji numbering 3 (*dbnum3).

\pgndbnumt

Circle numbering (*circlenum).

\pgncnum

Korean numbering 1 (* chosung).

\pgnchosung





\adjustright

Page 121

Adjust right indent.

Document Formatting Properties \dgmargin

Grid to follow margins.

Index Entries \yxe

Pronunciation for index entry.





Page 122

APPENDIX C: INDEX OF RTF CONTROL WORDS The following table contains a list of
each RTF control word, the name of the section where it may be found, and a
brief description of the type of control word. The types are described in the
following table.

This control word requires a parameter.

Value

This control word distinguishes between the ON and OFF states for the given
property. The control word with no parameter or a nonzero parameter is used to
turn on the property, while the control word with a zero parameter is used to
turn it off.

Toggle

This control word represents a special character.

Symbol

This control word starts a group or destination. It ignores any parameter.

Destination

This control word ignores any parameter.

Flag

Description

Type

Note In the following comprehensive table, the names of all control words that
are new to Microsoft Word version 7.0 are followed by an asterisk (*) and the
names of all control words that are new to Microsoft Word 97 are followed by two
asterisks (**).

Value

Associated Character Properties

\acf

Toggle

Associated Character Properties

\acaps

Value

Positioned Objects and Frames

\absw

Flag

Positioned Objects and Frames

\abslock *

Value

Positioned Objects and Frames

\absh

Toggle

Associated Character Properties

\ab

Special Characters

\~

Special Characters

\}

Special Characters

\|

Special Characters

\{

Special Characters

\_

Special Characters

\\

Special Characters

\:

Special Characters

\*

Special Characters

\-

Described in section Special Characters

Control word \'

Type Symbol Symbol Symbol Symbol Symbol Symbol Symbol Symbol Symbol Symbol





Flag

New Control Words Created by Asian Versions of Word 97

\aftnndbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnndbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnndbnum **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnndbar **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnncnum **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnnchosung **

Flag

Document Formatting Properties

\aftnnchi

Flag

Document Formatting Properties

\aftnnauc

Flag

Document Formatting Properties

\aftnnar

Flag

Document Formatting Properties

\aftnnalc

Destination

Document Formatting Properties

\aftncn

Flag

Document Formatting Properties

\aftnbj

Value

Associated Character Properties

\afs

Value

Associated Character Properties

\af

Value

Associated Character Properties

\aexpnd

Flag

Document Formatting Properties

\aendnotes

Flag

Document Formatting Properties

\aenddoc

Value

Associated Character Properties

\adn

Flag

New Control Words Created by Asian Versions of Word 97

\adjustright **

Style Sheet

\additive

Page 123

Flag





Value

Associated Character Properties

\alang

Toggle

Associated Character Properties

\ai

Flag

Document Formatting Properties

\aftntj

Value

Document Formatting Properties

\aftnstart

Destination

Document Formatting Properties

\aftnsepc

Destination

Document Formatting Properties

\aftnsep

Flag

Document Formatting Properties

\aftnrstcont

Flag

Document Formatting Properties

\aftnrestart

Flag

New Control Words Created by Asian Versions of Word 97

\aftnnzodiacl **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnnzodiacd **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnnzodiac **

Flag

Document Formatting Properties

\aftnnruc

Flag

Document Formatting Properties

\aftnnrlc

Flag

New Control Words Created by Asian Versions of Word 97

\aftnngbnuml **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnngbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnngbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnngbnum **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnnganada **

Flag

New Control Words Created by Asian Versions of Word 97

\aftnndbnumt **

Page 124





Destination

Word 97 RTF for Drawing Objects (Shapes)

\background **

Toggle

Character Formatting Properties

\b

Destination

Information Group

\author

Value

Associated Character Properties

\aup

Toggle

Associated Character Properties

\aulw

Toggle

Associated Character Properties

\aulnone

Toggle

Associated Character Properties

\auldb

Toggle

Associated Character Properties

\auld

Toggle

Associated Character Properties

\aul

Comments (annotations)

\atrfstart

Comments (annotations)

\atrfend

Comments (annotations)

\atntime

Comments (annotations)

\atnref

Comments (annotations)

\atnid

Comments (annotations)

\atnicn

Destination

Comments (annotations)

\atnauthor

Toggle

Associated Character Properties

\astrike

Toggle

Associated Character Properties

\ashad

Toggle

Associated Character Properties

\ascaps

Toggle

Associated Character Properties

\aoutl

Unicode RTF

\ansicpgN **

Flag

Character Set

\ansi

Flag

Document Formatting Properties

\annotprot

Destination

Comments (annotations)

\annotation

Value

New Control Words Created by Asian Versions of Word 97

\animtextN **

Flag

Style Sheet

\alt

Flag

Document Formatting Properties

\allprot

Page 125

Value

Destination Destination Destination Destination Destination Destination





Paragraph Text

\brdrdashd **

Paragraph Borders

\brdrdash

Paragraph Borders

\brdrcf

Paragraph Borders

\brdrbtw

Paragraph Borders

\brdrbar

Flag

Paragraph Borders

\brdrb

Value

Document Formatting Properties

\brdrartN **

Paragraph Borders

\box

Color Table

\blue

Pictures

\blipupiN **

Pictures

\blipuid **

Pictures

\bliptagN **

Destination

Bookmarks

\bkmkstart

Flag

Macintosh Edition Manager Publisher Objects

\bkmkpub

Bookmarks

\bkmkend

Bookmarks

\bkmkcoll

Value

Bookmarks

\bkmkcolf

Value

Section Formatting Properties

\binsxn

Value

Section Formatting Properties

\binfsxn

Pictures

\bin

Paragraph Shading

\bgvert

Paragraph Shading

\bghoriz

Paragraph Shading

\bgfdiag

Paragraph Shading

\bgdkvert

Paragraph Shading

\bgdkhoriz

Paragraph Shading

\bgdkfdiag

Paragraph Shading

\bgdkdcross

Paragraph Shading

\bgdkcross

Paragraph Shading

\bgdkbdiag

Paragraph Shading

\bgdcross

Paragraph Shading

\bgcross

Flag

Paragraph Shading

\bgbdiag

Flag

Document Formatting Properties

\bdbfhdr **

Page 126

Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Value

Value Destination

Value Value Value Value Flag

Flag Flag Value Flag Flag





Character Formatting Properties

\caps

Index Entries

\bxe

Information Group

\buptim

Special Characters

\bullet

Value

Paragraph Borders

\brsp

Flag

Document Formatting Properties

\brkfrm

Paragraph Text

\brdrwavydb **

Paragraph Text

\brdrwavy **

Paragraph Borders

\brdrw

Paragraph Text

\brdrtriple **

Paragraph Text

\brdrtnthtnsg **

Paragraph Text

\brdrtnthtnmg **

Paragraph Text

\brdrtnthtnlg **

Paragraph Text

\brdrtnthsg **

Paragraph Text

\brdrtnthmg **

Paragraph Text

\brdrtnthlg **

Paragraph Text

\brdrthtnsg **

Paragraph Text

\brdrthtnmg **

Paragraph Text

\brdrthtnlg **

Paragraph Borders

\brdrth

Paragraph Borders

\brdrt

Paragraph Borders

\brdrsh

Paragraph Borders

\brdrs

Paragraph Borders

\brdrr

Paragraph Borders

\brdrl

Flag

Paragraph Borders

\brdrhair

Flag

New Control Words Created by Asian Versions of Word 97

\brdrframe **

Paragraph Text

\brdrengrave **

Paragraph Text

\brdremboss **

Paragraph Borders

\brdrdot

Paragraph Borders

\brdrdb

Paragraph Text

\brdrdashsm **

Paragraph Text

\brdrdashdotstr **

Paragraph Text

\brdrdashdd **

Page 127

Flag Flag Flag Flag Flag Flag Flag

Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag
Value Flag Flag

Symbol Destination Flag Toggle





Special Characters

\chpgn

Special Characters

\chftnsepc

Special Characters

\chftnsep

Special Characters

\chftn

Special Characters

\chdpl

Special Characters

\chdpa

Special Characters

\chdate

Character Text

\chcfpatN **

Character Text

\chcbpatN **

Character Text

\chbrdr **

Character Text

\chbgvert **

Character Text

\chbghoriz **

Character Text

\chbgfdiag **

Character Text

\chbgdkvert **

Character Text

\chbgdkhoriz **

Character Text

\chbgdkfdiag **

Character Text

\chbgdkdcross **

Character Text

\chbgdkcross **

Character Text

\chbgdkbdiag **

Character Text

\chbgdcross **

Character Text

\chbgcross **

Character Text

\chbgbdiag **

Special Characters

\chatn

Value

Character Text

\charscalexN **

Value

New Control Words Created by Asian Versions of Word 97

\cgridN **

Value

Paragraph Shading

\cfpat

Value

Character Formatting Properties

\cf

Table Definitions

\cellx

Symbol

Special Characters

\cell

Value

Character Formatting Properties

\cchs

Value

Paragraph Shading

\cbpat

Value

Character Formatting Properties

\cb

Information Group

\category *

Page 128

Destination

Value

Symbol Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Value
Value Symbol Symbol Symbol Symbol Symbol Symbol Symbol





Symbol

Special Characters

\column

Value

Section Formatting Properties

\colsx

Value

Section Formatting Properties

\colsr

Value

Section Formatting Properties

\cols

Destination

Color Table

\colortbl

Value

Section Formatting Properties

\colno

Paragraph Text

\clvertalt **

Paragraph Text

\clvertalc **

Paragraph Text

\clvertalb **

Paragraph Text

\cltxtbrl **

Paragraph Text

\cltxlrtb **

Table Definitions

\clshdng

Table Definitions

\clmrg

Table Definitions

\clmgf

Table Definitions

\clcfpat

Table Definitions

\clcbpat

Table Definitions

\clbrdrt

Table Definitions

\clbrdrr

Table Definitions

\clbrdrl

Table Definitions

\clbrdrb

Table Definitions

\clbgvert

Table Definitions

\clbghoriz

Table Definitions

\clbgfdiag

Table Definitions

\clbgdkvert

Table Definitions

\clbgdkhor

Table Definitions

\clbgdkfdiag

Table Definitions

\clbgdkdcross

Table Definitions

\clbgdkcross

Table Definitions

\clbgdkbdiag

Table Definitions

\clbgdcross

Table Definitions

\clbgcross

Table Definitions

\clbgbdiag

Special Characters

\chtime

Character Text

\chshdngN **

Page 129

Value Symbol Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag
Flag Flag Flag Value Value Flag Flag Value Flag Flag Flag Flag Flag





Character Formatting Properties

\dn

Value

Pictures

\dibitmap

Flag

New Control Words Created by Asian Versions of Word 97

\dgmargin **

Paragraph Text

\dfrxst **

Paragraph Text

\dfrstop **

Value

Paragraph Text

\dfrstart **

Value

Positioned Objects and Frames

\dfrmtxty

Value

Positioned Objects and Frames

\dfrmtxtx

Paragraph Text

\dfrdateN **

Value

Paragraph Text

\dfrauthN **

Toggle

Character Formatting Properties

\deleted

Value

Document Formatting Properties

\deftab

Value

Document Formatting Properties

\deflangfe **

Value

Document Formatting Properties

\deflang

Flag

Document Formatting Properties

\defformat

Font Table

\deff

Fields

\date **

Destination

Fields

\datafield

Flag

Document Formatting Properties

\cvmme

Flag

Style Sheet

\ctrl

Value

Character Formatting Properties

\cs

Information Group

\creatim

Character Text

\crdateN **

Character Text

\crauthN **

Code Page Support

\cpg

Information Group

\company *

Destination

Information Group

\comment

Value

Section Formatting Properties

\colw

Page 130

Destination Value Value Value Destination

Flag Value

Value

Value Value

Value





Drawing Objects

\dpcodtop

Drawing Objects

\dpcodescent

Drawing Objects

\dpcodcenter

Drawing Objects

\dpcodbottom

Drawing Objects

\dpcodabs

Drawing Objects

\dpcoborder

Drawing Objects

\dpcobestfit

Drawing Objects

\dpcoaccent

Drawing Objects

\dpcoa

Drawing Objects

\dpcallout

Drawing Objects

\dpastartw

Drawing Objects

\dpastartsol

Drawing Objects

\dpastartl

Drawing Objects

\dpastarthol

Drawing Objects

\dparcflipy

Drawing Objects

\dparcflipx

Drawing Objects

\dparc

Drawing Objects

\dpaendw

Drawing Objects

\dpaendsol

Drawing Objects

\dpaendl

Drawing Objects

\dpaendhol

Drawing Objects

\dolock

Drawing Objects

\dodhgt

Destination

Document Variables

\docvar *

Value

Document Formatting Properties

\doctypeN **

Flag

Document Formatting Properties

\doctemp

Information Group

\doccomm

Drawing Objects

\dobypara

Drawing Objects

\dobypage

Drawing Objects

\dobymargin

Drawing Objects

\dobxpage

Drawing Objects

\dobxmargin

Drawing Objects

\dobxcolumn

Destination

Drawing Objects

\do

Flag

Document Formatting Properties

\dntblnsbdb **

Page 131

Flag Flag Flag Flag Flag Flag Destination

Value Flag Flag Value Flag Value Flag Flag Flag Flag Value Flag Value Flag Value
Flag Flag Flag Value Flag Flag Value Flag





Drawing Objects

\dplinesolid

Drawing Objects

\dplinepal

Drawing Objects

\dplinehollow

Drawing Objects

\dplinegray

Drawing Objects

\dplinedot

Drawing Objects

\dplinedash

Drawing Objects

\dplinedadodo

Drawing Objects

\dplinedado

Drawing Objects

\dplinecor

Drawing Objects

\dplinecog

Drawing Objects

\dplinecob

Drawing Objects

\dpline

Drawing Objects

\dpgroup

Drawing Objects

\dpfillpat

Drawing Objects

\dpfillfgpal

Drawing Objects

\dpfillfggray

Drawing Objects

\dpfillfgcr

Drawing Objects

\dpfillfgcg

Drawing Objects

\dpfillfgcb

Drawing Objects

\dpfillbgpal

Drawing Objects

\dpfillbggray

Drawing Objects

\dpfillbgcr

Drawing Objects

\dpfillbgcg

Drawing Objects

\dpfillbgcb

Drawing Objects

\dpendgroup

Drawing Objects

\dpellipse

Drawing Objects

\dpcount

Drawing Objects

\dpcottriple

Drawing Objects

\dpcotsingle

Drawing Objects

\dpcotright

Drawing Objects

\dpcotdouble

Drawing Objects

\dpcosmarta

Drawing Objects

\dpcooffset

Drawing Objects

\dpcominusy

Drawing Objects

\dpcominusx

Drawing Objects

\dpcolength

Page 132

Value Flag Flag Value Flag Flag Flag Flag Flag Value Flag Flag Value Value Value
Value Flag Value Value Value Value Flag Value Flag Flag Value Value Value Flag
Flag Flag Flag Value Flag Flag Flag





Flag

Document Formatting Properties

\endnotes

Flag

Section Formatting Properties

\endnhere

Flag

Document Formatting Properties

\enddoc

Special Characters

\endash

Special Characters

\emspace

Pictures

\emfblip **

Special Characters

\emdash

Character Text

\embo **

Information Group

\edmins

Value

Information Group

\dy

Value

Positioned Objects and Frames

\dxfrtext

Value

Section Formatting Properties

\ds

Value

Positioned Objects and Frames

\dropcapt

Value

Positioned Objects and Frames

\dropcapli

Drawing Objects

\dpysize

Drawing Objects

\dpy

Drawing Objects

\dpxsize

Drawing Objects

\dpx

Drawing Objects

\dptxbxtext

Drawing Objects

\dptxbxmar

Drawing Objects

\dptxbx

Drawing Objects

\dpshady

Drawing Objects

\dpshadx

Drawing Objects

\dpshadow

Drawing Objects

\dproundr

Drawing Objects

\dprect

Drawing Objects

\dppty

Drawing Objects

\dpptx

Drawing Objects

\dppolyline

Drawing Objects

\dppolygon

Drawing Objects

\dppolycount

Drawing Objects

\dplinew

Page 133

Value Value Flag Flag Value Value Flag Flag Flag Value Value Flag Value
Destination Value Value Value Value

Value Toggle Symbol Flag Symbol Symbol





Form Fields

\fftypeN **

Form Fields

\ffstattext **

Form Fields

\ffsizeN **

Form Fields

\ffresN **

Form Fields

\ffrecalcN **

Form Fields

\ffprotN **

Form Fields

\ffownstatN **

Form Fields

\ffownhelpN **

Form Fields

\ffname **

Form Fields

\ffmaxlen **

Form Fields

\ffl **

Form Fields

\ffhpsN **

Form Fields

\ffhelptext **

Form Fields

\ffhaslistboxN **

Form Fields

\ffformat **

Form Fields

\ffexitmcr **

Form Fields

\ffentrymcr **

Form Fields

\ffdeftext **

Value

Form Fields

\ffdefres **

Value

Document Formatting Properties

\fet

Font Table

\fdecor

Font Table

\fcharset

Font Table

\fbidi

Font Table

\fbiasN **

Destination

Font Table

\falt

Flag

Document Formatting Properties

\facingp

Value

New Control Words Created by Asian Versions of Word 97

\faauto **

Value

Character Formatting Properties

\f

Flag

Document Formatting Properties

\expshrtn **

Value

Character Formatting Properties

\expndtw

Value

Character Formatting Properties

\expnd

Special Characters

\enspace

Page 134

Symbol

Value Flag Value Flag

Destination Destination Destination Destination Value Destination Value
Destination Value Destination Value Value Value Value Value Value Destination
Value





Value

File Table

\fosnum

Flag

Document Formatting Properties

\formshade

Flag

Document Formatting Properties

\formprot

Destination

Form Fields

\formfield **

Flag

Document Formatting Properties

\formdisp

Destination

Footnotes

\footnote

Value

Section Formatting Properties

\footery

Headers and Footers

\footerr

Headers and Footers

\footerl

Headers and Footers

\footerf

Headers and Footers

\footer

Font Table

\fonttbl

Font Table

\fontfile

Font Table

\fontemb

Font Table

\fnil

File Table

\fnetwork

Font Table

\fname *

Style Sheet

\fn

Font Table

\fmodern

Fields

\fldtype **

Fields

\fldrslt

Fields

\fldpriv

Fields

\fldlock

Fields

\fldinst

Fields

\fldedit

Flag

Fields

\flddirty

Flag

Document Formatting Properties

\fldalt

File Table

\filetbl

File Table

\file

Fields

\field

Value

File Table

\fid

Value

Paragraph Formatting Properties

\fi

Form Fields

\fftypetxtN **

Page 135

Value

Destination Destination Destination

Flag Destination Flag Flag Destination Destination Flag Value Destination Flag
Flag Destination Destination Destination Destination Destination Destination
Destination





Flag

New Control Words Created by Asian Versions of Word 97

\ftnndbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnndbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnndbnum **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnndbar **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnncnum **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnnchosung **

Flag

Document Formatting Properties

\ftnnchi

Flag

Document Formatting Properties

\ftnnauc

Flag

Document Formatting Properties

\ftnnar

Flag

Document Formatting Properties

\ftnnalc

Flag

Font Table

\ftnil

Destination

Document Formatting Properties

\ftncn

Flag

Document Formatting Properties

\ftnbj

Flag

Document Formatting Properties

\ftnalt

Font Table

\ftech

Font Table

\fswiss

Flag

Font Table

\fscript

Value

Character Formatting Properties

\fs

Flag

Document Formatting Properties

\fromtext **

Font Table

\froman

Value

File Table

\frelative

Flag

Document Formatting Properties

\fracwidth

Font Table

\fprq

Page 136

Value

Flag

Flag Flag





File Table

\fvaliddos

Flag

Font Table

\fttruetype

Flag

Document Formatting Properties

\ftntj

Value

Document Formatting Properties

\ftnstart

Destination

Document Formatting Properties

\ftnsepc

Destination

Document Formatting Properties

\ftnsep

Flag

Document Formatting Properties

\ftnrstpg

Flag

Document Formatting Properties

\ftnrstcont

Flag

Document Formatting Properties

\ftnrestart

Flag

New Control Words Created by Asian Versions of Word 97

\ftnnzodiacl **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnnzodiacd **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnnzodiac **

Flag

Document Formatting Properties

\ftnnruc

Flag

Document Formatting Properties

\ftnnrlc

Flag

New Control Words Created by Asian Versions of Word 97

\ftnngbnuml **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnngbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnngbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnngbnum **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnnganada **

Flag

New Control Words Created by Asian Versions of Word 97

\ftnndbnumt **

Page 137

Flag





Toggle

Paragraph Formatting Properties

\hyphpar

Value

Document Formatting Properties

\hyphhotz

Value

Document Formatting Properties

\hyphconsec

Toggle

Document Formatting Properties

\hyphcaps

Toggle

Document Formatting Properties

\hyphauto

Value

Information Group

\hr

Value

Word 97 RTF for Drawing Objects (Shapes)

\hlsrc **

Value

Word 97 RTF for Drawing Objects (Shapes)

\hlloc **

Value

Information Group

\hlinkbase **

Value

Word 97 RTF for Drawing Objects (Shapes)

\hlfr **

Value

Highlighting

\highlight *

Value

Section Formatting Properties

\headery

Headers and Footers

\headerr

Headers and Footers

\headerl

Headers and Footers

\headerf

Destination

Headers and Footers

\header

Value

Section Formatting Properties

\guttersxn

Value

Document Formatting Properties

\gutter

Destination

New Control Words Created by Asian Versions of Word 97

\gridtbl **

Value

Color Table

\green

Value

New Control Words Created by Asian Versions of Word 97

\gcw **

Destination

New Control Words Created by Asian Versions of Word 97

\g **

File Table

\fvalidntfs

File Table

\fvalidmac

File Table

\fvalidhpfs

Page 138

Flag Flag Flag

Destination Destination Destination





Paragraph Formatting Properties

\li

List Table

\leveltext **

List Table

\levelstartatN **

List Table

\levelspaceN **

List Table

\levelprevspaceN **

List Table

\levelprevN **

List Table

\leveloldN **

List Table

\levelnumbers **

List Table

\levelnorestartN **

List Table

\levelnfcN **

List Table

\levellegalN **

List Table

\leveljcN **

List Table

\levelindentN **

Value

List Table

\levelfollowN **

Value

Paragraph Formatting Properties

\level

Symbol

Special Characters

\ldblquote

Value

Character Formatting Properties

\lang

Flag

Document Formatting Properties

\landscape

Information Group

\keywords

Destination

Style Sheet

\keycode

Value

Character Formatting Properties

\kerning

Flag

Paragraph Formatting Properties

\keepn

Flag

Paragraph Formatting Properties

\keep

Pictures

\jpegblip **

Flag

Index Entries

\ixe

Flag

Paragraph Formatting Properties

\intbl

Information Group

\info

Character Text

\impr **

Paragraph Text

\ilvl **

Value

Information Group

\id

Toggle

Character Formatting Properties

\i

Page 139

Value Toggle Destination

Flag

Destination

Value Value Value Value Value Destination Value Value Value Value Value Value
Value





Flag

Table Definitions

\ltrrow

Flag

Paragraph Formatting Properties

\ltrpar

Symbol

Special Characters

\ltrmark

Flag

Document Formatting Properties

\ltrdoc

Flag

Character Formatting Properties

\ltrch

List Table

\ls **

Symbol

Special Characters

\lquote

Flag

Section Formatting Properties

\lndscpsxn

Paragraph Text

\listtext **

List Table

\listtemplateidN **

List Table

\listsimpleN **

List Table

\listrestarthdnN **

List Table

\listoverridestartN **

List Table

\listoverrideformatN **

List Table

\listoverridecountN **

List Table

\listname **

List Table

\listidN **

Value

Information Group

\linkval *

Flag

Document Formatting Properties

\linkstyles

Flag

Objects

\linkself

Value

Section Formatting Properties

\linex

Value

Section Formatting Properties

\linestarts

Value

Document Formatting Properties

\linestart

Flag

Section Formatting Properties

\linerestart

Flag

Section Formatting Properties

\lineppage

Value

Section Formatting Properties

\linemod

Flag

Section Formatting Properties

\linecont

Flag

Section Formatting Properties

\linebetcol

Special Characters

\line

Page 140

Symbol

Value Destination Value Value Value Value Value Value Destination

Value





Information Group

\nofwords

Information Group

\nofpages

Information Group

\nofcharsws **

Value

Information Group

\nofchars

Flag

Document Formatting Properties

\noextrasprl

Flag

Document Formatting Properties

\nocolbal

Destination

Document Formatting Properties

\nextfile

Flag

Document Formatting Properties

\msmcap **

Information Group

\mo

Value

Information Group

\min

Value

Section Formatting Properties

\margtsxn

Value

Document Formatting Properties

\margt

Value

Section Formatting Properties

\margrsxn

Value

Document Formatting Properties

\margr

Flag

Document Formatting Properties

\margmirror

Value

Section Formatting Properties

\marglsxn

Value

Document Formatting Properties

\margl

Value

Section Formatting Properties

\margbsxn

Value

Document Formatting Properties

\margb

Destination

Information Group

\manager *

Flag

Document Formatting Properties

\makebackup

Pictures

\macpict

Flag

Character Set

\mac

Flag

Document Formatting Properties

\lytprtmet **

Flag

Document Formatting Properties

\lytexcttp **

Flag

Section Formatting Properties

\ltrsect

Page 141

Flag

Value

Value Value Value





Objects

\objlock

Objects

\objlink

Objects

\objicemb

Objects

\objhtml **

Objects

\objh

Objects

\objemb

Objects

\object

Objects

\objdata

Objects

\objcropt

Objects

\objcropr

Objects

\objcropl

Objects

\objcropb

Objects

\objclass

Objects

\objautlink

Objects

\objattph *

Objects

\objalign

Destination

Objects

\objalias

Flag

Document Formatting Properties

\noxlattoyen **

Flag

Positioned Objects and Frames

\nowrap

Flag

Paragraph Formatting Properties

\nowidctlpar

Flag

Document Formatting Properties

\noultrlspc **

Flag

Document Formatting Properties

\notabind

Flag

Character Formatting Properties

\nosupersub

Flag

Document Formatting Properties

\nospaceforul **

Flag

New Control Words Created by Asian Versions of Word 97

\nosnaplinegrid **

Flag

New Control Words Created by Asian Versions of Word 97

\nosectexpand **

Flag

Pictures

\nonshppict **

Flag

Paragraph Formatting Properties

\noline

Flag

Document Formatting Properties

\nolead **

Page 142

Value Flag Flag Destination Value Value Value Value Destination Destination Flag
Value Flag Flag Flag Flag





Flag

Document Formatting Properties

\pgbrdrhead **

Flag

Document Formatting Properties

\pgbrdrfoot **

Flag

Document Formatting Properties

\pgbrdrb **

Character Set

\pca

Flag

Character Set

\pc

Flag

Paragraph Formatting Properties

\pard

Symbol

Special Characters

\par

Value

Document Formatting Properties

\paperw

Value

Document Formatting Properties

\paperh

Destination

Font Table

\panose **

Flag

Paragraph Formatting Properties

\pagebb

Special Characters

\page

Paragraph Text

\overlay **

Value

Paragraph Text

\outlinelevelN **

Toggle

Character Formatting Properties

\outl

Flag

Document Formatting Properties

\otblrul

Destination

Information Group

\operator

Flag

Document Formatting Properties

\oldlinewrap **

Objects

\objw

Objects

\objupdate

Objects

\objtransy

Objects

\objtime

Objects

\objsub

Objects

\objsetsize

Objects

\objsect

Objects

\objscaley

Objects

\objscalex

Objects

\objpub

Objects

\objocx **

Objects

\objname

Page 143

Destination Flag Flag Value Value Destination Flag Flag Destination Value Flag
Value

Flag Symbol

Flag





Flag

Section Formatting Properties

\pgnhnsc

Value

Section Formatting Properties

\pgnhn

Flag

New Control Words Created by Asian Versions of Word 97

\pgngbnuml **

Flag

New Control Words Created by Asian Versions of Word 97

\pgngbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\pgngbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\pgngbnum **

Flag

New Control Words Created by Asian Versions of Word 97

\pgnganada **

Flag

Section Formatting Properties

\pgndec

Flag

New Control Words Created by Asian Versions of Word 97

\pgndbnumt **

Flag

New Control Words Created by Asian Versions of Word 97

\pgndbnumk **

Flag

Section Formatting Properties

\pgncont

Flag

New Control Words Created by Asian Versions of Word 97

\pgncnum **

Flag

New Control Words Created by Asian Versions of Word 97

\pgnchosung **

Value

Section Formatting Properties

\pghsxn

Flag

Document Formatting Properties

\pgbrdrt **

Flag

Document Formatting Properties

\pgbrdrsnap **

Flag

Document Formatting Properties

\pgbrdrr **

Value

Document Formatting Properties

\pgbrdroptN **

Flag

Document Formatting Properties

\pgbrdrl **

Page 144





Pictures

\picbpp

Flag

Pictures

\picbmp

Flag

Positioned Objects and Frames

\phpg

Flag

Positioned Objects and Frames

\phmrg

Flag

Positioned Objects and Frames

\phcol

Value

Section Formatting Properties

\pgwsxn

Flag

New Control Words Created by Asian Versions of Word 97

\pgnzodiacl **

Flag

New Control Words Created by Asian Versions of Word 97

\pgnzodiacd **

Flag

New Control Words Created by Asian Versions of Word 97

\pgnzodiac **

Value

Section Formatting Properties

\pgny

Value

Section Formatting Properties

\pgnx

Flag

Section Formatting Properties

\pgnucrm

Flag

Section Formatting Properties

\pgnucltr

Value

Section Formatting Properties

\pgnstarts

Value

Document Formatting Properties

\pgnstart

Flag

Section Formatting Properties

\pgnrestart

Flag

Section Formatting Properties

\pgnlcrm

Flag

Section Formatting Properties

\pgnlcltr

Flag

Section Formatting Properties

\pgnhnsp

Flag

Section Formatting Properties

\pgnhnsn

Flag

Section Formatting Properties

\pgnhnsm

Flag

Section Formatting Properties

\pgnhnsh

Page 145

Value





Flag

New Control Words Created by Asian Versions of Word 97

\pndbnuml **

Flag

New Control Words Created by Asian Versions of Word 97

\pndbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\pndbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\pnchosung **

Bullets and Numbering

\pncf

Bullets and Numbering

\pncard

Bullets and Numbering

\pncaps

Toggle

Bullets and Numbering

\pnb

Flag

New Control Words Created by Asian Versions of Word 97

\pnaiueod **

Flag

New Control Words Created by Asian Versions of Word 97

\pnaiueo **

Bullets and Numbering

\pnacross

Bullets and Numbering

\pn

Value

Pictures

\pmmetafile

Flag

Character Formatting Properties

\plain

Pictures

\picwgoal

Pictures

\picw

Pictures

\pict

Pictures

\picscaley

Pictures

\picscalex

Pictures

\picscaled

Pictures

\picprop **

Pictures

\pichgoal

Pictures

\pich

Pictures

\piccropt

Pictures

\piccropr

Pictures

\piccropl

Pictures

\piccropb

Page 146

Value Value Value Value Value Value Destination Flag Value Value Destination
Value Value

Destination Flag

Toggle Flag Value





Paragraph Text

\pnrauthN **

Bullets and Numbering

\pnqr

Bullets and Numbering

\pnql

Bullets and Numbering

\pnqc

Bullets and Numbering

\pnprev

Bullets and Numbering

\pnordt

Bullets and Numbering

\pnord

Bullets and Numbering

\pnnumonce

Bullets and Numbering

\pnlvlcont

Bullets and Numbering

\pnlvlbody

Bullets and Numbering

\pnlvlblt

Bullets and Numbering

\pnlvl

Bullets and Numbering

\pnlcrm

Bullets and Numbering

\pnlcltr

Bullets and Numbering

\pnindent

Bullets and Numbering

\pni

Flag

Bullets and Numbering

\pnhang

Flag

New Control Words Created by Asian Versions of Word 97

\pngbnuml **

Flag

New Control Words Created by Asian Versions of Word 97

\pngbnumk **

Flag

New Control Words Created by Asian Versions of Word 97

\pngbnumd **

Flag

New Control Words Created by Asian Versions of Word 97

\pngbnum **

Flag

Pictures

\pngblip **

Flag

New Control Words Created by Asian Versions of Word 97

\pnganada **

Flag

New Control Words Created by Asian Versions of Word 97

\pnganada **

Bullets and Numbering

\pnfs

Bullets and Numbering

\pnf

Flag

Bullets and Numbering

\pndec

Flag

New Control Words Created by Asian Versions of Word 97

\pndbnumt **

Page 147

Value Value

Toggle Value Flag Flag Value Flag Flag Flag Flag Flag Flag Flag Flag Flag Flag
Value





Value

Positioned Objects and Frames

\posx

Value

Positioned Objects and Frames

\posnegy

Value

Positioned Objects and Frames

\posnegx

Flag

New Control Words Created by Asian Versions of Word 97

\pnzodiacl **

Flag

New Control Words Created by Asian Versions of Word 97

\pnzodiacd **

Flag

New Control Words Created by Asian Versions of Word 97

\pnzodiac **

Bullets and Numbering

\pnulw

Bullets and Numbering

\pnulnone

Bullets and Numbering

\pnuldb

Bullets and Numbering

\pnuld

Bullets and Numbering

\pnul

Bullets and Numbering

\pnucrm

Bullets and Numbering

\pnucltr

Bullets and Numbering

\pntxtb

Bullets and Numbering

\pntxta

Bullets and Numbering

\pntext

Bullets and Numbering

\pnstrike

Bullets and Numbering

\pnstart

Bullets and Numbering

\pnsp

Bullets and Numbering

\pnseclvl

Bullets and Numbering

\pnscaps

Paragraph Text

\pnrxstN **

Paragraph Text

\pnrstopN **

Paragraph Text

\pnrstartN **

Paragraph Text

\pnrrgbN **

Paragraph Text

\pnrpnbrN **

Paragraph Text

\pnrnot **

Paragraph Text

\pnrnfcN **

Bullets and Numbering

\pnrestart

Paragraph Text

\pnrdateN **

Page 148

Value Flag Value Flag Value Value Value Value Value Toggle Destination Value
Value Toggle Destination Destination Destination Flag Flag Toggle Flag Flag Flag
Flag





Flag

Positioned Objects and Frames

\pvpg

Flag

Positioned Objects and Frames

\pvpara

Flag

Positioned Objects and Frames

\pvmrg

Flag

Macintosh Edition Manager Publisher Objects

\pubauto

Value

Document Formatting Properties

\psz

Flag

Document Formatting Properties

\psover

Information Group

\proptype *

Value

Information Group

\propname *

Destination

Document Formatting Properties

\private **

Destination

Information Group

\printim

Flag

Document Formatting Properties

\printdata

Flag

Document Formatting Properties

\prcolbl

Flag

Positioned Objects and Frames

\posyt

Paragraph Text

\posyout **

Flag

Paragraph Text

\posyin **

Flag

Positioned Objects and Frames

\posyil

Flag

Positioned Objects and Frames

\posyc

Flag

Positioned Objects and Frames

\posyb

Value

Positioned Objects and Frames

\posy

Flag

Positioned Objects and Frames

\posxr

Flag

Positioned Objects and Frames

\posxo

Flag

Positioned Objects and Frames

\posxl

Flag

Positioned Objects and Frames

\posxi

Flag

Positioned Objects and Frames

\posxc

Page 149

Flag

Value





Character Formatting Properties

\rtlch

RTF Version

\rtf

Objects

\rslttxt

Objects

\rsltrtf

Objects

\rsltpict

Objects

\rsltmerge

Objects

\rsltbmp

Special Characters

\rquote

Symbol

Special Characters

\row

Value

Paragraph Formatting Properties

\ri

Information Group

\revtim

Destination

Revision Marks

\revtbl

Flag

Document Formatting Properties

\revprot

Value

Document Formatting Properties

\revprop

Flag

Document Formatting Properties

\revisions

Toggle

Character Formatting Properties

\revised

Value

Character Text

\revdttmdelN **

Value

Character Formatting Properties

\revdttm

Value

Document Formatting Properties

\revbar

Value

Character Text

\revauthdelN **

Value

Character Formatting Properties

\revauth

Objects

\result

Color Table

\red

Symbol

Special Characters

\rdblquote

Flag

Paragraph Formatting Properties

\qr

Flag

Paragraph Formatting Properties

\ql

Flag

Paragraph Formatting Properties

\qj

Flag

Paragraph Formatting Properties

\qc

Page 150

Value Destination

Destination

Symbol Flag Flag Flag Flag Flag Destination Flag





Value

New Control Words Created by Asian Versions of Word 97

\sectexpandN **

Value

New Control Words Created by Asian Versions of Word 97

\sectdefaultclN **

Flag

Section Formatting Properties

\sectd

Special Characters

\sect

Value

Information Group

\sec

Toggle

Character Formatting Properties

\scaps

Flag

Paragraph Formatting Properties

\sbys

Flag

Section Formatting Properties

\sbkpage

Flag

Section Formatting Properties

\sbkodd

Flag

Section Formatting Properties

\sbknone

Flag

Section Formatting Properties

\sbkeven

Flag

Section Formatting Properties

\sbkcol

Value

Style Sheet

\sbasedon

Value

Paragraph Formatting Properties

\sb

Flag

Style Sheet

\sautoupd **

Value

Paragraph Formatting Properties

\sa

Value

Paragraph Formatting Properties

\s

Destination

Index Entries

\rxe

Flag

Section Formatting Properties

\rtlsect

Flag

Table Definitions

\rtlrow

Flag

Paragraph Formatting Properties

\rtlpar

Symbol

Bidirectional Language Support and Special Characters

\rtlmark

Flag

Document Formatting Properties

\rtldoc

Page 151

Symbol





Destination

Pictures

\shppict **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shplockanchor **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shplidN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpleftN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpgrp **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpfhdrN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpfblwtxtN **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shpbypara **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shpbypage **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shpbymargin **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shpbxpage **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shpbxmargin **

Flag

Word 97 RTF for Drawing Objects (Shapes)

\shpbxcolumn **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpbottomN **

Style Sheet

\shift

Style Sheet

\shidden **

Value

Paragraph Shading

\shading

Toggle

Character Formatting Properties

\shad

Flag

Section Formatting Properties

\sectunlocked

Value

New Control Words Created by Asian Versions of Word 97

\sectspecifylN **

Value

New Control Words Created by Asian Versions of Word 97

\sectspecifyclN **

Symbol

Special Characters

\sectnum

Value

New Control Words Created by Asian Versions of Word 97

\sectlinegridN **

Page 152

Flag Flag





Value

Paragraph Formatting Properties

\subdocument

Flag

Character Formatting Properties

\sub

Style Sheet

\stylesheet

Toggle

Character Text

\strikedl **

Toggle

Character Formatting Properties

\strike

Section Text

\stextflow **

Value

Information Group

\staticval *

Flag

Document Formatting Properties

\sprstsp

Flag

Document Formatting Properties

\sprstsm **

Flag

Document Formatting Properties

\sprsspbf

Flag

Document Formatting Properties

\sprslnsp *

Flag

Document Formatting Properties

\sprsbsp **

Special Characters

\softpage

Special Characters

\softline

Special Characters

\softlheight

Special Characters

\softcol

Value

Style Sheet

\snext

Value

Paragraph Formatting Properties

\slmult

Value

Paragraph Formatting Properties

\sl

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpzN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpwrN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shpwrkN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shptxt **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shptopN **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shprslt **

Value

Word 97 RTF for Drawing Objects (Shapes)

\shprightN **

Page 153

Flag Value Flag Flag

Value

Destination





Table Definitions

\trhdr

Table Definitions

\trgaph

Table Definitions

\trbrdrv

Table Definitions

\trbrdrt

Table Definitions

\trbrdrr

Table Definitions

\trbrdrl

Table Definitions

\trbrdrh

Flag

Table Definitions

\trbrdrb

Flag

Document Formatting Properties

\transmf

Tabs

\tqr

Tabs

\tqdec

Tabs

\tqc

Tabs

\tlul

Tabs

\tlth

Tabs

\tlhyph

Tabs

\tleq

Flag

Tabs

\tldot

Flag

Section Formatting Properties

\titlepg

Information Group

\title

Flag

Fields

\time **

Destination

Document Formatting Properties

\template

Table of Contents Entries

\tcn

Table of Contents Entries

\tcl

Value

Table of Contents Entries

\tcf

Flag

New Control Words Created by Asian Versions of Word 97

\tcelld **

Table of Contents Entries

\tc

Tabs

\tb

Symbol

Special Characters

\tab

Flag

Document Formatting Properties

\swpbdr

Flag

Character Formatting Properties

\super

Destination

Information Group

\subject

Flag

Document Formatting Properties

\subfontbysize *

Page 154

Value Destination

Value Flag

Destination

Flag Flag Flag Flag Flag Flag Flag

Flag Flag Flag Flag Flag Value Flag





Table Definitions

\trrh

Table Definitions

\trqr

Table Definitions

\trql

Table Definitions

\trqc

Table Definitions

\trowd

Table Definitions

\trleft

Table Definitions

\trkeep

Page 155

Flag Value Flag Flag Flag Flag Value

\truncatefont

Section Formatting Properties

\vertalb

Information Group

\version

Value

Information Group

\vern

Toggle

Character Formatting Properties

\v

Information Group

\userprops *

Destination

Unicode RTF

\upr **

Value

Character Formatting Properties

\up

Unicode RTF

\uN **

Toggle

Character Text

\ulwave **

Flag

Character Formatting Properties

\ulw

Toggle

Character Text

\ulth **

Flag

Character Formatting Properties

\ulnone

Flag

Character Formatting Properties

\uldb

Character Text

\uldashdd **

Character Text

\uldashd **

Toggle

Character Text

\uldash **

Flag

Character Formatting Properties

\uld

Toggle

Character Formatting Properties

\ul

Unicode RTF

\ud **

Unicode RTF

\ucN **

Index Entries

\txe

Value

Tabs

\tx

Flag

Document Formatting Properties

height *

Destination Value Destination

Toggle Toggle

Value

Destination

Value Flag





Special Characters

\zwnj

Symbol

Special Characters

\zwj

Flag

New Control Words Created by Asian Versions of Word 97

\yxe **

Information Group

\yr

Index Entries

\xef

Destination

Index Entries

\xe

Flag

Document Formatting Properties

\wraptrsp

Flag

Document Formatting Properties

\wpsp **

Flag

Document Formatting Properties

\wpjst **

Fields

\wpeqn **

Value

Pictures

\wmetafile

Value

Document Formatting Properties

\windowcaption **

Flag

Document Formatting Properties

\widowctrl

Flag

Paragraph Formatting Properties

\widctlpar

Pictures

\wbmwidthbytes

Pictures

\wbmplanes

Pictures

\wbmbitspixel

Value

Pictures

\wbitmap

Value

Document Formatting Properties

\viewzkN **

Value

Document Formatting Properties

\viewscaleN **

Value

Document Formatting Properties

\viewkindN **

Flag

Section Formatting Properties

\vertalt

Flag

Section Formatting Properties

\vertalj

Flag

Section Formatting Properties

\vertalc

Page 156

Value Value Value

Flag

Value Value

Symbol

#######

The disk and software contained on it, including any accompanying documentation
(the “Software”), are provided to you at no additional charge.  Microsoft
Corporation owns all rights, title, and interest in and to the Software. The
user assumes the entire risk as to the accuracy and the use of the Software.





Page 157

COPYRIGHT NOTICE. Copyright © 1995-1997 Microsoft Corporation. Microsoft and/or
its suppliers, One Microsoft Way, Redmond, Washington 980526399 U.S.A. All
rights reserved.

TRADEMARKS. Microsoft, Windows, Windows NT, MSN, The Microsoft Network and/or
other Microsoft products referenced herein are either trademarks or registered
trademarks of Microsoft. Other product and company names mentioned herein may be
the trademarks of their respective owners.

The names of companies, products, people, characters and/or data mentioned
herein are fictitious and are in no way intended to represent any real
individual, company, product or event, unless otherwise noted.

NO WARRANTY. THE SOFTWARE IS PROVIDED “AS-IS,” WITHOUT WARRANTY OF ANY KIND, AND
ANY USE OF THIS SOFTWARE PRODUCT IS AT YOUR OWN RISK. TO THE MAXIMUM EXTENT
PERMITTED BY APPLICABLE LAW, MICROSOFT AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES
AND CONDITIONS, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
IMPLIED WARRANTIES AND CONDITIONS OF MERCHANTABILITY AND/OR FITNESS FOR A
PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT, WITH REGARD TO THE SOFTWARE.

LIMITATION OF LIABILITY. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN
NO EVENT SHALL MICROSOFT OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION,
DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS
INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY
TO USE THE SOFTWARE, EVEN IF MICROSOFT HAS BEEN ADVISED OF THE POSSIBLITY OF
SUCH DAMAGES.  BECAUSE SOME STATES AND JURISDICTIONS DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE
LIMITATION MAY NOT APPLY. MICROSOFT’S ENTIRE LIABILITY AND YOUR EXCLUSIVE REMEDY
UNDER THIS EULA SHALL NOT EXCEED FIVE DOLLARS (US$5.00).

The following conditions also apply to your use of the Software:

The Software may be copied and distributed internally only, subject to the
following conditions: All text must be copied without modification and all pages
must be included; If software is included, all files on the disk(s) |must be
copied without modification [the MS-DOS(R) utility diskcopy is appropriate for
this purpose]; All components of this Software must be distributed together; and
This Software may not be distributed to any third party.

If you are not a Microsoft Premier customer, Microsoft shall not provide
technical support for this Software.

The Software is provided with RESTRICTED RIGHTS. Use, duplication, or disclosure
by the Government is subject to restrictions set forth in subparagraph
(c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS
252.227-7013 or subparagraphs (c)(1) and (2) of the Commercial Computer
Software—Restricted Rights at 48 CFR 52.227-19, as applicable. Manufacturer is
Microsoft Corporation, One Microsoft Way, Redmond, WA 98052-6399. Any transfer
of the Software must be accompanied by this statement and may only be
transferred if first approved by Microsoft.

You agree that you will not export or re-export the Software to any country,
person, entity or end user subject to U.S.A. export restrictions, and you are
responsible for complying with all applicable U.S. and local export laws in
connection with the use of this Software. You warrant and represent that neither
the U.S.A. Bureau of Export Administration nor any other federal agency has
suspended, revoked or denied you export privileges.

This EULA is governed by the laws of the State of Washington, U.S.A.




